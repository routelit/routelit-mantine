{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"routelit-mantine","text":"<p>Build Mantine-based, server\u2011driven UIs in Python with RouteLit.</p> <p><code>routelit-mantine</code> provides a Python builder API that maps to a React client powered by Mantine components. You describe UI declaratively in Python; RouteLit streams diffs to the browser where Mantine renders beautiful, accessible components.</p> <p>\u2014 Python \u2265 3.9 \u2014</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Rich Mantine components exposed in Python</li> <li>Inputs: checkbox, chip, text input, number input, password input, selects, tags, sliders, rating, switches, groups</li> <li>Layouts: container, grid, flex, group, stack, simple grid, space, app shell, scroll areas, paper/box</li> <li>Navigation: anchors, tabs, nav links, sidebar</li> <li>Feedback and overlays: alerts, notifications, dialogs, drawers, affix, spoiler</li> <li>Data display and charts: tables, images, formatters, area/line/bar/pie/donut/radar/scatter/bubble/radial bar/sparkline/heatmap</li> <li>Server-driven model with a clean builder <code>RLBuilder</code></li> <li>Flask adapter for easy integration (<code>routelit-flask</code>)</li> <li>Great DX: hot dev server for components via Vite</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install the library from PyPI:</p> <pre><code>pip install routelit-mantine\n</code></pre> <p>If you are building a Flask app, also install the adapter and Flask:</p> <pre><code>pip install routelit-flask flask\n</code></pre>"},{"location":"#quickstart-flask","title":"Quickstart (Flask)","text":"<pre><code>from flask import Flask, Response\nfrom routelit import RouteLit\nfrom routelit_flask import RouteLitFlaskAdapter\nfrom routelit_mantine import RLBuilder\n\napp = Flask(__name__)\n\nrl = RouteLit(BuilderClass=RLBuilder)\nadapter = RouteLitFlaskAdapter(rl).configure(app)\n\ndef index_view(ui: RLBuilder) -&gt; None:\n    ui.set_page_config(page_title=\"Home\")\n    ui.title(\"Mantine RouteLit\")\n    ui.text(\"Hello from Python \ud83d\udc4b\")\n    if ui.button(\"Click me\"):\n        ui.notification(\"Clicked!\", color=\"green\")\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index() -&gt; Response:\n    return adapter.stream_response(index_view)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre> <p>Open your browser at <code>http://127.0.0.1:5000/</code>.</p>"},{"location":"#developing-with-the-local-component-dev-server","title":"Developing with the local component dev server","text":"<p>Run the React component playground locally for fast iterations:</p> <pre><code>cd src/frontend\npnpm install\npnpm run dev\n</code></pre> <p>Then start your Python server and point RouteLit to the local dev server:</p> <pre><code>from routelit_flask import RouteLitFlaskAdapter\nadapter = RouteLitFlaskAdapter(\n    rl,\n    run_mode=\"dev_components\",\n    local_components_server=\"http://localhost:5173\",\n).configure(app)\n</code></pre>"},{"location":"#run-the-example-in-this-repo","title":"Run the example in this repo","text":"<p>This repository ships with a comprehensive demo showcasing most components.</p> <p>1) Start the frontend dev server:</p> <pre><code>cd src/frontend\npnpm install\npnpm run dev\n</code></pre> <p>2) In another terminal, sync Python deps and run the example app:</p> <pre><code>uv sync\nuv run src/example/example.py\n</code></pre> <p>Visit <code>http://127.0.0.1:5000/</code> and explore the pages (Layouts, Inputs, Combobox, Buttons, Navigation, Feedback, Overlays, Charts, Dates, etc.).</p>"},{"location":"#key-concepts","title":"Key concepts","text":"<ul> <li>Builder (<code>RLBuilder</code>): the Python API that describes UI (e.g., <code>ui.button</code>, <code>ui.grid</code>, <code>ui.dialog</code>).</li> <li>Views and fragments: plain Python callables that receive <code>RLBuilder</code> and compose UI.</li> <li>Overlays: dialogs and drawers can be created inline or via decorators.</li> <li>App shell and sidebar: use <code>ui.set_app_shell_props</code> and navigate with <code>ui.nav_link</code>.</li> <li>Stateful interactions: use <code>ui.session_state</code> and <code>ui.rerun()</code> to manage state and trigger updates.</li> </ul>"},{"location":"#configuration-notes","title":"Configuration notes","text":"<ul> <li>Flask adapter options:</li> <li><code>run_mode</code>: <code>prod</code> (default), <code>dev_components</code> or <code>dev_client</code></li> <li><code>local_components_server</code>: point to the Vite dev server (e.g., <code>http://localhost:5173</code>)</li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>Source code: https://github.com/routelit/routelit-mantine</li> <li>PyPI: https://pypi.org/project/routelit-mantine/</li> <li>API Reference: see Modules in the left nav or open <code>modules.md</code></li> </ul>"},{"location":"#license","title":"License","text":"<p>APACHE 2.0 \u2014 see the LICENSE file in the repository.</p>"},{"location":"modules/","title":"Modules","text":""},{"location":"modules/#routelit_mantine.builder.GroupOption","title":"<code>GroupOption</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>A group option for a checkbox group.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>class GroupOption(TypedDict):\n    \"\"\"\n    A group option for a checkbox group.\n    \"\"\"\n\n    group: str\n    items: list[str]\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.MTTab","title":"<code>MTTab</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>A tab for a tablist.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>class MTTab(TypedDict, total=False):\n    \"\"\"\n    A tab for a tablist.\n    \"\"\"\n\n    value: str\n    label: Optional[str]\n    color: Optional[str]\n    left_section: Optional[RouteLitElement]\n    right_section: Optional[RouteLitElement]\n    size: Optional[Union[str, int]]\n    keep_mounted: Optional[bool]\n    children: Optional[str]  # For internal use\n    leftSection: Optional[RouteLitElement]  # For internal use\n    rightSection: Optional[RouteLitElement]  # For internal use\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder","title":"<code>RLBuilder</code>","text":"<p>               Bases: <code>RouteLitBuilder</code></p> <p>A builder for a RouteLit application. This Builder template serves as example on how to create a RouteLit custom components.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>class RLBuilder(RouteLitBuilder):\n    \"\"\"\n    A builder for a RouteLit application.\n    This Builder template serves as example on how to create a RouteLit custom components.\n    \"\"\"\n\n    static_assets_targets: ClassVar[list[AssetTarget]] = [\n        {\n            \"package_name\": \"routelit_mantine\",\n            \"path\": \"static\",\n        }\n    ]\n\n    def _init_root(self) -&gt; \"RLBuilder\":\n        new_element = self._create_element(\n            name=\"provider\",\n            key=\"provider\",\n            props={\n                \"defaultColorScheme\": \"auto\",\n                \"theme\": {\n                    \"primaryColor\": \"orange\",\n                },\n            },\n            virtual=True,\n        )\n        return cast(RLBuilder, self._build_nested_builder(new_element))\n\n    def _init_app_shell(self) -&gt; \"RLBuilder\":\n        new_element = self._create_element(\n            name=\"appshell\",\n            key=\"__appshell__\",\n            props={},\n            virtual=True,\n        )\n        return cast(RLBuilder, self._build_nested_builder(new_element))\n\n    def _init_navbar(self) -&gt; \"RLBuilder\":\n        new_element = self._create_element(\n            name=\"navbar\",\n            key=\"__navbar__\",\n            props={},\n            virtual=True,\n        )\n        return cast(RLBuilder, self._build_nested_builder(new_element))\n\n    def _init_main(self) -&gt; \"RLBuilder\":\n        new_element = self._create_element(\n            name=\"main\",\n            key=\"__main__\",\n            props={},\n            virtual=True,\n        )\n        return cast(RLBuilder, self._build_nested_builder(new_element))\n\n    def _on_init(self) -&gt; None:\n        self._root = self._init_root()\n        with self._root:\n            self._app_shell = self._init_app_shell()\n            with self._app_shell:\n                self._navbar = self._init_navbar()\n                self._main = self._init_main()\n        self._parent_element = self._main._parent_element\n        self.active_child_builder = self._main\n\n    def set_provider_props(self, theme: dict[str, Any], **kwargs: Any) -&gt; None:\n        \"\"\"\n        Set the provider props.\n\n        Args:\n            theme (dict[str, Any]): The theme to set.\n            kwargs: Additional props to set.\n        \"\"\"\n        self._root.root_element.props.update(kwargs)\n        self._root.root_element.props[\"theme\"] = theme\n\n    def set_app_shell_props(\n        self,\n        title: Optional[str] = None,\n        logo: Optional[str] = None,\n        navbar_props: Optional[dict[str, Any]] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        Set the app shell props.\n\n        Args:\n            title (Optional[str]): The title of the app shell.\n            logo (Optional[str]): The logo of the app shell.\n            navbar_props (Optional[dict[str, Any]]): The props of the navbar.\n            kwargs: Additional props to set.\n        \"\"\"\n        self._app_shell.root_element.props.update(kwargs)\n        self._app_shell.root_element.props[\"title\"] = title\n        self._app_shell.root_element.props[\"logo\"] = logo\n        self._app_shell.root_element.props[\"navbarProps\"] = navbar_props\n\n    @property\n    def sidebar(self) -&gt; \"RLBuilder\":\n        \"\"\"\n        Get the sidebar builder.\n\n        Returns:\n            RLBuilder: The sidebar builder.\n\n        Example:\n        ```python\n        with ui.sidebar:\n            ui.subheader(\"Sidebar\")\n\n        # or\n\n        ui.sidebar.subheader(\"Sidebar\")\n        ```\n        \"\"\"\n        return self._navbar\n\n    def container(  # type: ignore[override]\n        self,\n        *,\n        fluid: bool = False,\n        key: Optional[str] = None,\n        size: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Create a container.\n\n        Args:\n            fluid (bool): Whether the container is fluid.\n            key (Optional[str]): The key of the container.\n            size (Optional[str]): The size of the container.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: The container builder.\n\n        Example:\n        ```python\n        with ui.container(fluid=True, size=\"xl\", bg=\"var(--mantine-color-blue-light)\"):\n            ui.text(\"Hello World\")\n        \"\"\"\n        new_element = self._create_element(\n            key=key or self._new_text_id(\"container\"),\n            name=\"container\",\n            props={\"fluid\": fluid, \"size\": size, **kwargs},\n        )\n        return cast(RLBuilder, self._build_nested_builder(new_element))\n\n    def flex(  # type: ignore[override]\n        self,\n        *,\n        align: Optional[str] = None,\n        column_gap: Optional[str] = None,\n        direction: Optional[str] = None,\n        gap: Optional[str] = None,\n        justify: Optional[str] = None,\n        key: Optional[str] = None,\n        row_gap: Optional[str] = None,\n        wrap: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Create a flex.\n\n        Args:\n            align (Optional[str]): The alignment of the flex.\n            column_gap (Optional[str]): The gap between columns.\n            direction (Optional[str]): The direction of the flex.\n            gap (Optional[str]): The gap between items.\n            justify (Optional[str]): The justification of the flex.\n            key (Optional[str]): The key of the flex.\n            row_gap (Optional[str]): The gap between rows.\n            wrap (Optional[str]): The wrapping of the flex.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: The flex builder.\n        \"\"\"\n        new_element = self._create_element(\n            key=key or self._new_text_id(\"flex\"),\n            name=\"flex\",\n            props={\n                \"align\": align,\n                \"columnGap\": column_gap,\n                \"direction\": direction,\n                \"gap\": gap,\n                \"justify\": justify,\n                \"rowGap\": row_gap,\n                \"wrap\": wrap,\n                **kwargs,\n            },\n        )\n        return cast(RLBuilder, self._build_nested_builder(new_element))\n\n    def grid(\n        self,\n        *,\n        align: Optional[str] = None,\n        breakpoints: Optional[dict] = None,\n        columns: Optional[int] = None,\n        grow: Optional[bool] = None,\n        gutter: Optional[dict] = None,\n        justify: Optional[str] = None,\n        key: Optional[str] = None,\n        overflow: Optional[str] = None,\n        query_type: Optional[Literal[\"media\", \"container\"]] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Create a responsive grid container.\n\n        Args:\n            align (Optional[str]): Vertical alignment of grid content.\n            breakpoints (Optional[dict]): Responsive column settings per breakpoint.\n            columns (Optional[int]): Number of columns.\n            grow (Optional[bool]): Whether columns should grow to fill available space.\n            gutter (Optional[dict]): Spacing configuration between columns/rows.\n            justify (Optional[str]): Horizontal justification of grid content.\n            key (Optional[str]): Explicit element key.\n            overflow (Optional[str]): Overflow behavior.\n            query_type (Optional[Literal[\"media\", \"container\"]]): Type of responsive query to use.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the created grid element.\n        \"\"\"\n        new_element = self._create_element(\n            key=key or self._new_text_id(\"grid\"),\n            name=\"grid\",\n            props={\n                \"align\": align,\n                \"breakpoints\": breakpoints,\n                \"columns\": columns,\n                \"grow\": grow,\n                \"gutter\": gutter,\n                \"justify\": justify,\n                \"overflow\": overflow,\n                \"type\": query_type,\n                **kwargs,\n            },\n        )\n        return cast(RLBuilder, self._build_nested_builder(new_element))\n\n    def grid_col(\n        self,\n        *,\n        key: Optional[str] = None,\n        offset: Optional[int] = None,\n        order: Optional[int] = None,\n        span: Optional[int] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Add a grid column inside the nearest grid.\n\n        Args:\n            key (Optional[str]): Explicit element key.\n            offset (Optional[int]): Column offset.\n            order (Optional[int]): Column order.\n            span (Optional[int]): How many columns the item spans.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the grid column element.\n        \"\"\"\n        new_element = self._create_element(\n            key=key or self._new_text_id(\"gridcol\"),\n            name=\"gridcol\",\n            props={\n                \"offset\": offset,\n                \"order\": order,\n                \"span\": span,\n                **kwargs,\n            },\n        )\n        return cast(RLBuilder, self._build_nested_builder(new_element))\n\n    def group(\n        self,\n        *,\n        align: Optional[str] = None,\n        gap: Optional[str] = None,\n        grow: Optional[bool] = None,\n        justify: Optional[str] = None,\n        key: Optional[str] = None,\n        prevent_grow_overflow: Optional[bool] = None,\n        wrap: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Arrange children horizontally with spacing and alignment.\n\n        Args:\n            align (Optional[str]): Vertical alignment of items.\n            gap (Optional[str]): Spacing between items.\n            grow (Optional[bool]): Allow items to grow to fill the row.\n            justify (Optional[str]): Horizontal alignment of items.\n            key (Optional[str]): Explicit element key.\n            prevent_grow_overflow (Optional[bool]): Prevent overflow when items grow.\n            wrap (Optional[str]): Wrapping behavior.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the group element.\n        \"\"\"\n        new_element = self._create_element(\n            key=key or self._new_text_id(\"group\"),\n            name=\"group\",\n            props={\n                \"align\": align,\n                \"gap\": gap,\n                \"grow\": grow,\n                \"justify\": justify,\n                \"preventGrowOverflow\": prevent_grow_overflow,\n                \"wrap\": wrap,\n                **kwargs,\n            },\n        )\n        return cast(RLBuilder, self._build_nested_builder(new_element))\n\n    def simple_grid(\n        self,\n        *,\n        cols: Optional[int] = None,\n        key: Optional[str] = None,\n        query_type: Optional[Literal[\"media\", \"container\"]] = None,\n        spacing: Optional[str] = None,\n        vertical_spacing: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Create a simplified responsive grid.\n\n        Args:\n            cols (Optional[int]): Number of columns.\n            key (Optional[str]): Explicit element key.\n            query_type (Optional[Literal[\"media\", \"container\"]]): Responsive query type.\n            spacing (Optional[str]): Spacing between items.\n            vertical_spacing (Optional[str]): Vertical spacing between rows.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the simple grid element.\n        \"\"\"\n        new_element = self._create_element(\n            key=key or self._new_text_id(\"simplegrid\"),\n            name=\"simplegrid\",\n            props={\n                \"cols\": cols,\n                \"spacing\": spacing,\n                \"type\": query_type,\n                \"verticalSpacing\": vertical_spacing,\n                **kwargs,\n            },\n        )\n        return cast(RLBuilder, self._build_nested_builder(new_element))\n\n    def space(\n        self,\n        *,\n        h: Optional[str] = None,\n        key: Optional[str] = None,\n        v: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        Insert vertical and/or horizontal space.\n\n        Args:\n            h (Optional[str]): Horizontal space size (e.g., CSS length).\n            key (Optional[str]): Explicit element key.\n            v (Optional[str]): Vertical space size (e.g., CSS length).\n            kwargs: Additional props to set.\n        \"\"\"\n        self._create_element(\n            key=key or self._new_text_id(\"space\"),\n            name=\"space\",\n            props={\"h\": h, \"v\": v, **kwargs},\n        )\n\n    def stack(\n        self,\n        *,\n        align: Optional[str] = None,\n        gap: Optional[str] = None,\n        justify: Optional[str] = None,\n        key: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Stack children vertically with spacing and alignment.\n\n        Args:\n            align (Optional[str]): Horizontal alignment of items.\n            gap (Optional[str]): Spacing between items.\n            justify (Optional[str]): Vertical alignment of items.\n            key (Optional[str]): Explicit element key.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the stack element.\n        \"\"\"\n        new_element = self._create_element(\n            key=key or self._new_text_id(\"stack\"),\n            name=\"stack\",\n            props={\n                \"align\": align,\n                \"gap\": gap,\n                \"justify\": justify,\n                **kwargs,\n            },\n        )\n        return cast(RLBuilder, self._build_nested_builder(new_element))\n\n    def checkbox(\n        self,\n        label: str,\n        *,\n        auto_contrast: Optional[bool] = None,\n        checked: bool = False,\n        color: Optional[str] = None,\n        description: Optional[str] = None,\n        disabled: Optional[bool] = None,\n        error: Optional[str] = None,\n        icon_color: Optional[str] = None,\n        key: Optional[str] = None,\n        label_position: Optional[Literal[\"left\", \"right\"]] = None,\n        name: Optional[str] = None,\n        on_change: Optional[Callable[[bool], None]] = None,\n        radius: Optional[Union[Literal[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"], int]] = None,\n        size: Optional[Literal[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]] = None,\n        **kwargs: Any,\n    ) -&gt; bool:\n        \"\"\"\n        Boolean input rendered as a single checkbox.\n\n        Args:\n            label (str): Checkbox label.\n            auto_contrast (Optional[bool]): Improve contrast automatically.\n            checked (bool): Initial checked state.\n            color (Optional[str]): Accent color.\n            description (Optional[str]): Helper text under the label.\n            disabled (Optional[bool]): Disable input interaction.\n            error (Optional[str]): Error message.\n            icon_color (Optional[str]): Color of the check icon.\n            key (Optional[str]): Explicit element key.\n            label_position (Optional[Literal[\"left\", \"right\"]]): Label position.\n            name (Optional[str]): Input name.\n            on_change (Optional[Callable[[bool], None]]): Change handler.\n            radius (Optional[Union[Literal[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"], int]]): Corner radius.\n            size (Optional[Literal[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]]): Control size.\n            kwargs: Additional props to set.\n\n        Returns:\n            bool: Current value.\n        \"\"\"\n        return self._x_checkbox(\n            \"checkbox\",\n            key or self._new_widget_id(\"checkbox\", label),\n            autoContrast=auto_contrast,\n            checked=checked,\n            color=color,\n            description=description,\n            disabled=disabled,\n            error=error,\n            iconColor=icon_color,\n            label=label,\n            labelPosition=label_position,\n            name=name,\n            on_change=on_change,\n            radius=radius,\n            size=size,\n            **kwargs,\n        )\n\n    def checkbox_group(  # type: ignore[override]\n        self,\n        label: str,\n        options: list[Union[RLOption, str]],\n        *,\n        description: Optional[str] = None,\n        error: Optional[str] = None,\n        format_func: Optional[Callable[[Any], str]] = None,\n        group_props: Optional[dict[str, Any]] = None,\n        key: Optional[str] = None,\n        on_change: Optional[Callable[[list[str]], None]] = None,\n        radius: Optional[Union[str, int]] = None,\n        read_only: Optional[bool] = None,\n        required: Optional[bool] = None,\n        size: Optional[str] = None,\n        value: Optional[list[str]] = None,\n        with_asterisk: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; list[str]:\n        \"\"\"\n        Multiple selection using a group of checkboxes.\n\n        Args:\n            label (str): Group label.\n            options (list[Union[RLOption, str]]): Available options.\n            description (Optional[str]): Helper text under the label.\n            error (Optional[str]): Error message.\n            format_func (Optional[Callable[[Any], str]]): Map option value to label.\n            group_props (Optional[dict[str, Any]]): Extra props for the group container.\n            key (Optional[str]): Explicit element key.\n            on_change (Optional[Callable[[list[str]], None]]): Change handler.\n            radius (Optional[Union[str, int]]): Corner radius.\n            read_only (Optional[bool]): Read-only state.\n            required (Optional[bool]): Mark as required.\n            size (Optional[str]): Control size.\n            value (Optional[list[str]]): Selected values.\n            with_asterisk (Optional[bool]): Show required asterisk.\n            kwargs: Additional props to set.\n\n        Returns:\n            list[str]: Selected values.\n        \"\"\"\n        return self._x_checkbox_group(\n            \"checkboxgroup\",\n            key or self._new_widget_id(\"checkbox-group\", label),\n            description=description,\n            error=error,\n            format_func=format_func,\n            groupProps=group_props,\n            label=label,\n            on_change=on_change,\n            options=options,  # type: ignore[arg-type]\n            radius=radius,\n            readOnly=read_only,\n            required=required,\n            size=size,\n            value=value,\n            withAsterisk=with_asterisk,\n            **kwargs,\n        )\n\n    def chip_group(\n        self,\n        key: str,\n        options: list[Union[RLOption, str]],\n        *,\n        format_func: Optional[Callable[[Any], str]] = None,\n        group_props: Optional[dict[str, Any]] = None,\n        multiple: bool = False,\n        on_change: Optional[Callable[[Union[str, list[str]]], None]] = None,\n        value: Optional[Union[str, list[str]]] = None,\n        **kwargs: Any,\n    ) -&gt; Union[str, list[str]]:\n        \"\"\"\n        Single or multiple selection using chip components.\n\n        Args:\n            key (str): Explicit element key.\n            options (list[Union[RLOption, str]]): Available options.\n            format_func (Optional[Callable[[Any], str]]): Map option value to label.\n            group_props (Optional[dict[str, Any]]): Extra props for the group container.\n            multiple (bool): Enable multiple selection.\n            on_change (Optional[Callable[[Union[str, list[str]]], None]]): Change handler.\n            value (Optional[Union[str, list[str]]]): Selected value(s).\n            kwargs: Additional props to set.\n\n        Returns:\n            Union[str, list[str]]: Selected value(s).\n        \"\"\"\n        if multiple:\n            return self._x_checkbox_group(\n                \"chipgroup\",\n                key,\n                format_func=format_func,\n                groupProps=group_props,\n                multiple=True,\n                on_change=on_change,\n                options=options,  # type: ignore[arg-type]\n                value=value,  # type: ignore[arg-type]\n                **kwargs,\n            )\n        return self._x_radio_select(  # type: ignore[no-any-return]\n            \"chipgroup\",\n            key,\n            format_func=format_func,\n            groupProps=group_props,\n            multiple=False,\n            on_change=on_change,\n            options=options,  # type: ignore[arg-type]\n            value=value,\n            **kwargs,\n        )\n\n    def chip(\n        self,\n        label: str,\n        *,\n        auto_contrast: Optional[bool] = None,\n        checked: bool = False,\n        color: Optional[str] = None,\n        disabled: Optional[bool] = None,\n        icon: Optional[RouteLitElement] = None,\n        input_type: Optional[Literal[\"checkbox\", \"radio\"]] = None,\n        key: Optional[str] = None,\n        on_change: Optional[Callable[[bool], None]] = None,\n        radius: Optional[Union[Literal[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"], int]] = None,\n        size: Optional[Literal[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]] = None,\n        **kwargs: Any,\n    ) -&gt; bool:\n        \"\"\"\n        Toggleable chip, can behave as checkbox or radio.\n\n        Args:\n            label (str): Chip label.\n            auto_contrast (Optional[bool]): Improve contrast automatically.\n            checked (bool): Initial checked state.\n            color (Optional[str]): Accent color.\n            disabled (Optional[bool]): Disable interaction.\n            icon (Optional[RouteLitElement]): Left section icon.\n            input_type (Optional[Literal[\"checkbox\", \"radio\"]]): Behavior of the chip.\n            key (Optional[str]): Explicit element key.\n            on_change (Optional[Callable[[bool], None]]): Change handler.\n            radius (Optional[Union[Literal[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"], int]]): Corner radius.\n            size (Optional[Literal[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]]): Control size.\n            kwargs: Additional props to set.\n\n        Returns:\n            bool: Current value.\n        \"\"\"\n        return self._x_checkbox(\n            \"chip\",\n            key or self._new_widget_id(\"chip\", label),\n            autoContrast=auto_contrast,\n            checked=checked,\n            children=label,\n            color=color,\n            disabled=disabled,\n            icon=icon,\n            on_change=on_change,\n            radius=radius,\n            size=size,\n            type=input_type,\n            **kwargs,\n        )\n\n    def color_input(\n        self,\n        label: str,\n        *,\n        description: Optional[str] = None,\n        disabled: Optional[bool] = None,\n        error: Optional[str] = None,\n        fix_on_blur: Optional[bool] = None,\n        input_size: Optional[str] = None,\n        key: Optional[str] = None,\n        on_change: Optional[Callable[[str], None]] = None,\n        radius: Optional[str] = None,\n        required: Optional[bool] = None,\n        size: Optional[str] = None,\n        swatches: Optional[list[str]] = None,\n        value: Optional[str] = None,\n        with_asterisk: Optional[bool] = None,\n        with_picker: Optional[bool] = None,\n        with_preview: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; str:\n        \"\"\"\n        Text input specialized for color values with a color picker.\n\n        Args:\n            label (str): Field label.\n            description (Optional[str]): Helper text under the label.\n            disabled (Optional[bool]): Disable input interaction.\n            error (Optional[str]): Error message.\n            fix_on_blur (Optional[bool]): Normalize value on blur.\n            input_size (Optional[str]): Control size.\n            key (Optional[str]): Explicit element key.\n            on_change (Optional[Callable[[str], None]]): Change handler.\n            radius (Optional[str]): Corner radius.\n            required (Optional[bool]): Mark as required.\n            size (Optional[str]): Control size.\n            swatches (Optional[list[str]]): Preset color swatches.\n            value (Optional[str]): Current value.\n            with_asterisk (Optional[bool]): Show required asterisk.\n            with_picker (Optional[bool]): Show color picker.\n            with_preview (Optional[bool]): Show color preview chip.\n            kwargs: Additional props to set.\n\n        Returns:\n            str: Current value.\n        \"\"\"\n        return self._x_input(  # type: ignore[return-value]\n            \"colorinput\",\n            key or self._new_widget_id(\"colorinput\", label),\n            description=description,\n            disabled=disabled,\n            error=error,\n            fixOnBlur=fix_on_blur,\n            inputSize=input_size,\n            label=label,\n            on_change=on_change,\n            radius=radius,\n            required=required,\n            size=size,\n            swatches=swatches,\n            value=value,\n            withAsterisk=with_asterisk,\n            withPicker=with_picker,\n            withPreview=with_preview,\n            **kwargs,\n        )\n\n    def fieldset(\n        self,\n        legend: str,\n        *,\n        disabled: Optional[bool] = None,\n        key: Optional[str] = None,\n        radius: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Group a set of related form fields under a legend.\n\n        Args:\n            legend (str): Legend text.\n            disabled (Optional[bool]): Disable all nested inputs.\n            key (Optional[str]): Explicit element key.\n            radius (Optional[str]): Corner radius.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the fieldset element.\n        \"\"\"\n        element = self._create_element(\n            key=key or self._new_widget_id(\"fieldset\", legend),\n            name=\"fieldset\",\n            props={\n                \"disabled\": disabled,\n                \"legend\": legend,\n                \"radius\": radius,\n                **kwargs,\n            },\n        )\n        return cast(RLBuilder, self._build_nested_builder(element))\n\n    def text_input(\n        self,\n        label: str,\n        *,\n        description: Optional[str] = None,\n        disabled: Optional[bool] = None,\n        error: Optional[str] = None,\n        key: Optional[str] = None,\n        left_section: Optional[RouteLitElement] = None,\n        left_section_props: Optional[dict[str, Any]] = None,\n        left_section_width: Optional[str] = None,\n        on_change: Optional[Callable[[str], None]] = None,\n        required: Optional[bool] = None,\n        right_section: Optional[RouteLitElement] = None,\n        right_section_props: Optional[dict[str, Any]] = None,\n        right_section_width: Optional[str] = None,\n        size: Optional[str] = None,\n        value: Optional[str] = None,\n        with_asterisk: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; str:\n        \"\"\"\n        Single-line text input.\n\n        Args:\n            label (str): Field label.\n            description (Optional[str]): Helper text under the label.\n            disabled (Optional[bool]): Disable input interaction.\n            error (Optional[str]): Error message.\n            key (Optional[str]): Explicit element key.\n            left_section (Optional[RouteLitElement]): Left adornment.\n            left_section_props (Optional[dict[str, Any]]): Left adornment props.\n            left_section_width (Optional[str]): Left adornment width.\n            on_change (Optional[Callable[[str], None]]): Change handler.\n            required (Optional[bool]): Mark as required.\n            right_section (Optional[RouteLitElement]): Right adornment.\n            right_section_props (Optional[dict[str, Any]]): Right adornment props.\n            right_section_width (Optional[str]): Right adornment width.\n            size (Optional[str]): Control size.\n            value (Optional[str]): Current value.\n            with_asterisk (Optional[bool]): Show required asterisk.\n            kwargs: Additional props to set.\n\n        Returns:\n            str: Current value.\n        \"\"\"\n        return cast(\n            str,\n            self._x_input(\n                \"textinput\",\n                key or self._new_widget_id(\"textinput\", label),\n                description=description,\n                disabled=disabled,\n                error=error,\n                label=label,\n                leftSection=left_section,\n                leftSectionProps=left_section_props,\n                leftSectionWidth=left_section_width,\n                on_change=on_change,\n                required=required,\n                rightSection=right_section,\n                rightSectionProps=right_section_props,\n                rightSectionWidth=right_section_width,\n                size=size,\n                value=value,\n                withAsterisk=with_asterisk,\n                **kwargs,\n            ),\n        )\n\n    def native_select(\n        self,\n        label: str,\n        options: list[Union[RLOption, str]],\n        *,\n        description: Optional[str] = None,\n        disabled: Optional[bool] = None,\n        error: Optional[str] = None,\n        format_func: Optional[Callable[[Any], str]] = None,\n        key: Optional[str] = None,\n        left_section: Optional[RouteLitElement] = None,\n        left_section_props: Optional[dict[str, Any]] = None,\n        left_section_width: Optional[str] = None,\n        on_change: Optional[Callable[[str], None]] = None,\n        radius: Optional[str] = None,\n        required: Optional[bool] = None,\n        right_section: Optional[RouteLitElement] = None,\n        right_section_props: Optional[dict[str, Any]] = None,\n        right_section_width: Optional[str] = None,\n        size: Optional[str] = None,\n        value: Optional[str] = None,\n        with_asterisk: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; str:\n        \"\"\"\n        Native HTML select input.\n\n        Args:\n            label (str): Field label.\n            options (list[Union[RLOption, str]]): Available options.\n            description (Optional[str]): Helper text under the label.\n            disabled (Optional[bool]): Disable input interaction.\n            error (Optional[str]): Error message.\n            format_func (Optional[Callable[[Any], str]]): Map option value to label.\n            key (Optional[str]): Explicit element key.\n            left_section (Optional[RouteLitElement]): Left adornment.\n            left_section_props (Optional[dict[str, Any]]): Left adornment props.\n            left_section_width (Optional[str]): Left adornment width.\n            on_change (Optional[Callable[[str], None]]): Change handler.\n            radius (Optional[str]): Corner radius.\n            required (Optional[bool]): Mark as required.\n            right_section (Optional[RouteLitElement]): Right adornment.\n            right_section_props (Optional[dict[str, Any]]): Right adornment props.\n            right_section_width (Optional[str]): Right adornment width.\n            size (Optional[str]): Control size.\n            value (Optional[str]): Current value.\n            with_asterisk (Optional[bool]): Show required asterisk.\n            kwargs: Additional props to set.\n\n        Returns:\n            str: Current value.\n        \"\"\"\n        return cast(\n            str,\n            self._x_radio_select(\n                \"nativeselect\",\n                key or self._new_widget_id(\"native-select\", label),\n                description=description,\n                disabled=disabled,\n                error=error,\n                format_func=format_func,\n                label=label,\n                leftSection=left_section,\n                leftSectionProps=left_section_props,\n                leftSectionWidth=left_section_width,\n                on_change=on_change,\n                options=options,  # type: ignore[arg-type]\n                options_attr=\"data\",\n                radius=radius,\n                required=required,\n                rightSection=right_section,\n                rightSectionProps=right_section_props,\n                rightSectionWidth=right_section_width,\n                size=size,\n                value=value,\n                withAsterisk=with_asterisk,\n                **kwargs,\n            ),\n        )\n\n    def number_input(\n        self,\n        label: str,\n        *,\n        allow_decimal: Optional[bool] = None,\n        allow_leading_zeros: Optional[bool] = None,\n        allow_negative: Optional[bool] = None,\n        allowed_decimal_separators: Optional[list[str]] = None,\n        decimal_scale: Optional[int] = None,\n        decimal_separator: Optional[str] = None,\n        description: Optional[str] = None,\n        disabled: Optional[bool] = None,\n        error: Optional[str] = None,\n        hide_controls: Optional[bool] = None,\n        key: Optional[str] = None,\n        left_section: Optional[RouteLitElement] = None,\n        left_section_props: Optional[dict[str, Any]] = None,\n        left_section_width: Optional[str] = None,\n        max_value: Optional[Union[float, int]] = None,\n        min_value: Optional[Union[float, int]] = None,\n        on_change: Optional[Callable[[Union[float, int]], None]] = None,\n        parser: Callable[[str], Union[float, int]] = float,\n        required: Optional[bool] = None,\n        right_section: Optional[RouteLitElement] = None,\n        right_section_props: Optional[dict[str, Any]] = None,\n        right_section_width: Optional[str] = None,\n        size: Optional[str] = None,\n        step: Optional[Union[float, int]] = None,\n        value: Optional[Union[float, int]] = None,\n        with_asterisk: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; Union[float, int]:\n        \"\"\"\n        Numeric input with formatting and controls.\n\n        Args:\n            label (str): Field label.\n            allow_decimal (Optional[bool]): Allow decimal values.\n            allow_leading_zeros (Optional[bool]): Permit leading zeros.\n            allow_negative (Optional[bool]): Permit negative values.\n            allowed_decimal_separators (Optional[list[str]]): Additional decimal separators.\n            decimal_scale (Optional[int]): Maximum number of decimal places.\n            decimal_separator (Optional[str]): Decimal separator to use.\n            description (Optional[str]): Helper text under the label.\n            disabled (Optional[bool]): Disable input interaction.\n            error (Optional[str]): Error message.\n            hide_controls (Optional[bool]): Hide increment/decrement controls.\n            key (Optional[str]): Explicit element key.\n            left_section (Optional[RouteLitElement]): Left adornment.\n            left_section_props (Optional[dict[str, Any]]): Left adornment props.\n            left_section_width (Optional[str]): Left adornment width.\n            max_value (Optional[Union[float, int]]): Maximum value.\n            min_value (Optional[Union[float, int]]): Minimum value.\n            on_change (Optional[Callable[[Union[float, int]], None]]): Change handler.\n            parser (Callable[[str], Union[float, int]]): Parser for the returned value.\n            required (Optional[bool]): Mark as required.\n            right_section (Optional[RouteLitElement]): Right adornment.\n            right_section_props (Optional[dict[str, Any]]): Right adornment props.\n            right_section_width (Optional[str]): Right adornment width.\n            size (Optional[str]): Control size.\n            step (Optional[Union[float, int]]): Step of increment/decrement.\n            value (Optional[Union[float, int]]): Current value.\n            with_asterisk (Optional[bool]): Show required asterisk.\n            kwargs: Additional props to set.\n\n        Returns:\n            Union[float, int]: Current value parsed by the provided parser.\n        \"\"\"\n        return parser(\n            cast(\n                str,\n                self._x_input(\n                    \"numberinput\",\n                    key or self._new_widget_id(\"numberinput\", label),\n                    allowDecimal=allow_decimal,\n                    allowLeadingZeros=allow_leading_zeros,\n                    allowNegative=allow_negative,\n                    allowedDecimalSeparators=allowed_decimal_separators,\n                    decimalScale=decimal_scale,\n                    decimalSeparator=decimal_separator,\n                    description=description,\n                    disabled=disabled,\n                    error=error,\n                    hideControls=hide_controls,\n                    label=label,\n                    leftSection=left_section,\n                    leftSectionProps=left_section_props,\n                    leftSectionWidth=left_section_width,\n                    max=max_value,\n                    min=min_value,\n                    on_change=on_change,\n                    required=required,\n                    rightSection=right_section,\n                    rightSectionProps=right_section_props,\n                    rightSectionWidth=right_section_width,\n                    size=size,\n                    step=step,\n                    value=value,\n                    withAsterisk=with_asterisk,\n                    **kwargs,\n                ),\n            )\n        )\n\n    def password_input(\n        self,\n        label: str,\n        *,\n        description: Optional[str] = None,\n        disabled: Optional[bool] = None,\n        error: Optional[str] = None,\n        input_size: Optional[str] = None,\n        key: Optional[str] = None,\n        on_change: Optional[Callable[[str], None]] = None,\n        radius: Optional[str] = None,\n        required: Optional[bool] = None,\n        size: Optional[str] = None,\n        value: Optional[str] = None,\n        visible: Optional[bool] = None,\n        with_asterisk: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; Optional[str]:\n        \"\"\"\n        Password input with visibility toggle.\n\n        Args:\n            label (str): Field label.\n            description (Optional[str]): Helper text under the label.\n            disabled (Optional[bool]): Disable input interaction.\n            error (Optional[str]): Error message.\n            input_size (Optional[str]): Control size.\n            key (Optional[str]): Explicit element key.\n            on_change (Optional[Callable[[str], None]]): Change handler.\n            radius (Optional[str]): Corner radius.\n            required (Optional[bool]): Mark as required.\n            size (Optional[str]): Control size.\n            value (Optional[str]): Current value.\n            visible (Optional[bool]): Force visibility of the password.\n            with_asterisk (Optional[bool]): Show required asterisk.\n            kwargs: Additional props to set.\n\n        Returns:\n            Optional[str]: Current value.\n        \"\"\"\n        return self._x_input(\n            \"passwordinput\",\n            key or self._new_widget_id(\"passwordinput\", label),\n            description=description,\n            disabled=disabled,\n            error=error,\n            inputSize=input_size,\n            label=label,\n            on_change=on_change,\n            radius=radius,\n            required=required,\n            size=size,\n            value=value,\n            visible=visible,\n            withAsterisk=with_asterisk,\n            **kwargs,\n        )\n\n    def radio_group(\n        self,\n        label: str,\n        options: list[Union[RLOption, str]],\n        *,\n        description: Optional[str] = None,\n        disabled: Optional[bool] = None,\n        error: Optional[str] = None,\n        format_func: Optional[Callable[[Any], str]] = None,\n        group_props: Optional[dict[str, Any]] = None,\n        input_size: Optional[str] = None,\n        key: Optional[str] = None,\n        on_change: Optional[Callable[[str], None]] = None,\n        read_only: Optional[bool] = None,\n        required: Optional[bool] = None,\n        size: Optional[str] = None,\n        value: Optional[str] = None,\n        with_asterisk: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; Optional[str]:\n        \"\"\"\n        Single selection using radio inputs.\n\n        Args:\n            label (str): Group label.\n            options (list[Union[RLOption, str]]): Available options.\n            description (Optional[str]): Helper text under the label.\n            disabled (Optional[bool]): Disable interaction.\n            error (Optional[str]): Error message.\n            format_func (Optional[Callable[[Any], str]]): Map option value to label.\n            group_props (Optional[dict[str, Any]]): Extra props for the group container.\n            input_size (Optional[str]): Control size.\n            key (Optional[str]): Explicit element key.\n            on_change (Optional[Callable[[str], None]]): Change handler.\n            read_only (Optional[bool]): Read-only state.\n            required (Optional[bool]): Mark as required.\n            size (Optional[str]): Control size.\n            value (Optional[str]): Selected value.\n            with_asterisk (Optional[bool]): Show required asterisk.\n            kwargs: Additional props to set.\n\n        Returns:\n            Optional[str]: Selected value.\n        \"\"\"\n        return cast(\n            Optional[str],\n            self._x_radio_select(\n                \"radiogroup\",\n                key or self._new_widget_id(\"radio-group\", label),\n                description=description,\n                disabled=disabled,\n                error=error,\n                format_func=format_func,\n                group_props=group_props,\n                inputSize=input_size,\n                label=label,\n                on_change=on_change,\n                options=options,  # type: ignore[arg-type]\n                readOnly=read_only,\n                required=required,\n                size=size,\n                value=value,\n                withAsterisk=with_asterisk,\n                **kwargs,\n            ),\n        )\n\n    def range_slider(\n        self,\n        label: str,\n        *,\n        color: Optional[str] = None,\n        disabled: Optional[bool] = None,\n        inverted: Optional[bool] = None,\n        key: Optional[str] = None,\n        label_always_on: Optional[bool] = None,\n        marks: Optional[list[RLOption]] = None,\n        max_range: Optional[float] = None,\n        max_value: Optional[float] = None,\n        min_value: Optional[float] = None,\n        on_change: Optional[Callable[[tuple[float, float]], None]] = None,\n        precision: Optional[int] = None,\n        step: Optional[float] = None,\n        value: Optional[tuple[float, float]] = None,\n        **kwargs: Any,\n    ) -&gt; tuple[float, float]:\n        \"\"\"\n        Slider that allows selecting a numeric range.\n\n        Args:\n            label (str): Field label.\n            color (Optional[str]): Accent color.\n            disabled (Optional[bool]): Disable interaction.\n            inverted (Optional[bool]): Invert direction.\n            key (Optional[str]): Explicit element key.\n            label_always_on (Optional[bool]): Always show labels above thumbs.\n            marks (Optional[list[RLOption]]): Marks along the slider.\n            max_range (Optional[float]): Max distance between thumbs.\n            max_value (Optional[float]): Maximum value.\n            min_value (Optional[float]): Minimum value.\n            on_change (Optional[Callable[[tuple[float, float]], None]]): Change handler.\n            precision (Optional[int]): Decimal precision.\n            step (Optional[float]): Step size.\n            value (Optional[tuple[float, float]]): Current value.\n            kwargs: Additional props to set.\n\n        Returns:\n            tuple[float, float]: Current range values.\n        \"\"\"\n        return cast(\n            tuple[float, float],\n            self._x_input(\n                \"rangeslider\",\n                key or self._new_widget_id(\"rangeslider\", label),\n                color=color,\n                disabled=disabled,\n                inverted=inverted,\n                label=label,\n                labelAlwaysOn=label_always_on,\n                marks=marks,\n                max=max_value,\n                maxRange=max_range,\n                min=min_value,\n                on_change=on_change,\n                precision=precision,\n                step=step,\n                value=value,\n                **kwargs,\n            ),\n        )\n\n    def rating(\n        self,\n        key: str,\n        *,\n        color: Optional[str] = None,\n        count: Optional[int] = None,\n        fractions: Optional[int] = None,\n        on_change: Optional[Callable[[int], None]] = None,\n        read_only: Optional[bool] = None,\n        size: Optional[str] = None,\n        parser: Callable[[Any], Union[float, int]] = float,\n        value: Optional[int] = None,\n        **kwargs: Any,\n    ) -&gt; float:\n        \"\"\"\n        Star (or icon) rating input.\n\n        Args:\n            key (str): Explicit element key.\n            color (Optional[str]): Accent color.\n            count (Optional[int]): Number of icons.\n            fractions (Optional[int]): Fractional steps per icon.\n            on_change (Optional[Callable[[int], None]]): Change handler.\n            read_only (Optional[bool]): Read-only state.\n            size (Optional[str]): Control size.\n            parser (Callable[[Any], Union[float, int]]): Parser for the returned value.\n            value (Optional[int]): Current value.\n            kwargs: Additional props to set.\n\n        Returns:\n            float: Current value parsed by the provided parser.\n        \"\"\"\n        return parser(\n            self._x_input(\n                \"rating\",\n                key,\n                color=color,\n                count=count,\n                fractions=fractions,\n                on_change=on_change,\n                readOnly=read_only,\n                size=size,\n                value=value,\n                **kwargs,\n            )\n        )\n\n    def segmented_control(\n        self,\n        key: str,\n        options: list[Union[RLOption, str]],\n        *,\n        auto_contrast: Optional[bool] = None,\n        color: Optional[str] = None,\n        disabled: Optional[bool] = None,\n        format_func: Optional[Callable[[Any], str]] = None,\n        full_width: Optional[bool] = None,\n        on_change: Optional[Callable[[str], None]] = None,\n        orientation: Optional[Literal[\"horizontal\", \"vertical\"]] = None,\n        radius: Optional[str] = None,\n        read_only: Optional[bool] = None,\n        size: Optional[str] = None,\n        transition_duration: Optional[int] = None,\n        value: Optional[str] = None,\n        with_items_borders: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; str:\n        \"\"\"\n        Segmented control for single selection among options.\n\n        Args:\n            key (str): Explicit element key.\n            options (list[Union[RLOption, str]]): Available options.\n            auto_contrast (Optional[bool]): Improve contrast automatically.\n            color (Optional[str]): Accent color.\n            disabled (Optional[bool]): Disable interaction.\n            format_func (Optional[Callable[[Any], str]]): Map option value to label.\n            full_width (Optional[bool]): Make control take full width.\n            on_change (Optional[Callable[[str], None]]): Change handler.\n            orientation (Optional[Literal[\"horizontal\", \"vertical\"]]): Orientation.\n            radius (Optional[str]): Corner radius.\n            read_only (Optional[bool]): Read-only state.\n            size (Optional[str]): Control size.\n            transition_duration (Optional[int]): Selection animation duration.\n            value (Optional[str]): Selected value.\n            with_items_borders (Optional[bool]): Show borders between items.\n            kwargs: Additional props to set.\n\n        Returns:\n            str: Selected value.\n        \"\"\"\n        value = self._x_radio_select(\n            \"segmentedcontrol\",\n            key,\n            autoContrast=auto_contrast,\n            color=color,\n            disabled=disabled,\n            format_func=format_func,\n            fullWidth=full_width,\n            on_change=on_change,\n            options=options,  # type: ignore[arg-type]\n            options_attr=\"data\",\n            orientation=orientation,\n            radius=radius,\n            readOnly=read_only,\n            size=size,\n            transitionDuration=transition_duration,\n            value=value,\n            withItemsBorders=with_items_borders,\n            **kwargs,\n        )\n        if value is None and options and len(options) &gt; 0:\n            return options[0][\"value\"] if isinstance(options[0], dict) else options[0]\n        return value\n\n    def slider(\n        self,\n        label: str,\n        *,\n        disabled: Optional[bool] = None,\n        inverted: Optional[bool] = None,\n        key: Optional[str] = None,\n        label_always_on: Optional[bool] = None,\n        marks: Optional[list[RLOption]] = None,\n        max_value: Optional[float] = None,\n        min_value: Optional[float] = None,\n        on_change: Optional[Callable[[float], None]] = None,\n        precision: Optional[int] = None,\n        restrict_to_marks: Optional[bool] = None,\n        show_label_on_hover: Optional[bool] = None,\n        size: Optional[str] = None,\n        step: Optional[float] = None,\n        parser: Callable[[Any], Union[float, int]] = float,\n        thumb_label: Optional[str] = None,\n        thumb_size: Optional[str] = None,\n        value: Optional[float] = None,\n        **kwargs: Any,\n    ) -&gt; Union[float, int]:\n        \"\"\"\n        Single-value slider input.\n\n        Args:\n            label (str): Field label.\n            disabled (Optional[bool]): Disable interaction.\n            inverted (Optional[bool]): Invert direction.\n            key (Optional[str]): Explicit element key.\n            label_always_on (Optional[bool]): Always show label above thumb.\n            marks (Optional[list[RLOption]]): Marks along the slider.\n            max_value (Optional[float]): Maximum value.\n            min_value (Optional[float]): Minimum value.\n            on_change (Optional[Callable[[float], None]]): Change handler.\n            precision (Optional[int]): Decimal precision.\n            restrict_to_marks (Optional[bool]): Only allow values at marks.\n            show_label_on_hover (Optional[bool]): Show label when hovering.\n            size (Optional[str]): Control size.\n            step (Optional[float]): Step size.\n            parser (Callable[[Any], Union[float, int]]): Parser for the returned value.\n            thumb_label (Optional[str]): Label template for thumb.\n            thumb_size (Optional[str]): Thumb size.\n            value (Optional[float]): Current value.\n            kwargs: Additional props to set.\n\n        Returns:\n            Union[float, int]: Current value parsed by the provided parser.\n        \"\"\"\n        return parser(\n            self._x_input(\n                \"slider\",\n                key or self._new_widget_id(\"slider\", label),\n                disabled=disabled,\n                inverted=inverted,\n                label=label,\n                labelAlwaysOn=label_always_on,\n                marks=marks,\n                max=max_value,\n                min=min_value,\n                on_change=on_change,\n                precision=precision,\n                restrictToMarks=restrict_to_marks,\n                showLabelOnHover=show_label_on_hover,\n                size=size,\n                step=step,\n                thumbLabel=thumb_label,\n                thumbSize=thumb_size,\n                value=value,\n                **kwargs,\n            )\n        )\n\n    def switch(\n        self,\n        label: str,\n        *,\n        checked: bool = False,\n        color: Optional[str] = None,\n        description: Optional[str] = None,\n        disabled: Optional[bool] = None,\n        error: Optional[str] = None,\n        key: Optional[str] = None,\n        label_position: Optional[Literal[\"left\", \"right\"]] = None,\n        on_change: Optional[Callable[[bool], None]] = None,\n        radius: Optional[str] = None,\n        size: Optional[str] = None,\n        thumb_icon: Optional[RouteLitElement] = None,\n        with_thumb_indicator: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; bool:\n        \"\"\"\n        Boolean input rendered as a switch.\n\n        Args:\n            label (str): Field label.\n            checked (bool): Initial checked state.\n            color (Optional[str]): Accent color.\n            description (Optional[str]): Helper text under the label.\n            disabled (Optional[bool]): Disable interaction.\n            error (Optional[str]): Error message.\n            key (Optional[str]): Explicit element key.\n            label_position (Optional[Literal[\"left\", \"right\"]]): Label position.\n            on_change (Optional[Callable[[bool], None]]): Change handler.\n            radius (Optional[str]): Corner radius.\n            size (Optional[str]): Control size.\n            thumb_icon (Optional[RouteLitElement]): Icon inside the thumb.\n            with_thumb_indicator (Optional[bool]): Show indicator inside the thumb.\n            kwargs: Additional props to set.\n\n        Returns:\n            bool: Current value.\n        \"\"\"\n        return self._x_checkbox(\n            \"switch\",\n            key or self._new_widget_id(\"switch\", label),\n            checked=checked,\n            color=color,\n            description=description,\n            disabled=disabled,\n            error=error,\n            label=label,\n            labelPosition=label_position,\n            on_change=on_change,\n            radius=radius,\n            size=size,\n            thumbIcon=thumb_icon,\n            withThumbIndicator=with_thumb_indicator,\n            **kwargs,\n        )\n\n    def switch_group(\n        self,\n        label: str,\n        options: list[Union[RLOption, str]],\n        *,\n        description: Optional[str] = None,\n        error: Optional[str] = None,\n        format_func: Optional[Callable[[Any], str]] = None,\n        group_props: Optional[dict[str, Any]] = None,\n        key: Optional[str] = None,\n        on_change: Optional[Callable[[list[str]], None]] = None,\n        read_only: Optional[bool] = None,\n        required: Optional[bool] = None,\n        size: Optional[str] = None,\n        value: Optional[list[str]] = None,\n        with_asterisk: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; list[str]:\n        \"\"\"\n        Multiple selection using a group of switches.\n\n        Args:\n            label (str): Group label.\n            options (list[Union[RLOption, str]]): Available options.\n            description (Optional[str]): Helper text under the label.\n            error (Optional[str]): Error message.\n            format_func (Optional[Callable[[Any], str]]): Map option value to label.\n            group_props (Optional[dict[str, Any]]): Extra props for the group container.\n            key (Optional[str]): Explicit element key.\n            on_change (Optional[Callable[[list[str]], None]]): Change handler.\n            read_only (Optional[bool]): Read-only state.\n            required (Optional[bool]): Mark as required.\n            size (Optional[str]): Control size.\n            value (Optional[list[str]]): Selected values.\n            with_asterisk (Optional[bool]): Show required asterisk.\n            kwargs: Additional props to set.\n\n        Returns:\n            list[str]: Selected values.\n        \"\"\"\n        return self._x_checkbox_group(\n            \"switchgroup\",\n            key or self._new_widget_id(\"switch-group\", label),\n            description=description,\n            error=error,\n            format_func=format_func,\n            groupProps=group_props,\n            label=label,\n            on_change=on_change,\n            options=options,  # type: ignore[arg-type]\n            readOnly=read_only,\n            required=required,\n            size=size,\n            value=value,\n            withAsterisk=with_asterisk,\n            **kwargs,\n        )\n\n    def textarea(\n        self,\n        label: str,\n        *,\n        autosize: Optional[bool] = None,\n        description: Optional[str] = None,\n        disabled: Optional[bool] = None,\n        error: Optional[str] = None,\n        input_size: Optional[str] = None,\n        key: Optional[str] = None,\n        max_rows: Optional[int] = None,\n        min_rows: Optional[int] = None,\n        on_change: Optional[Callable[[str], None]] = None,\n        radius: Optional[Union[str, int]] = None,\n        required: Optional[bool] = None,\n        resize: Optional[str] = None,\n        value: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; Optional[str]:\n        \"\"\"\n        Multi-line text input.\n\n        Args:\n            label (str): Field label.\n            autosize (Optional[bool]): Grow/shrink to fit content.\n            description (Optional[str]): Helper text under the label.\n            disabled (Optional[bool]): Disable interaction.\n            error (Optional[str]): Error message.\n            input_size (Optional[str]): Control size.\n            key (Optional[str]): Explicit element key.\n            max_rows (Optional[int]): Maximum number of rows when autosizing.\n            min_rows (Optional[int]): Minimum number of rows when autosizing.\n            on_change (Optional[Callable[[str], None]]): Change handler.\n            radius (Optional[Union[str, int]]): Corner radius.\n            required (Optional[bool]): Mark as required.\n            resize (Optional[str]): CSS resize behavior.\n            value (Optional[str]): Current value.\n            kwargs: Additional props to set.\n\n        Returns:\n            Optional[str]: Current value.\n        \"\"\"\n        return self._x_input(\n            \"textarea\",\n            key or self._new_widget_id(\"textarea\", label),\n            autosize=autosize,\n            description=description,\n            disabled=disabled,\n            error=error,\n            inputSize=input_size,\n            label=label,\n            maxRows=max_rows,\n            minRows=min_rows,\n            on_change=on_change,\n            radius=radius,\n            required=required,\n            resize=resize,\n            value=value,\n            **kwargs,\n        )\n\n    def autocomplete(\n        self,\n        label: str,\n        data: list[Union[str, GroupOption]],\n        *,\n        auto_select_on_blur: Optional[bool] = None,\n        clear_button_props: Optional[dict[str, Any]] = None,\n        clearable: Optional[bool] = None,\n        combobox_props: Optional[dict[str, Any]] = None,\n        default_drowndown_open: Optional[bool] = None,\n        description: Optional[str] = None,\n        disabled: Optional[bool] = None,\n        dropdown_opened: Optional[bool] = None,\n        error: Optional[str] = None,\n        key: Optional[str] = None,\n        left_section: Optional[RouteLitElement] = None,\n        left_section_props: Optional[dict[str, Any]] = None,\n        left_section_width: Optional[str] = None,\n        limit: Optional[int] = None,\n        on_change: Optional[Callable[[str], None]] = None,\n        radius: Optional[Union[str, int]] = None,\n        required: Optional[bool] = None,\n        right_section: Optional[RouteLitElement] = None,\n        right_section_props: Optional[dict[str, Any]] = None,\n        right_section_width: Optional[str] = None,\n        size: Optional[str] = None,\n        value: Optional[str] = None,\n        with_asterisk: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; Optional[str]:\n        \"\"\"\n        Autocomplete text input with suggestions dropdown.\n\n        Args:\n            label (str): Field label.\n            data (list[Union[str, GroupOption]]): Options and groups.\n            auto_select_on_blur (Optional[bool]): Auto select highlighted option on blur.\n            clear_button_props (Optional[dict[str, Any]]): Props for clear button.\n            clearable (Optional[bool]): Enable clear button.\n            combobox_props (Optional[dict[str, Any]]): Props for combobox.\n            default_drowndown_open (Optional[bool]): Open dropdown by default.\n            description (Optional[str]): Helper text under the label.\n            disabled (Optional[bool]): Disable interaction.\n            dropdown_opened (Optional[bool]): Control dropdown visibility.\n            error (Optional[str]): Error message.\n            key (Optional[str]): Explicit element key.\n            left_section (Optional[RouteLitElement]): Left adornment.\n            left_section_props (Optional[dict[str, Any]]): Left adornment props.\n            left_section_width (Optional[str]): Left adornment width.\n            limit (Optional[int]): Max number of options shown.\n            on_change (Optional[Callable[[str], None]]): Change handler.\n            radius (Optional[Union[str, int]]): Corner radius.\n            required (Optional[bool]): Mark as required.\n            right_section (Optional[RouteLitElement]): Right adornment.\n            right_section_props (Optional[dict[str, Any]]): Right adornment props.\n            right_section_width (Optional[str]): Right adornment width.\n            size (Optional[str]): Control size.\n            value (Optional[str]): Current value.\n            with_asterisk (Optional[bool]): Show required asterisk.\n            kwargs: Additional props to set.\n\n        Returns:\n            Optional[str]: Current value.\n        \"\"\"\n        return self._x_input(\n            \"autocomplete\",\n            key or self._new_widget_id(\"autocomplete\", label),\n            autoSelectOnBlur=auto_select_on_blur,\n            clearButtonProps=clear_button_props,\n            clearable=clearable,\n            comboboxProps=combobox_props,\n            data=data,\n            defaultDropdownOpen=default_drowndown_open,\n            description=description,\n            disabled=disabled,\n            dropdownOpened=dropdown_opened,\n            error=error,\n            label=label,\n            leftSection=left_section,\n            leftSectionProps=left_section_props,\n            leftSectionWidth=left_section_width,\n            limit=limit,\n            on_change=on_change,\n            radius=radius,\n            required=required,\n            rightSection=right_section,\n            rightSectionProps=right_section_props,\n            rightSectionWidth=right_section_width,\n            size=size,\n            value=value,\n            withAsterisk=with_asterisk,\n            **kwargs,\n        )\n\n    def multiselect(\n        self,\n        label: str,\n        data: list[Union[RLOption, str]],\n        *,\n        check_icon_position: Optional[Literal[\"left\", \"right\"]] = None,\n        chevron_color: Optional[str] = None,\n        clear_button_props: Optional[dict[str, Any]] = None,\n        clearable: Optional[bool] = None,\n        combobox_props: Optional[dict[str, Any]] = None,\n        default_dropdown_opened: Optional[bool] = None,\n        default_search_value: Optional[str] = None,\n        description: Optional[str] = None,\n        disabled: Optional[bool] = None,\n        dropdown_opened: Optional[bool] = None,\n        error: Optional[str] = None,\n        error_props: Optional[dict[str, Any]] = None,\n        format_func: Optional[Callable[[Any], str]] = None,\n        hidden_input_props: Optional[dict[str, Any]] = None,\n        hidden_input_values_divider: Optional[str] = None,\n        hide_picked_options: Optional[bool] = None,\n        input_size: Optional[str] = None,\n        input_wrapper_order: Optional[list[str]] = None,\n        key: Optional[str] = None,\n        label_props: Optional[dict[str, Any]] = None,\n        left_section: Optional[RouteLitElement] = None,\n        left_section_props: Optional[dict[str, Any]] = None,\n        left_section_width: Optional[str] = None,\n        limit: Optional[int] = None,\n        max_dropdown_height: Optional[Union[str, int]] = None,\n        max_values: Optional[int] = None,\n        nothing_found_message: Optional[str] = None,\n        on_change: Optional[Callable[[list[str]], None]] = None,\n        radius: Optional[Union[str, int]] = None,\n        required: Optional[bool] = None,\n        right_section: Optional[RouteLitElement] = None,\n        right_section_props: Optional[dict[str, Any]] = None,\n        right_section_width: Optional[str] = None,\n        scroll_area_props: Optional[dict[str, Any]] = None,\n        search_value: Optional[str] = None,\n        searchable: Optional[bool] = None,\n        select_first_option_on_change: Optional[bool] = None,\n        size: Optional[str] = None,\n        value: Optional[list[str]] = None,\n        with_asterisk: Optional[bool] = None,\n        with_check_icon: Optional[bool] = None,\n        with_error_styles: Optional[bool] = None,\n        with_scroll_area: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; list[str]:\n        \"\"\"\n        Multi-select input with search and tags.\n\n        Args:\n            label (str): Field label.\n            data (list[Union[RLOption, str]]): Available options.\n            check_icon_position (Optional[Literal[\"left\", \"right\"]]): Check icon position.\n            chevron_color (Optional[str]): Chevron color.\n            clear_button_props (Optional[dict[str, Any]]): Clear button props.\n            clearable (Optional[bool]): Enable clear button.\n            combobox_props (Optional[dict[str, Any]]): Combobox props.\n            default_dropdown_opened (Optional[bool]): Open dropdown by default.\n            default_search_value (Optional[str]): Initial search value.\n            description (Optional[str]): Helper text under the label.\n            disabled (Optional[bool]): Disable interaction.\n            dropdown_opened (Optional[bool]): Control dropdown visibility.\n            error (Optional[str]): Error message.\n            error_props (Optional[dict[str, Any]]): Error message props.\n            format_func (Optional[Callable[[Any], str]]): Map option value to label.\n            hidden_input_props (Optional[dict[str, Any]]): Hidden input props.\n            hidden_input_values_divider (Optional[str]): Divider for hidden input.\n            hide_picked_options (Optional[bool]): Hide already selected options.\n            input_size (Optional[str]): Control size.\n            input_wrapper_order (Optional[list[str]]): Order of input wrapper parts.\n            key (Optional[str]): Explicit element key.\n            label_props (Optional[dict[str, Any]]): Label props.\n            left_section (Optional[RouteLitElement]): Left adornment.\n            left_section_props (Optional[dict[str, Any]]): Left adornment props.\n            left_section_width (Optional[str]): Left adornment width.\n            limit (Optional[int]): Max number of options shown.\n            max_dropdown_height (Optional[Union[str, int]]): Max dropdown height.\n            max_values (Optional[int]): Max number of selected values.\n            nothing_found_message (Optional[str]): Message when search returns no results.\n            on_change (Optional[Callable[[list[str]], None]]): Change handler.\n            radius (Optional[Union[str, int]]): Corner radius.\n            required (Optional[bool]): Mark as required.\n            right_section (Optional[RouteLitElement]): Right adornment.\n            right_section_props (Optional[dict[str, Any]]): Right adornment props.\n            right_section_width (Optional[str]): Right adornment width.\n            scroll_area_props (Optional[dict[str, Any]]): Scroll area props.\n            search_value (Optional[str]): Current search value.\n            searchable (Optional[bool]): Enable search.\n            select_first_option_on_change (Optional[bool]): Auto select first option when changed.\n            size (Optional[str]): Control size.\n            value (Optional[list[str]]): Current value.\n            with_asterisk (Optional[bool]): Show required asterisk.\n            with_check_icon (Optional[bool]): Show check icon next to selected options.\n            with_error_styles (Optional[bool]): Apply error styles.\n            with_scroll_area (Optional[bool]): Wrap dropdown with scroll area.\n            kwargs: Additional props to set.\n\n        Returns:\n            list[str]: Selected values.\n        \"\"\"\n        return self._x_checkbox_group(\n            \"multiselect\",\n            key or self._new_widget_id(\"multiselect\", label),\n            checkIconPosition=check_icon_position,\n            chevronColor=chevron_color,\n            clearButtonProps=clear_button_props,\n            clearable=clearable,\n            comboboxProps=combobox_props,\n            defaultDropdownOpened=default_dropdown_opened,\n            defaultSearchValue=default_search_value,\n            description=description,\n            disabled=disabled,\n            dropdownOpened=dropdown_opened,\n            error=error,\n            errorProps=error_props,\n            format_func=format_func,\n            hiddenInputProps=hidden_input_props,\n            hiddenInputValuesDivider=hidden_input_values_divider,\n            hidePickedOptions=hide_picked_options,\n            inputSize=input_size,\n            inputWrapperOrder=input_wrapper_order,\n            label=label,\n            labelProps=label_props,\n            leftSection=left_section,\n            leftSectionProps=left_section_props,\n            leftSectionWidth=left_section_width,\n            limit=limit,\n            maxDropdownHeight=max_dropdown_height,\n            maxValues=max_values,\n            nothingFoundMessage=nothing_found_message,\n            on_change=on_change,\n            options=data,  # type: ignore[arg-type]\n            options_attr=\"data\",\n            radius=radius,\n            required=required,\n            scrollAreaProps=scroll_area_props,\n            rightSection=right_section,\n            rightSectionProps=right_section_props,\n            rightSectionWidth=right_section_width,\n            searchValue=search_value,\n            searchable=searchable,\n            selectFirstOptionOnChange=select_first_option_on_change,\n            size=size,\n            value=value,\n            withAsterisk=with_asterisk,\n            withCheckIcon=with_check_icon,\n            withErrorStyles=with_error_styles,\n            withScrollArea=with_scroll_area,\n            **kwargs,\n        )\n\n    def select(  # type: ignore[override]\n        self,\n        label: str,\n        options: list[Union[RLOption, str]],\n        *,\n        allow_deselect: Optional[bool] = None,\n        auto_select_on_blur: Optional[bool] = None,\n        check_icon_position: Optional[Literal[\"left\", \"right\"]] = None,\n        chevron_color: Optional[str] = None,\n        clearable: Optional[bool] = None,\n        combobox_props: Optional[dict[str, Any]] = None,\n        default_dropdown_opened: Optional[bool] = None,\n        default_search_value: Optional[str] = None,\n        description: Optional[str] = None,\n        error: Optional[str] = None,\n        format_func: Optional[Callable[[Any], str]] = None,\n        hidden_input_props: Optional[dict[str, Any]] = None,\n        input_size: Optional[str] = None,\n        input_wrapper_order: Optional[list[str]] = None,\n        key: Optional[str] = None,\n        label_props: Optional[dict[str, Any]] = None,\n        left_section: Optional[RouteLitElement] = None,\n        left_section_props: Optional[dict[str, Any]] = None,\n        left_section_width: Optional[str] = None,\n        limit: Optional[int] = None,\n        max_dropdown_height: Optional[Union[str, int]] = None,\n        nothing_found_message: Optional[str] = None,\n        on_change: Optional[Callable[[Any], None]] = None,\n        pointer: Optional[bool] = None,\n        radius: Optional[Union[str, int]] = None,\n        required: Optional[bool] = None,\n        scroll_area_props: Optional[dict[str, Any]] = None,\n        right_section: Optional[RouteLitElement] = None,\n        right_section_props: Optional[dict[str, Any]] = None,\n        right_section_width: Optional[str] = None,\n        size: Optional[str] = None,\n        value: Optional[Any] = None,\n        with_asterisk: Optional[bool] = None,\n        with_error_styles: Optional[bool] = None,\n        with_scroll_area: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; Any:\n        \"\"\"\n        Single-select input with search and advanced features.\n\n        Args:\n            label (str): Field label.\n            options (list[Union[RLOption, str]]): Available options.\n            allow_deselect (Optional[bool]): Allow clearing the selection.\n            auto_select_on_blur (Optional[bool]): Auto select highlighted option on blur.\n            check_icon_position (Optional[Literal[\"left\", \"right\"]]): Check icon position.\n            chevron_color (Optional[str]): Chevron color.\n            clearable (Optional[bool]): Enable clear button.\n            combobox_props (Optional[dict[str, Any]]): Combobox props.\n            default_dropdown_opened (Optional[bool]): Open dropdown by default.\n            default_search_value (Optional[str]): Initial search value.\n            description (Optional[str]): Helper text under the label.\n            error (Optional[str]): Error message.\n            format_func (Optional[Callable[[Any], str]]): Map option value to label.\n            hidden_input_props (Optional[dict[str, Any]]): Hidden input props.\n            input_size (Optional[str]): Control size.\n            input_wrapper_order (Optional[list[str]]): Order of input wrapper parts.\n            key (Optional[str]): Explicit element key.\n            label_props (Optional[dict[str, Any]]): Label props.\n            left_section (Optional[RouteLitElement]): Left adornment.\n            left_section_props (Optional[dict[str, Any]]): Left adornment props.\n            left_section_width (Optional[str]): Left adornment width.\n            limit (Optional[int]): Max number of options shown.\n            max_dropdown_height (Optional[Union[str, int]]): Max dropdown height.\n            nothing_found_message (Optional[str]): Message when search returns no results.\n            on_change (Optional[Callable[[Any], None]]): Change handler.\n            pointer (Optional[bool]): Use pointer cursor.\n            radius (Optional[Union[str, int]]): Corner radius.\n            required (Optional[bool]): Mark as required.\n            scroll_area_props (Optional[dict[str, Any]]): Scroll area props.\n            right_section (Optional[RouteLitElement]): Right adornment.\n            right_section_props (Optional[dict[str, Any]]): Right adornment props.\n            right_section_width (Optional[str]): Right adornment width.\n            size (Optional[str]): Control size.\n            value (Optional[Any]): Current value.\n            with_asterisk (Optional[bool]): Show required asterisk.\n            with_error_styles (Optional[bool]): Apply error styles.\n            with_scroll_area (Optional[bool]): Wrap dropdown with scroll area.\n            kwargs: Additional props to set.\n\n        Returns:\n            Any: Selected value.\n        \"\"\"\n        return self._x_radio_select(\n            \"select\",\n            key or self._new_widget_id(\"select\", label),\n            options=options,  # type: ignore[arg-type]\n            options_attr=\"data\",\n            value=value,\n            on_change=on_change,\n            format_func=format_func,\n            label=label,\n            allowDeselect=allow_deselect,\n            autoSelectOnBlur=auto_select_on_blur,\n            checkIconPosition=check_icon_position,\n            chevronColor=chevron_color,\n            clearable=clearable,\n            comboboxProps=combobox_props,\n            defaultDropdownOpened=default_dropdown_opened,\n            defaultSearchValue=default_search_value,\n            description=description,\n            error=error,\n            hiddenInputProps=hidden_input_props,\n            inputSize=input_size,\n            inputWrapperOrder=input_wrapper_order,\n            labelProps=label_props,\n            leftSection=left_section,\n            leftSectionProps=left_section_props,\n            leftSectionWidth=left_section_width,\n            limit=limit,\n            maxDropdownHeight=max_dropdown_height,\n            nothingFoundMessage=nothing_found_message,\n            pointer=pointer,\n            radius=radius,\n            rightSection=right_section,\n            rightSectionProps=right_section_props,\n            rightSectionWidth=right_section_width,\n            required=required,\n            scrollAreaProps=scroll_area_props,\n            size=size,\n            withAsterisk=with_asterisk,\n            withErrorStyles=with_error_styles,\n            withScrollArea=with_scroll_area,\n            **kwargs,\n        )\n\n    def tags_input(\n        self,\n        label: str,\n        data: list[Union[RLOption, GroupOption, str]],\n        *,\n        accept_value_on_blur: Optional[bool] = None,\n        allow_duplicates: Optional[bool] = None,\n        clear_button_props: Optional[dict[str, Any]] = None,\n        clearable: Optional[bool] = None,\n        combobox_props: Optional[dict[str, Any]] = None,\n        default_dropdown_opened: Optional[bool] = None,\n        default_search_value: Optional[str] = None,\n        description: Optional[str] = None,\n        description_props: Optional[dict[str, Any]] = None,\n        disabled: Optional[bool] = None,\n        dropdown_opened: Optional[bool] = None,\n        error: Optional[str] = None,\n        error_props: Optional[dict[str, Any]] = None,\n        hidden_input_props: Optional[dict[str, Any]] = None,\n        hidden_input_values_divider: Optional[str] = None,\n        input_size: Optional[str] = None,\n        input_wrapper_order: Optional[list[str]] = None,\n        key: Optional[str] = None,\n        label_props: Optional[dict[str, Any]] = None,\n        left_section: Optional[RouteLitElement] = None,\n        left_section_props: Optional[dict[str, Any]] = None,\n        left_section_width: Optional[str] = None,\n        limit: Optional[int] = None,\n        max_dropdown_height: Optional[Union[str, int]] = None,\n        max_tags: Optional[int] = None,\n        on_change: Optional[Callable[[list[str]], None]] = None,\n        pointer: Optional[bool] = None,\n        radius: Optional[Union[str, int]] = None,\n        required: Optional[bool] = None,\n        right_section: Optional[str] = None,\n        right_section_props: Optional[dict[str, Any]] = None,\n        right_section_width: Optional[str] = None,\n        scroll_area_props: Optional[dict[str, Any]] = None,\n        search_value: Optional[str] = None,\n        select_first_option_on_change: Optional[bool] = None,\n        size: Optional[str] = None,\n        split_chars: Optional[list[str]] = None,\n        value: Optional[list[str]] = None,\n        with_asterisk: Optional[bool] = None,\n        with_error_styles: Optional[bool] = None,\n        with_scroll_area: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; list[str]:\n        \"\"\"\n        Free-form tags input with autocomplete suggestions.\n\n        Allows typing new tags and selecting from provided options. Supports grouping\n        of options and various UI customizations.\n\n        Args:\n            label (str): Field label.\n            data (list[Union[RLOption, GroupOption, str]]): Available options and/or groups.\n            accept_value_on_blur (Optional[bool]): Add current value on blur.\n            allow_duplicates (Optional[bool]): Allow duplicate tags.\n            clear_button_props (Optional[dict[str, Any]]): Props for the clear button.\n            clearable (Optional[bool]): Show clear button to remove all values.\n            combobox_props (Optional[dict[str, Any]]): Props passed to the underlying combobox.\n            default_dropdown_opened (Optional[bool]): Initial dropdown state.\n            default_search_value (Optional[str]): Initial search query.\n            description (Optional[str]): Helper text under the label.\n            description_props (Optional[dict[str, Any]]): Props for the description element.\n            disabled (Optional[bool]): Disable input interaction.\n            dropdown_opened (Optional[bool]): Controlled dropdown open state.\n            error (Optional[str]): Error message.\n            error_props (Optional[dict[str, Any]]): Props for the error element.\n            hidden_input_props (Optional[dict[str, Any]]): Props for the hidden form input.\n            hidden_input_values_divider (Optional[str]): Divider for hidden input serialization.\n            input_size (Optional[str]): Input size variant.\n            input_wrapper_order (Optional[list[str]]): Order of input wrapper parts.\n            key (Optional[str]): Explicit element key.\n            label_props (Optional[dict[str, Any]]): Props for the label element.\n            left_section (Optional[RouteLitElement]): Left section content.\n            left_section_props (Optional[dict[str, Any]]): Props for the left section wrapper.\n            left_section_width (Optional[str]): Width of the left section.\n            limit (Optional[int]): Max number of items displayed in dropdown.\n            max_dropdown_height (Optional[Union[str, int]]): Max height of the dropdown.\n            max_tags (Optional[int]): Max number of tags that can be added.\n            on_change (Optional[Callable[[list[str]], None]]): Change handler.\n            pointer (Optional[bool]): Show pointer cursor on hover.\n            radius (Optional[Union[str, int]]): Corner radius.\n            required (Optional[bool]): Mark field as required.\n            right_section (Optional[str]): Right section content.\n            right_section_props (Optional[dict[str, Any]]): Props for the right section wrapper.\n            right_section_width (Optional[str]): Width of the right section.\n            scroll_area_props (Optional[dict[str, Any]]): Props for dropdown scroll area.\n            search_value (Optional[str]): Controlled search query value.\n            select_first_option_on_change (Optional[bool]): Auto-select first option on change.\n            size (Optional[str]): Control size.\n            split_chars (Optional[list[str]]): Characters that split input into tags.\n            value (Optional[list[str]]): Current value (list of tags).\n            with_asterisk (Optional[bool]): Show required asterisk.\n            with_error_styles (Optional[bool]): Apply error styles when error is set.\n            with_scroll_area (Optional[bool]): Wrap dropdown list in a scroll area.\n            kwargs: Additional props to set.\n\n        Returns:\n            list[str]: Current list of tags.\n        \"\"\"\n        return cast(\n            list[str],\n            self._x_checkbox_group(\n                \"tagsinput\",\n                key or self._new_widget_id(\"tagsinput\", label),\n                acceptValueOnBlur=accept_value_on_blur,\n                allowDuplicates=allow_duplicates,\n                clearButtonProps=clear_button_props,\n                clearable=clearable,\n                comboboxProps=combobox_props,\n                defaultDropdownOpened=default_dropdown_opened,\n                defaultSearchValue=default_search_value,\n                description=description,\n                descriptionProps=description_props,\n                disabled=disabled,\n                dropdownOpened=dropdown_opened,\n                error=error,\n                errorProps=error_props,\n                hiddenInputProps=hidden_input_props,\n                hiddenInputValuesDivider=hidden_input_values_divider,\n                inputSize=input_size,\n                inputWrapperOrder=input_wrapper_order,\n                label=label,\n                labelProps=label_props,\n                leftSection=left_section,\n                leftSectionProps=left_section_props,\n                leftSectionWidth=left_section_width,\n                limit=limit,\n                maxDropdownHeight=max_dropdown_height,\n                maxTags=max_tags,\n                on_change=on_change,\n                options=data,  # type: ignore[arg-type]\n                options_attr=\"data\",\n                pointer=pointer,\n                radius=radius,\n                required=required,\n                rightSection=right_section,\n                rightSectionProps=right_section_props,\n                rightSectionWidth=right_section_width,\n                scrollAreaProps=scroll_area_props,\n                searchValue=search_value,\n                selectFirstOptionOnChange=select_first_option_on_change,\n                size=size,\n                splitChars=split_chars,\n                value=value,\n                withAsterisk=with_asterisk,\n                withErrorStyles=with_error_styles,\n                withScrollArea=with_scroll_area,\n                **kwargs,\n            ),\n        )\n\n    def action_icon(\n        self,\n        name: str,\n        *,\n        key: Optional[str] = None,\n        on_click: Optional[Callable[[], None]] = None,\n        rl_virtual: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; bool:\n        \"\"\"\n        Icon-only button for compact actions.\n\n        Args:\n            name (str): Icon name.\n            key (Optional[str]): Explicit element key.\n            on_click (Optional[Callable[[], None]]): Click handler.\n            rl_virtual (Optional[bool]): Whether the element is virtual.\n            kwargs: Additional props to set.\n\n        Returns:\n            bool: Click result flag.\n        \"\"\"\n        return self._x_button(\n            \"actionicon\",\n            key or self._new_widget_id(\"actionicon\", name),\n            name=name,\n            on_click=on_click,\n            rl_virtual=rl_virtual,\n            **kwargs,\n        )\n\n    def action_icon_group(\n        self,\n        border_width: Optional[str] = None,\n        orientation: Optional[Literal[\"horizontal\", \"vertical\"]] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Group multiple `action_icon` elements together.\n\n        Args:\n            border_width (Optional[str]): Border width between icons.\n            orientation (Optional[Literal[\"horizontal\", \"vertical\"]]): Layout direction.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the group element.\n        \"\"\"\n        element = self._create_element(\n            key=self._new_text_id(\"actionicongroup\"),\n            name=\"actionicongroup\",\n            props={\n                \"borderWidth\": border_width,\n                \"orientation\": orientation,\n                **kwargs,\n            },\n            virtual=True,\n        )\n        return cast(RLBuilder, self._build_nested_builder(element))\n\n    def action_icon_group_section(\n        self,\n        text: Optional[str] = None,\n        rl_virtual: bool = True,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Section within an `action_icon_group`, usually for labels or extra content.\n\n        Args:\n            text (Optional[str]): Section text.\n            rl_virtual (bool): Whether the element is virtual.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the section element.\n        \"\"\"\n        element = self._create_element(\n            key=self._new_text_id(\"actionicongroupsection\"),\n            name=\"actionicongroupsection\",\n            props={\n                \"children\": text,\n                **kwargs,\n            },\n            virtual=rl_virtual,\n        )\n        return self._build_nested_builder(element)  # type: ignore[return-value]\n\n    def button(\n        self,\n        text: str,\n        *,\n        color: Optional[str] = None,\n        disabled: Optional[bool] = None,\n        full_width: Optional[bool] = None,\n        gradient: Optional[dict[str, Any]] = None,\n        justify: Optional[str] = None,\n        left_section: Optional[RouteLitElement] = None,\n        left_section_props: Optional[dict[str, Any]] = None,\n        left_section_width: Optional[str] = None,\n        loading: Optional[bool] = None,\n        key: Optional[str] = None,\n        on_click: Optional[Callable[[], None]] = None,\n        radius: Optional[Union[str, int]] = None,\n        right_section: Optional[RouteLitElement] = None,\n        right_section_props: Optional[dict[str, Any]] = None,\n        right_section_width: Optional[str] = None,\n        rl_virtual: Optional[bool] = None,\n        size: Optional[str] = None,\n        variant: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; bool:\n        \"\"\"\n        Standard button component.\n\n        Args:\n            text (str): Button text.\n            color (Optional[str]): Accent color or variant color.\n            disabled (Optional[bool]): Disable interaction.\n            full_width (Optional[bool]): Make button take full width.\n            gradient (Optional[dict[str, Any]]): Gradient configuration for variant.\n            justify (Optional[str]): Content justification.\n            left_section (Optional[RouteLitElement]): Left adornment.\n            left_section_props (Optional[dict[str, Any]]): Left adornment props.\n            left_section_width (Optional[str]): Left adornment width.\n            loading (Optional[bool]): Show loading state.\n            key (Optional[str]): Explicit element key.\n            on_click (Optional[Callable[[], None]]): Click handler.\n            radius (Optional[Union[str, int]]): Corner radius.\n            right_section (Optional[RouteLitElement]): Right adornment.\n            right_section_props (Optional[dict[str, Any]]): Right adornment props.\n            right_section_width (Optional[str]): Right adornment width.\n            rl_virtual (Optional[bool]): Whether the element is virtual.\n            size (Optional[str]): Control size.\n            variant (Optional[str]): Visual variant.\n            kwargs: Additional props to set.\n\n        Returns:\n            bool: Click result flag.\n        \"\"\"\n        return self._x_button(\n            \"button\",\n            text,\n            on_click=on_click,\n            rl_virtual=rl_virtual,\n            color=color,\n            disabled=disabled,\n            fullWidth=full_width,\n            gradient=gradient,\n            justify=justify,\n            key=key or self._new_widget_id(\"button\", text),\n            leftSection=left_section,\n            leftSectionProps=left_section_props,\n            leftSectionWidth=left_section_width,\n            loading=loading,\n            radius=radius,\n            rightSection=right_section,\n            rightSectionProps=right_section_props,\n            rightSectionWidth=right_section_width,\n            size=size,\n            variant=variant,\n            **kwargs,\n        )\n\n    @staticmethod\n    def icon(name: str, **kwargs: Any) -&gt; RouteLitElement:\n        \"\"\"\n        Create an icon element to be used as an adornment.\n\n        Args:\n            name (str): Icon name.\n            kwargs: Additional props to set.\n\n        Returns:\n            RouteLitElement: Virtual icon element.\n        \"\"\"\n        return RouteLitElement(\n            name=\"icon\",\n            key=\"\",\n            props={\n                \"name\": name,\n                **kwargs,\n            },\n            virtual=True,\n        )\n\n    def anchor(\n        self,\n        href: str,\n        text: str,\n        *,\n        c: Optional[str] = None,\n        gradient: Optional[dict[str, Any]] = None,\n        inherit: Optional[bool] = None,\n        inline: Optional[bool] = None,\n        is_external: bool = False,\n        line_clamp: Optional[int] = None,\n        replace: bool = False,\n        size: Optional[str] = None,\n        truncate: Optional[str] = None,\n        underline: Optional[str] = None,\n        variant: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; RouteLitElement:\n        \"\"\"\n        Anchor link element that routes internally or opens external URLs.\n\n        Args:\n            href (str): Destination path or URL.\n            text (str): Link text.\n            c (Optional[str]): Text color.\n            gradient (Optional[dict[str, Any]]): Gradient style.\n            inherit (Optional[bool]): Inherit parent font styles.\n            inline (Optional[bool]): Render inline.\n            is_external (bool): Open in a new tab/window if true.\n            line_clamp (Optional[int]): Clamp to a number of lines.\n            replace (bool): Replace history entry when routing.\n            size (Optional[str]): Text size.\n            truncate (Optional[str]): Truncate overflow.\n            underline (Optional[str]): Underline style.\n            variant (Optional[str]): Visual variant.\n            kwargs: Additional props to set.\n\n        Returns:\n            RouteLitElement: Configured anchor element.\n        \"\"\"\n        return self.link(\n            href,\n            text,\n            c=c,\n            rl_element_type=\"anchor\",\n            gradient=gradient,\n            is_external=is_external,\n            inherit=inherit,\n            inline=inline,\n            lineClamp=line_clamp,\n            replace=replace,\n            size=size,\n            truncate=truncate,\n            underline=underline,\n            variant=variant,\n            **kwargs,\n        )\n\n    def nav_link(\n        self,\n        href: str,\n        label: str,\n        *,\n        active: Optional[bool] = None,\n        auto_contrast: Optional[bool] = None,\n        children_offset: Optional[str] = None,\n        color: Optional[str] = None,\n        default_opened: Optional[bool] = None,\n        description: Optional[str] = None,\n        disable_right_section_rotation: Optional[bool] = None,\n        disabled: Optional[bool] = None,\n        exact: Optional[bool] = None,\n        is_external: bool = False,\n        left_section: Optional[RouteLitElement] = None,\n        no_wrap: Optional[bool] = None,\n        right_section: Optional[RouteLitElement] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Navigation link, typically used in sidebars or menus.\n\n        Args:\n            href (str): Destination path.\n            label (str): Visible label.\n            active (Optional[bool]): Force active state.\n            auto_contrast (Optional[bool]): Improve contrast automatically.\n            children_offset (Optional[str]): Indentation for children links.\n            color (Optional[str]): Accent color.\n            default_opened (Optional[bool]): Start expanded.\n            description (Optional[str]): Helper text under the label.\n            disable_right_section_rotation (Optional[bool]): Disable chevron rotation.\n            disabled (Optional[bool]): Disable interaction.\n            exact (Optional[bool]): Match route exactly.\n            is_external (bool): Treat as external link.\n            left_section (Optional[RouteLitElement]): Left adornment.\n            no_wrap (Optional[bool]): Prevent label wrapping.\n            right_section (Optional[RouteLitElement]): Right adornment.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder for child links/content.\n        \"\"\"\n        element = self.link(\n            href,\n            label,\n            active=active,\n            autoContrast=auto_contrast,\n            childrenOffset=children_offset,\n            color=color,\n            defaultOpened=default_opened,\n            description=description,\n            disableRightSectionRotation=disable_right_section_rotation,\n            disabled=disabled,\n            exact=exact,\n            is_external=is_external,\n            leftSection=left_section,\n            noWrap=no_wrap,\n            rightSection=right_section,\n            rl_element_type=\"navlink\",\n            rl_text_attr=\"label\",\n            **kwargs,\n        )\n        return self._build_nested_builder(element)  # type: ignore[return-value]\n\n    def tabs(\n        self,\n        tabs: list[Union[MTTab, str]],\n        *,\n        activate_tab_with_keyboard: Optional[bool] = None,\n        allow_tab_deactivation: Optional[bool] = None,\n        auto_contrast: Optional[bool] = None,\n        color: Optional[str] = None,\n        default_value: Optional[str] = None,\n        inverted: Optional[bool] = None,\n        keep_mounted: Optional[bool] = None,\n        key: Optional[str] = None,\n        loop: Optional[bool] = None,\n        orientation: Optional[Literal[\"horizontal\", \"vertical\"]] = None,\n        placement: Optional[Literal[\"left\", \"right\"]] = None,\n        radius: Optional[Union[str, int]] = None,\n        tablist_grow: Optional[bool] = None,\n        tablist_justify: Optional[str] = None,\n        variant: Optional[Literal[\"default\", \"outline\", \"pills\"]] = None,\n        **kwargs: Any,\n    ) -&gt; tuple[\"RLBuilder\", ...]:\n        \"\"\"\n        Tabs component with a tablist and corresponding tab panels.\n\n        Args:\n            tabs (list[Union[MTTab, str]]): Tabs configuration or values.\n            activate_tab_with_keyboard (Optional[bool]): Enable keyboard navigation.\n            allow_tab_deactivation (Optional[bool]): Allow deactivating active tab.\n            auto_contrast (Optional[bool]): Improve contrast automatically.\n            color (Optional[str]): Accent color.\n            default_value (Optional[str]): Initially selected tab value.\n            inverted (Optional[bool]): Invert styles.\n            keep_mounted (Optional[bool]): Keep inactive panels mounted.\n            key (Optional[str]): Explicit element key.\n            loop (Optional[bool]): Loop focus within tabs.\n            orientation (Optional[Literal[\"horizontal\", \"vertical\"]]): Orientation.\n            placement (Optional[Literal[\"left\", \"right\"]]): Placement of tabs relative to panels.\n            radius (Optional[Union[str, int]]): Corner radius.\n            tablist_grow (Optional[bool]): Make tablist items grow.\n            tablist_justify (Optional[str]): Tablist justification.\n            variant (Optional[Literal[\"default\", \"outline\", \"pills\"]]): Visual variant.\n            kwargs: Additional props to set.\n\n        Returns:\n            tuple[RLBuilder, ...]: Panel builders, one per tab value.\n\n        Example:\n        ```python\n        tab1, tab2 = ui.tabs(\n            tabs=[\n                ui.tab(value=\"tab1\", label=\"Tab 1\"),\n                \"Tab 2\",\n            ],\n            default_value=\"tab1\",\n            variant=\"outline\",\n        )\n        with tab1:\n            ui.text(\"Tab body 1\")\n        with tab2:\n            ui.text(\"Tab body 2\")\n        ```\n        \"\"\"\n        default_value = default_value or (\n            (tabs[0][\"value\"] if isinstance(tabs[0], dict) else tabs[0]) if tabs and len(tabs) &gt; 0 else None\n        )\n        tabs_root = self._build_nested_builder(\n            self._create_element(\n                key=key or self._new_text_id(\"tabs\"),\n                name=\"tabs\",\n                props={\n                    \"activateTabWithKeyboard\": activate_tab_with_keyboard,\n                    \"allowTabDeactivation\": allow_tab_deactivation,\n                    \"autoContrast\": auto_contrast,\n                    \"color\": color,\n                    \"defaultValue\": default_value,\n                    \"inverted\": inverted,\n                    \"keepMounted\": keep_mounted,\n                    \"loop\": loop,\n                    \"orientation\": orientation,\n                    \"placement\": placement,\n                    \"radius\": radius,\n                    \"variant\": variant,\n                    **kwargs,\n                },\n                virtual=True,\n            )\n        )\n        tabs_panels = []\n        with tabs_root:\n            tab_list = self._build_nested_builder(\n                self._create_element(\n                    key=self._new_text_id(\"tablist\"),\n                    name=\"tablist\",\n                    props={\n                        \"grow\": tablist_grow,\n                        \"justify\": tablist_justify,\n                    },\n                    virtual=True,\n                )\n            )\n            for tab in tabs:\n                tab_props = {\"value\": tab} if isinstance(tab, str) else tab\n                keep_mounted_val = tab_props.pop(\"keep_mounted\", None)\n                keep_mounted = keep_mounted_val if isinstance(keep_mounted_val, (bool, type(None))) else None\n                left_section = tab_props.pop(\"left_section\", None)\n                right_section = tab_props.pop(\"right_section\", None)\n                label = tab_props.pop(\"label\", None)\n                tab_props[\"children\"] = label or tab_props[\"value\"]\n                if left_section:\n                    tab_props[\"leftSection\"] = left_section  # type: ignore[assignment, arg-type]\n                if right_section:\n                    tab_props[\"rightSection\"] = right_section  # type: ignore[assignment, arg-type]\n                with tab_list:\n                    self._create_element(\n                        key=self._new_text_id(\"tab\"),\n                        name=\"tab\",\n                        props=tab_props,  # type: ignore[arg-type]\n                        virtual=True,\n                    )\n                tabs_panels.append(\n                    self._build_nested_builder(\n                        self._create_element(\n                            key=self._new_text_id(\"tabpanel\"),\n                            name=\"tabpanel\",\n                            props={\n                                \"value\": tab_props[\"value\"],\n                                \"keepMounted\": keep_mounted,\n                            },\n                            virtual=True,\n                        )\n                    )\n                )\n        return tuple(tabs_panels)  # type: ignore[arg-type]\n\n    @staticmethod\n    def tab(\n        value: str,\n        label: Optional[str] = None,\n        color: Optional[str] = None,\n        left_section: Optional[RouteLitElement] = None,\n        right_section: Optional[RouteLitElement] = None,\n        size: Optional[Union[str, int]] = None,\n        keep_mounted: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; MTTab:\n        \"\"\"\n        Helper to create an `MTTab` configuration object.\n        Used to describe the props for each tab in the `tabs` function.\n\n        Args:\n            value (str): Tab value.\n            label (Optional[str]): Tab label.\n            color (Optional[str]): Accent color.\n            left_section (Optional[RouteLitElement]): Left adornment for tab.\n            right_section (Optional[RouteLitElement]): Right adornment for tab.\n            size (Optional[Union[str, int]]): Size for the tab.\n            keep_mounted (Optional[bool]): Keep panel mounted when inactive.\n            kwargs: Additional props to set.\n\n        Returns:\n            MTTab: Tab configuration object.\n        \"\"\"\n        return MTTab(  # type: ignore[no-any-return]\n            value=value,\n            label=label,\n            color=color,\n            left_section=left_section,\n            right_section=right_section,\n            size=size,\n            keep_mounted=keep_mounted,\n            **kwargs,  # type: ignore[typeddict-item]\n        )\n\n    def alert(\n        self,\n        title: str,\n        *,\n        auto_contrast: Optional[bool] = None,\n        key: Optional[str] = None,\n        color: Optional[str] = None,\n        radius: Optional[Union[str, int]] = None,\n        icon: Optional[RouteLitElement] = None,\n        with_close_button: Optional[bool] = None,\n        close_button_label: Optional[str] = None,\n        on_close: Optional[Callable[[], bool]] = None,\n        variant: Optional[Literal[\"default\", \"filled\", \"light\", \"outline\", \"white\", \"transparent\"]] = None,\n        text: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Inline alert with optional icon and close button.\n\n        Args:\n            title (str): Alert title.\n            auto_contrast (Optional[bool]): Improve contrast automatically.\n            key (Optional[str]): Explicit element key.\n            color (Optional[str]): Color variant.\n            radius (Optional[Union[str, int]]): Corner radius.\n            icon (Optional[RouteLitElement]): Leading icon.\n            with_close_button (Optional[bool]): Show close button.\n            close_button_label (Optional[str]): Accessible label for close button.\n            on_close (Optional[Callable[[], bool]]): Close handler.\n            variant (Optional[Literal[\"default\", \"filled\", \"light\", \"outline\", \"white\", \"transparent\"]]): Visual variant.\n            text (Optional[str]): Alert content.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the alert element.\n        \"\"\"\n        return self._x_dialog(  # type: ignore[return-value]\n            \"alert\",\n            key or self._new_widget_id(\"alert\", title),\n            autoContrast=auto_contrast,\n            closeButtonLabel=close_button_label,\n            color=color,\n            radius=radius,\n            icon=icon,\n            title=title,\n            on_close=on_close,\n            variant=variant,\n            withCloseButton=with_close_button,\n            children=text,\n            **kwargs,\n        )\n\n    def notification(\n        self,\n        title: str,\n        *,\n        key: Optional[str] = None,\n        close_button_props: Optional[dict[str, Any]] = None,\n        color: Optional[str] = None,\n        icon: Optional[RouteLitElement] = None,\n        on_close: Optional[Callable[[], bool]] = None,\n        radius: Optional[Union[str, int]] = None,\n        text: Optional[str] = None,\n        with_border: Optional[bool] = None,\n        with_close_button: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Notification element for transient messages.\n\n        Args:\n            title (str): Notification title.\n            key (Optional[str]): Explicit element key.\n            close_button_props (Optional[dict[str, Any]]): Close button props.\n            color (Optional[str]): Color variant.\n            icon (Optional[RouteLitElement]): Leading icon.\n            on_close (Optional[Callable[[], bool]]): Close handler.\n            radius (Optional[Union[str, int]]): Corner radius.\n            text (Optional[str]): Notification content.\n            with_border (Optional[bool]): Show border.\n            with_close_button (Optional[bool]): Show close button.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the notification element.\n        \"\"\"\n        return self._x_dialog(  # type: ignore[return-value]\n            \"notification\",\n            key or self._new_widget_id(\"notification\", title),\n            closeButtonProps=close_button_props,\n            color=color,\n            radius=radius,\n            icon=icon,\n            title=title,\n            on_close=on_close,\n            withBorder=with_border,\n            withCloseButton=with_close_button,\n            children=text,\n            **kwargs,\n        )\n\n    def progress(\n        self,\n        value: float,\n        *,\n        key: Optional[str] = None,\n        animated: Optional[bool] = None,\n        auto_contrast: Optional[bool] = None,\n        color: Optional[str] = None,\n        radius: Optional[Union[str, int]] = None,\n        size: Optional[Union[str, int]] = None,\n        striped: Optional[bool] = None,\n        transition_duration: Optional[int] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        Determinate progress bar.\n\n        Args:\n            value (float): Progress value from 0 to 100.\n            key (Optional[str]): Explicit element key.\n            animated (Optional[bool]): Animate stripes.\n            auto_contrast (Optional[bool]): Improve contrast automatically.\n            color (Optional[str]): Color variant.\n            radius (Optional[Union[str, int]]): Corner radius.\n            size (Optional[Union[str, int]]): Height of the bar.\n            striped (Optional[bool]): Show stripes.\n            transition_duration (Optional[int]): Animation duration in ms.\n            kwargs: Additional props to set.\n        \"\"\"\n        self._create_element(\n            key=key or self._new_text_id(\"progress\"),\n            name=\"progress\",\n            props={\n                \"value\": value,\n                \"animated\": animated,\n                \"autoContrast\": auto_contrast,\n                \"color\": color,\n                \"radius\": radius,\n                \"size\": size,\n                \"striped\": striped,\n                \"transitionDuration\": transition_duration,\n                **kwargs,\n            },\n        )\n\n    def dialog(\n        self,\n        key: Optional[str] = None,\n        *,\n        with_close_button: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Open a dialog container for arbitrary content.\n\n        Args:\n            key (Optional[str]): Explicit element key.\n            with_close_button (Optional[bool]): Show close button.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the dialog element.\n        \"\"\"\n        return super()._x_dialog(  # type: ignore[return-value]\n            \"dialog\",\n            key or self._new_text_id(\"dialog\"),\n            opened=True,\n            withCloseButton=with_close_button,\n            **kwargs,\n        )\n\n    def drawer(\n        self,\n        key: Optional[str] = None,\n        *,\n        close_button_props: Optional[dict] = None,\n        close_on_click_outside: Optional[bool] = None,\n        close_on_escape: Optional[bool] = None,\n        on_close: Optional[Callable[[], bool]] = None,\n        keep_mounted: Optional[bool] = None,\n        lock_scroll: Optional[bool] = None,\n        offset: Optional[Union[str, int]] = None,\n        overlay_props: Optional[dict] = None,\n        padding: Optional[Union[str, int]] = None,\n        portal_props: Optional[dict] = None,\n        position: Optional[str] = None,\n        radius: Optional[Union[str, int]] = None,\n        remove_scroll_props: Optional[dict] = None,\n        return_focus: Optional[bool] = None,\n        scroll_area_component: Optional[str] = None,\n        shadow: Optional[str] = None,\n        size: Optional[Union[str, int]] = None,\n        stack_id: Optional[str] = None,\n        title: Optional[str] = None,\n        transition_props: Optional[dict] = None,\n        trap_focus: Optional[bool] = None,\n        with_close_button: Optional[bool] = None,\n        with_overlay: Optional[bool] = None,\n        within_portal: Optional[bool] = None,\n        z_index: Optional[Union[str, int]] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Drawer component that slides from screen edges.\n\n        Args:\n            key (Optional[str]): Explicit element key.\n            close_button_props (Optional[dict]): Close button props.\n            close_on_click_outside (Optional[bool]): Close when clicking outside.\n            close_on_escape (Optional[bool]): Close on Escape key.\n            on_close (Optional[Callable[[], bool]]): Close handler.\n            keep_mounted (Optional[bool]): Keep in DOM when closed.\n            lock_scroll (Optional[bool]): Lock document scroll when opened.\n            offset (Optional[Union[str, int]]): Offset from viewport edges.\n            overlay_props (Optional[dict]): Overlay props.\n            padding (Optional[Union[str, int]]): Content padding.\n            portal_props (Optional[dict]): Portal props.\n            position (Optional[str]): Edge position.\n            radius (Optional[Union[str, int]]): Corner radius.\n            remove_scroll_props (Optional[dict]): Remove scroll props.\n            return_focus (Optional[bool]): Return focus to trigger on close.\n            scroll_area_component (Optional[str]): Custom scroll area component.\n            shadow (Optional[str]): Shadow preset.\n            size (Optional[Union[str, int]]): Drawer size.\n            stack_id (Optional[str]): Stack identifier.\n            title (Optional[str]): Header title.\n            transition_props (Optional[dict]): Transition props.\n            trap_focus (Optional[bool]): Trap focus inside drawer.\n            with_close_button (Optional[bool]): Show close button.\n            with_overlay (Optional[bool]): Show overlay.\n            within_portal (Optional[bool]): Render within portal.\n            z_index (Optional[Union[str, int]]): CSS z-index.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the drawer element.\n        \"\"\"\n        return super()._x_dialog(  # type: ignore[return-value]\n            \"drawer\",\n            key or self._new_text_id(\"drawer\"),\n            opened=True,\n            closeButtonProps=close_button_props,\n            closeOnClickOutside=close_on_click_outside,\n            closeOnEscape=close_on_escape,\n            keepMounted=keep_mounted,\n            lockScroll=lock_scroll,\n            offset=offset,\n            on_close=on_close,\n            overlayProps=overlay_props,\n            padding=padding,\n            portalProps=portal_props,\n            position=position,\n            radius=radius,\n            removeScrollProps=remove_scroll_props,\n            returnFocus=return_focus,\n            scrollAreaComponent=scroll_area_component,\n            shadow=shadow,\n            size=size,\n            stackId=stack_id,\n            title=title,\n            transitionProps=transition_props,\n            trapFocus=trap_focus,\n            withCloseButton=with_close_button,\n            withOverlay=with_overlay,\n            withinPortal=within_portal,\n            zIndex=z_index,\n            **kwargs,\n        )\n\n    def modal(\n        self,\n        key: Optional[str] = None,\n        *,\n        title: Optional[str] = None,\n        with_close_button: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Centered modal dialog.\n\n        Args:\n            key (Optional[str]): Explicit element key.\n            title (Optional[str]): Header title.\n            with_close_button (Optional[bool]): Show close button.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the modal element.\n        \"\"\"\n        return super()._x_dialog(  # type: ignore[return-value]\n            \"modal\",\n            key or self._new_text_id(\"modal\"),\n            opened=True,\n            title=title,\n            withCloseButton=with_close_button,\n            **kwargs,\n        )\n\n    # override _dialog to use modal instead of dialog\n    def _dialog(\n        self,\n        key: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Internal helper: open a modal by default when using dialog-like APIs.\n        \"\"\"\n        return self.modal(key or self._new_text_id(\"modal\"), **kwargs)\n\n    def affix(\n        self,\n        key: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Position an element at a fixed offset from viewport edges.\n\n        Args:\n            key (Optional[str]): Explicit element key.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the affix element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"affix\",\n            key=key or self._new_text_id(\"affix\"),\n            props=kwargs,\n            virtual=True,\n        )\n\n    def image(\n        self,\n        src: str,\n        *,\n        key: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        Display an image.\n\n        Args:\n            src (str): Image source URL.\n            key (Optional[str]): Explicit element key.\n            kwargs: Additional props to set.\n        \"\"\"\n        self._create_element(\n            name=\"image\",\n            key=key or self._new_widget_id(\"image\", src),\n            props={\"src\": src, **kwargs},\n        )\n\n    def number_formatter(\n        self,\n        value: Union[float, int, str],\n        *,\n        key: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        Format and display a number according to given options.\n\n        Args:\n            value (Union[float, int, str]): Value to format.\n            key (Optional[str]): Explicit element key.\n            kwargs: Additional props to set.\n        \"\"\"\n        self._create_element(\n            key=key or self._new_text_id(\"numberformatter\"),\n            name=\"numberformatter\",\n            props={\"value\": value, **kwargs},\n        )\n\n    def spoiler(\n        self,\n        show_label: str = \"Show more\",\n        hide_label: str = \"Show less\",\n        *,\n        key: Optional[str] = None,\n        initial_state: bool = False,\n        max_height: Optional[int] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Collapsible content with show/hide controls.\n\n        Args:\n            show_label (str): Label when collapsed.\n            hide_label (str): Label when expanded.\n            key (Optional[str]): Explicit element key.\n            initial_state (bool): Initial expanded state.\n            max_height (Optional[int]): Max visible height when collapsed.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the spoiler element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"spoiler\",\n            key=key or self._new_text_id(\"spoiler\"),\n            props={\n                \"showLabel\": show_label,\n                \"hideLabel\": hide_label,\n                \"initialState\": initial_state,\n                \"maxHeight\": max_height,\n                **kwargs,\n            },\n            virtual=True,\n        )\n\n    def text(  # type: ignore[override]\n        self,\n        text: str,\n        *,\n        key: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        Render plain text content.\n\n        Args:\n            text (str): Text content.\n            key (Optional[str]): Explicit element key.\n            kwargs: Additional props to set.\n        \"\"\"\n        self._create_element(\n            name=\"text\",\n            key=key or self._new_text_id(\"text\"),\n            props={\"children\": text, **kwargs},\n        )\n\n    def title(  # type: ignore[override]\n        self,\n        text: str,\n        *,\n        key: Optional[str] = None,\n        order: Optional[int] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        Title text with semantic order (h1-h6).\n\n        Args:\n            text (str): Title content.\n            key (Optional[str]): Explicit element key.\n            order (Optional[int]): Heading level (1-6).\n            kwargs: Additional props to set.\n        \"\"\"\n        self._create_element(\n            name=\"title\",\n            key=key or self._new_text_id(\"title\"),\n            props={\"children\": text, \"order\": order, **kwargs},\n        )\n\n    def table(\n        self,\n        key: Optional[str] = None,\n        *,\n        body: Optional[list[list[Any]]] = None,\n        caption: Optional[str] = None,\n        head: Optional[list[str]] = None,\n        foot: Optional[list[str]] = None,\n        sticky_header: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Data table with optional head, body, foot and caption.\n\n        Args:\n            key (Optional[str]): Explicit element key.\n            body (Optional[list[list[Any]]]): Table body rows.\n            caption (Optional[str]): Table caption.\n            head (Optional[list[str]]): Header row cells.\n            foot (Optional[list[str]]): Footer row cells.\n            sticky_header (Optional[bool]): Make header sticky when scrolling.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the table element.\n        \"\"\"\n        data = {\n            \"body\": body,\n            \"caption\": caption,\n            \"head\": head,\n            \"foot\": foot,\n        }\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"table\",\n            key=key or self._new_text_id(\"table\"),\n            props={\"data\": data, \"stickyHeader\": sticky_header, **kwargs},\n        )\n\n    def table_caption(\n        self,\n        text: str,\n        *,\n        key: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        Add a caption to the current table.\n\n        Args:\n            text (str): Caption text.\n            key (Optional[str]): Explicit element key.\n            kwargs: Additional props to set.\n        \"\"\"\n        self._create_element(\n            name=\"tablecaption\",\n            key=key or self._new_text_id(\"tablecaption\"),\n            props={\"children\": text, **kwargs},\n            virtual=True,\n        )\n\n    def table_head(\n        self,\n        key: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Create a table head section.\n\n        Args:\n            key (Optional[str]): Explicit element key.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the head section.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"tablehead\",\n            key=key or self._new_text_id(\"tablehead\"),\n            props=kwargs,\n            virtual=True,\n        )\n\n    def table_foot(\n        self,\n        key: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Create a table foot section.\n\n        Args:\n            key (Optional[str]): Explicit element key.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the foot section.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"tablefoot\",\n            key=key or self._new_text_id(\"tablefoot\"),\n            props=kwargs,\n            virtual=True,\n        )\n\n    def table_row(\n        self,\n        key: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Create a table row.\n\n        Args:\n            key (Optional[str]): Explicit element key.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the row.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"tablerow\",\n            key=key or self._new_text_id(\"tablerow\"),\n            props=kwargs,\n            virtual=True,\n        )\n\n    def table_cell(\n        self,\n        text: Optional[str] = None,\n        *,\n        key: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Create a table cell.\n\n        Args:\n            text (Optional[str]): Cell text content.\n            key (Optional[str]): Explicit element key.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the cell.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"tablecell\",\n            key=key or self._new_text_id(\"tablecell\"),\n            props={\"children\": text, **kwargs},\n            virtual=True,\n        )\n\n    def table_header(\n        self,\n        text: Optional[str] = None,\n        *,\n        key: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Create a table header cell.\n\n        Args:\n            text (Optional[str]): Header text content.\n            key (Optional[str]): Explicit element key.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the header cell.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"tableheader\",\n            key=key or self._new_text_id(\"tableheader\"),\n            props={\"children\": text, **kwargs},\n            virtual=True,\n        )\n\n    def table_body(\n        self,\n        key: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Create a table body section.\n\n        Args:\n            key (Optional[str]): Explicit element key.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the body section.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"tablebody\",\n            key=key or self._new_text_id(\"tablebody\"),\n            props=kwargs,\n            virtual=True,\n        )\n\n    def table_scroll_container(\n        self,\n        *,\n        key: Optional[str] = None,\n        max_height: Optional[Union[str, int]] = None,\n        max_width: Optional[Union[str, int]] = None,\n        min_height: Optional[Union[str, int]] = None,\n        min_width: Optional[Union[str, int]] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Scrollable container for large tables.\n\n        Args:\n            key (Optional[str]): Explicit element key.\n            max_height (Optional[Union[str, int]]): Maximum height.\n            max_width (Optional[Union[str, int]]): Maximum width.\n            min_height (Optional[Union[str, int]]): Minimum height.\n            min_width (Optional[Union[str, int]]): Minimum width.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the scroll container.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"tablescrollcontainer\",\n            key=key or self._new_text_id(\"tablescrollcontainer\"),\n            props={\n                \"maxHeight\": max_height,\n                \"maxWidth\": max_width,\n                \"minHeight\": min_height,\n                \"minWidth\": min_width,\n                **kwargs,\n            },\n            virtual=True,\n        )\n\n    def box(\n        self,\n        key: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Generic layout container.\n\n        Args:\n            key (Optional[str]): Explicit element key.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the box element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"box\",\n            key=key or self._new_text_id(\"box\"),\n            props=kwargs,\n            virtual=True,\n        )\n\n    def paper(\n        self,\n        *,\n        key: Optional[str] = None,\n        radius: Optional[Union[str, int]] = None,\n        shadow: Optional[str] = None,\n        with_border: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Container with background, border, and shadow.\n\n        Args:\n            key (Optional[str]): Explicit element key.\n            radius (Optional[Union[str, int]]): Corner radius.\n            shadow (Optional[str]): Shadow preset.\n            with_border (Optional[bool]): Show border.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the paper element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"paper\",\n            key=key or self._new_text_id(\"paper\"),\n            props={\n                \"radius\": radius,\n                \"shadow\": shadow,\n                \"withBorder\": with_border,\n                **kwargs,\n            },\n            virtual=True,\n        )\n\n    def scroll_area(\n        self,\n        *,\n        key: Optional[str] = None,\n        offset_scrollbars: Optional[Union[bool, Literal[\"x\", \"y\", \"present\"]]] = None,\n        overscroll_behavior: Optional[str] = None,\n        scroll_hide_delay: Optional[int] = None,\n        scrollbar_size: Optional[Union[str, int]] = None,\n        scrollbars: Optional[Union[bool, Literal[\"x\", \"y\", \"xy\"]]] = None,\n        type: Optional[Literal[\"auto\", \"scroll\", \"always\", \"hover\", \"never\"]] = None,  # noqa: A002\n        viewport_props: Optional[dict[str, Any]] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Scrollable area with configurable scrollbars and behavior.\n\n        Args:\n            key (Optional[str]): Explicit element key.\n            offset_scrollbars (Optional[Union[bool, Literal[\"x\", \"y\", \"present\"]]): Offset scrollbars from content.\n            overscroll_behavior (Optional[str]): CSS overscroll behavior.\n            scroll_hide_delay (Optional[int]): Delay before hiding scrollbars.\n            scrollbar_size (Optional[Union[str, int]]): Scrollbar size.\n            scrollbars (Optional[Union[bool, Literal[\"x\", \"y\", \"xy\"]]): Which axes show scrollbars.\n            type (Optional[Literal[\"auto\", \"scroll\", \"always\", \"hover\", \"never\"]]): Scrollbar visibility policy.\n            viewport_props (Optional[dict[str, Any]]): Viewport element props.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the scroll area.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"scrollarea\",\n            key=key or self._new_text_id(\"scrollarea\"),\n            props={\n                \"offsetScrollbars\": offset_scrollbars,\n                \"overscrollBehavior\": overscroll_behavior,\n                \"scrollHideDelay\": scroll_hide_delay,\n                \"scrollbarSize\": scrollbar_size,\n                \"scrollbars\": scrollbars,\n                \"type\": type,\n                \"viewportProps\": viewport_props,\n                **kwargs,\n            },\n            virtual=True,\n        )\n\n    def accordion(\n        self,\n        value: Optional[Union[list[str], str]] = None,\n        *,\n        key: Optional[str] = None,\n        chevron: Optional[Any] = None,\n        chevron_icon_size: Optional[Union[str, int]] = None,\n        chevron_position: Optional[str] = None,\n        chevron_size: Optional[Union[str, int]] = None,\n        disable_chevron_rotation: Optional[bool] = None,\n        loop: Optional[bool] = None,\n        multiple: Optional[bool] = None,\n        on_change: Optional[Callable[[Any], None]] = None,\n        order: Optional[Literal[2, 3, 4, 5, 6]] = None,\n        radius: Optional[Union[str, int]] = None,\n        transition_duration: Optional[int] = None,\n        variant: Optional[Literal[\"default\", \"filled\", \"separated\", \"contained\", \"unstyled\"]] = None,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Accordion component.\n\n        Args:\n            value (Optional[Union[list[str], str]]): Controlled component value.\n            key (Optional[str]): Unique key for the component.\n            chevron (Optional[Any]): Custom chevron icon.\n            chevron_icon_size (Optional[Union[str, int]]): Size of default chevron icon.\n            chevron_position (Optional[str]): Position of chevron relative to label.\n            chevron_size (Optional[Union[str, int]]): Size of chevron icon container.\n            disable_chevron_rotation (Optional[bool]): Disable chevron rotation.\n            loop (Optional[bool]): Loop through items with arrow keys.\n            multiple (Optional[bool]): Allow multiple items open at once.\n            on_change (Optional[Callable[[Any], None]]): Called when value changes.\n            order (Optional[Literal[2,3,4,5,6]]): Heading order.\n            radius (Optional[Union[str, int]]): Border radius.\n            transition_duration (Optional[int]): Transition duration in ms.\n            variant (Optional[Literal[\"default\", \"filled\", \"separated\", \"contained\", \"unstyled\"]]): Visual variant.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the accordion.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"accordion\",\n            key=key or self._new_text_id(\"accordion\"),\n            props={\n                \"defaultValue\": value,\n                \"chevron\": chevron,\n                \"chevronIconSize\": chevron_icon_size,\n                \"chevronPosition\": chevron_position,\n                \"chevronSize\": chevron_size,\n                \"disableChevronRotation\": disable_chevron_rotation,\n                \"loop\": loop,\n                \"multiple\": multiple,\n                \"onChange\": on_change,\n                \"order\": order,\n                \"radius\": radius,\n                \"transitionDuration\": transition_duration,\n                \"variant\": variant,\n            },\n            virtual=True,\n        )\n\n    def accordion_item(\n        self,\n        label: str,\n        *,\n        key: Optional[str] = None,\n        chevron: Optional[RouteLitElement] = None,\n        disabled: Optional[bool] = None,\n        icon: Optional[RouteLitElement] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Accordion item component.\n        \"\"\"\n        item_key = self._new_widget_id(\"accordionitem\", label) if key is None else key\n        accordion_item = self._create_builder_element(\n            name=\"accordionitem\",\n            key=item_key,\n            props={\n                \"value\": item_key,\n                **kwargs,\n            },\n            virtual=True,\n        )\n        with accordion_item:\n            control_key = self._new_widget_id(\"accordioncontrol\", label) if key is None else key + \"-control\"\n            self._create_element(\n                \"accordioncontrol\",\n                key=control_key,\n                props={\n                    \"chevron\": chevron,\n                    \"disabled\": disabled,\n                    \"icon\": icon,\n                    \"children\": label,\n                },\n                virtual=True,\n            )\n            panel_key = self._new_widget_id(\"accordionpanel\", label) if key is None else key + \"-panel\"\n            panel = self._create_builder_element(\n                name=\"accordionpanel\",\n                key=panel_key,\n                props={},\n                virtual=True,\n            )\n            return panel  # type: ignore[return-value]\n\n    def expander(\n        self,\n        title: str,\n        *,\n        is_open: Optional[bool] = None,\n        key: Optional[str] = None,\n        chevron: Optional[Any] = None,\n        chevron_icon_size: Optional[Union[str, int]] = None,\n        chevron_position: Optional[str] = None,\n        chevron_size: Optional[Union[str, int]] = None,\n        disabled: Optional[bool] = None,\n        disable_chevron_rotation: Optional[bool] = None,\n        icon: Optional[RouteLitElement] = None,\n        radius: Optional[Union[str, int]] = None,\n        transition_duration: Optional[int] = None,\n        variant: Optional[Literal[\"default\", \"filled\", \"separated\", \"contained\", \"unstyled\"]] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Expander component.\n        This is a wrapper around the accordion component.\n\n        Args:\n            title (str): Title text shown in the expander header\n            is_open (Optional[bool]): Whether the expander is initially expanded\n            key (Optional[str]): Unique key for the component\n            chevron (Optional[Any]): Custom chevron element\n            chevron_icon_size (Optional[Union[str, int]]): Size of the chevron icon\n            chevron_position (Optional[str]): Position of the chevron icon\n            chevron_size (Optional[Union[str, int]]): Size of the chevron container\n            disabled (Optional[bool]): Whether the expander is disabled\n            disable_chevron_rotation (Optional[bool]): Whether to disable chevron rotation animation\n            icon (Optional[RouteLitElement]): Icon element shown before the title\n            radius (Optional[Union[str, int]]): Border radius\n            transition_duration (Optional[int]): Duration of expand/collapse animation in ms\n            variant (Optional[Literal[\"default\", \"filled\", \"separated\", \"contained\", \"unstyled\"]]): Visual variant\n            kwargs (Any): Additional props to pass to the accordion component\n\n        Returns:\n            RLBuilder: Builder for the expander content\n        \"\"\"\n        value = self._new_widget_id(\"accordionitem\", title) if key is None else key\n        accordion = self.accordion(\n            key=key,\n            chevron=chevron,\n            chevron_icon_size=chevron_icon_size,\n            chevron_position=chevron_position,\n            chevron_size=chevron_size,\n            disable_chevron_rotation=disable_chevron_rotation,\n            radius=radius,\n            transition_duration=transition_duration,\n            variant=variant,\n            value=value if is_open else None,\n            **kwargs,\n        )\n        with accordion:\n            item = self.accordion_item(\n                label=title,\n                key=value,\n                disabled=disabled,\n                icon=icon,\n            )\n            return item\n\n    def _format_datetime(self, value: Any) -&gt; Optional[datetime.datetime]:\n        if isinstance(value, datetime.datetime):\n            return value\n        if isinstance(value, str):\n            return datetime.datetime.fromisoformat(value)\n        return None\n\n    def date_time_picker(\n        self,\n        label: str,\n        value: Optional[Union[datetime.datetime, str]] = None,\n        *,\n        clearable: Optional[bool] = None,\n        columns_to_scroll: Optional[int] = None,\n        description: Optional[str] = None,\n        disabled: Optional[bool] = None,\n        dropdown_type: Optional[Literal[\"modal\", \"popover\"]] = None,\n        error: Optional[str] = None,\n        first_day_of_week: Optional[Literal[0, 1, 2, 3, 4, 5, 6]] = None,\n        header_controls_order: Optional[list[Literal[\"level\", \"next\", \"previous\"]]] = None,\n        hide_outside_dates: Optional[bool] = None,\n        hide_weekdays: Optional[bool] = None,\n        highlight_today: Optional[bool] = None,\n        input_size: Optional[str] = None,\n        input_wrapper_order: Optional[list[str]] = None,\n        label_props: Optional[dict[str, Any]] = None,\n        label_separator: Optional[str] = None,\n        left_section: Optional[RouteLitElement] = None,\n        left_section_props: Optional[dict[str, Any]] = None,\n        left_section_width: Optional[str] = None,\n        level: Optional[Literal[\"month\", \"year\", \"decade\"]] = None,\n        locale: Optional[str] = None,\n        max_date: Optional[Union[datetime.datetime, str]] = None,\n        max_level: Optional[Literal[\"month\", \"year\", \"decade\"]] = None,\n        min_date: Optional[Union[datetime.datetime, str]] = None,\n        months_list_format: Optional[str] = None,\n        number_of_columns: Optional[int] = None,\n        next_label: Optional[str] = None,\n        next_icon: Optional[RouteLitElement] = None,\n        on_change: Optional[Callable[[datetime.datetime], None]] = None,\n        popover_props: Optional[dict[str, Any]] = None,\n        presets: Optional[list[dict[str, Any]]] = None,\n        previous_icon: Optional[RouteLitElement] = None,\n        previous_label: Optional[str] = None,\n        placeholder: Optional[str] = None,\n        radius: Optional[Union[str, int]] = None,\n        read_only: Optional[bool] = None,\n        required: Optional[bool] = None,\n        right_section: Optional[RouteLitElement] = None,\n        right_section_pointer_events: Optional[str] = None,\n        right_section_props: Optional[dict[str, Any]] = None,\n        right_section_width: Optional[str] = None,\n        size: Optional[str] = None,\n        sort_dates: Optional[bool] = None,\n        submit_button_props: Optional[dict[str, Any]] = None,\n        time_picker_props: Optional[dict[str, Any]] = None,\n        value_format: Optional[str] = None,\n        weekday_format: Optional[str] = None,\n        weekend_days: Optional[list[Literal[0, 1, 2, 3, 4, 5, 6]]] = None,\n        with_asterisk: Optional[bool] = None,\n        with_cell_spacing: Optional[bool] = None,\n        with_error_styles: Optional[bool] = None,\n        with_seconds: Optional[bool] = None,\n        with_week_numbers: Optional[bool] = None,\n        wrapper_props: Optional[dict[str, Any]] = None,\n        year_label_format: Optional[str] = None,\n        years_list_format: Optional[str] = None,\n        pointer: Optional[bool] = None,\n        key: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; Optional[datetime.datetime]:\n        \"\"\"\n        Date-time picker input with calendar and time selection.\n\n        Args:\n            label (str): Field label.\n            value (Optional[Union[datetime.datetime, str]]): Current value.\n            clearable (Optional[bool]): Show clear button.\n            columns_to_scroll (Optional[int]): Number of months to scroll.\n            description (Optional[str]): Helper text under the label.\n            disabled (Optional[bool]): Disable interaction.\n            dropdown_type (Optional[Literal[\"modal\", \"popover\"]]): Dropdown type.\n            error (Optional[str]): Error message.\n            first_day_of_week (Optional[Literal[0,1,2,3,4,5,6]]): First day of week.\n            header_controls_order (Optional[list[Literal[\"level\", \"next\", \"previous\"]]]): Header controls order.\n            hide_outside_dates (Optional[bool]): Hide outside month dates.\n            hide_weekdays (Optional[bool]): Hide weekday labels.\n            highlight_today (Optional[bool]): Highlight current date.\n            input_size (Optional[str]): Control size.\n            input_wrapper_order (Optional[list[str]]): Input wrapper parts order.\n            label_props (Optional[dict[str, Any]]): Label props.\n            label_separator (Optional[str]): Separator between date and time.\n            left_section (Optional[RouteLitElement]): Left adornment.\n            left_section_props (Optional[dict[str, Any]]): Left adornment props.\n            left_section_width (Optional[str]): Left adornment width.\n            level (Optional[Literal[\"month\", \"year\", \"decade\"]]): Initial calendar level.\n            locale (Optional[str]): Locale code.\n            max_date (Optional[Union[datetime.datetime, str]]): Max date.\n            max_level (Optional[Literal[\"month\", \"year\", \"decade\"]]): Max calendar level.\n            min_date (Optional[Union[datetime.datetime, str]]): Min date.\n            months_list_format (Optional[str]): Months list format.\n            number_of_columns (Optional[int]): Number of months displayed.\n            next_label (Optional[str]): Next button label.\n            next_icon (Optional[RouteLitElement]): Next button icon.\n            on_change (Optional[Callable[[datetime.datetime], None]]): Change handler.\n            popover_props (Optional[dict[str, Any]]): Popover props.\n            presets (Optional[list[dict[str, Any]]]): Presets configuration.\n            previous_icon (Optional[RouteLitElement]): Previous button icon.\n            previous_label (Optional[str]): Previous button label.\n            placeholder (Optional[str]): Input placeholder.\n            radius (Optional[Union[str, int]]): Corner radius.\n            read_only (Optional[bool]): Read-only state.\n            required (Optional[bool]): Mark as required.\n            right_section (Optional[RouteLitElement]): Right adornment.\n            right_section_pointer_events (Optional[str]): Pointer events for right section.\n            right_section_props (Optional[dict[str, Any]]): Right adornment props.\n            right_section_width (Optional[str]): Right adornment width.\n            size (Optional[str]): Control size.\n            sort_dates (Optional[bool]): Sort selected dates.\n            submit_button_props (Optional[dict[str, Any]]): Submit button props.\n            time_picker_props (Optional[dict[str, Any]]): Time picker props.\n            value_format (Optional[str]): Output value format.\n            weekday_format (Optional[str]): Weekday label format.\n            weekend_days (Optional[list[Literal[0,1,2,3,4,5,6]]]): Weekend days indices.\n            with_asterisk (Optional[bool]): Show required asterisk.\n            with_cell_spacing (Optional[bool]): Add spacing between cells.\n            with_error_styles (Optional[bool]): Apply error styles.\n            with_seconds (Optional[bool]): Include seconds selector.\n            with_week_numbers (Optional[bool]): Show week numbers.\n            wrapper_props (Optional[dict[str, Any]]): Wrapper props.\n            year_label_format (Optional[str]): Year label format.\n            years_list_format (Optional[str]): Years list format.\n            pointer (Optional[bool]): Use pointer cursor.\n            key (Optional[str]): Explicit element key.\n            kwargs: Additional props to set.\n\n        Returns:\n            Optional[datetime.datetime]: Current value.\n        \"\"\"\n        return cast(\n            Optional[datetime.datetime],\n            self._x_input(\n                \"datetimepicker\",\n                key or self._new_widget_id(\"datetimepicker\", label),\n                clearable=clearable,\n                columnsToScroll=columns_to_scroll,\n                description=description,\n                disabled=disabled,\n                dropdownType=dropdown_type,\n                error=error,\n                firstDayOfWeek=first_day_of_week,\n                headerControlsOrder=header_controls_order,\n                hideOutsideDates=hide_outside_dates,\n                hideWeekdays=hide_weekdays,\n                highlightToday=highlight_today,\n                inputSize=input_size,\n                inputWrapperOrder=input_wrapper_order,\n                label=label,\n                labelProps=label_props,\n                labelSeparator=label_separator,\n                value=value,\n                leftSection=left_section,\n                leftSectionProps=left_section_props,\n                leftSectionWidth=left_section_width,\n                level=level,\n                locale=locale,\n                maxDate=max_date,\n                maxLevel=max_level,\n                minDate=min_date,\n                monthsListFormat=months_list_format,\n                nextIcon=next_icon,\n                nextLabel=next_label,\n                numberOfColumns=number_of_columns,\n                on_change=on_change,\n                popoverProps=popover_props,\n                presets=presets,\n                previousIcon=previous_icon,\n                previousLabel=previous_label,\n                placeholder=placeholder,\n                radius=radius,\n                readOnly=read_only,\n                required=required,\n                rightSection=right_section,\n                rightSectionPointerEvents=right_section_pointer_events,\n                rightSectionProps=right_section_props,\n                rightSectionWidth=right_section_width,\n                rl_format_func=self._format_datetime,\n                size=size,\n                sortDates=sort_dates,\n                submitButtonProps=submit_button_props,\n                timePickerProps=time_picker_props,\n                valueFormat=value_format,\n                weekdayFormat=weekday_format,\n                weekendDays=weekend_days,\n                withAsterisk=with_asterisk,\n                withCellSpacing=with_cell_spacing,\n                withErrorStyles=with_error_styles,\n                withSeconds=with_seconds,\n                withWeekNumbers=with_week_numbers,\n                wrapperProps=wrapper_props,\n                yearLabelFormat=year_label_format,\n                yearsListFormat=years_list_format,\n                pointer=pointer,\n                **kwargs,\n            ),\n        )\n\n    def _format_date_picker(\n        self, value: Any\n    ) -&gt; Optional[Union[datetime.date, list[datetime.date], tuple[datetime.date, datetime.date]]]:\n        if isinstance(value, datetime.date):\n            return value\n        if isinstance(value, str):\n            return datetime.date.fromisoformat(value)\n        if isinstance(value, list):\n            return [datetime.date.fromisoformat(x) if isinstance(x, str) else x for x in value]\n        return None\n\n    def date_picker(\n        self,\n        label: str,\n        value: Optional[\n            Union[\n                datetime.date,\n                str,\n                list[str],\n                list[datetime.date],\n                tuple[str, str],\n                tuple[datetime.date, datetime.date],\n            ]\n        ] = None,\n        *,\n        allow_deselect: Optional[bool] = None,\n        allow_single_date_in_range: Optional[bool] = None,\n        aria_labels: Optional[dict] = None,\n        columns_to_scroll: Optional[int] = None,\n        decade_label_format: Optional[str] = None,\n        default_level: Optional[Literal[\"month\", \"year\", \"decade\"]] = None,\n        description: Optional[str] = None,\n        enable_keyboard_navigation: Optional[bool] = None,\n        first_day_of_week: Optional[Literal[0, 1, 2, 3, 4, 5, 6]] = None,\n        header_controls_order: Optional[list[Literal[\"level\", \"next\", \"previous\"]]] = None,\n        hide_outside_dates: Optional[bool] = None,\n        hide_weekdays: Optional[bool] = None,\n        highlight_today: Optional[bool] = None,\n        key: Optional[str] = None,\n        level: Optional[str] = None,\n        locale: Optional[str] = None,\n        max_date: Optional[Union[str, datetime.date]] = None,\n        max_level: Optional[str] = None,\n        min_date: Optional[Union[str, datetime.date]] = None,\n        month_label_format: Optional[str] = None,\n        months_list_format: Optional[str] = None,\n        next_icon: Optional[RouteLitElement] = None,\n        next_label: Optional[str] = None,\n        number_of_columns: Optional[int] = None,\n        on_change: Optional[\n            Callable[\n                [\n                    Union[\n                        datetime.date,\n                        list[datetime.date],\n                        tuple[datetime.date, datetime.date],\n                    ]\n                ],\n                None,\n            ]\n        ] = None,\n        presets: Optional[list] = None,\n        previous_icon: Optional[RouteLitElement] = None,\n        previous_label: Optional[str] = None,\n        size: Optional[str] = None,\n        type: Optional[Literal[\"default\", \"range\", \"multiple\"]] = None,  # noqa: A002\n        weekday_format: Optional[str] = None,\n        weekend_days: Optional[list[Literal[0, 1, 2, 3, 4, 5, 6]]] = None,\n        with_cell_spacing: Optional[bool] = None,\n        with_week_numbers: Optional[bool] = None,\n        year_label_format: Optional[str] = None,\n        years_list_format: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; Optional[Union[datetime.date, list[datetime.date], tuple[datetime.date, datetime.date]]]:\n        \"\"\"\n        Calendar date picker supporting single, range, and multiple modes.\n\n        Args:\n            label (str): Field label.\n            value (Optional[...]): Current value in the selected mode.\n            allow_deselect (Optional[bool]): Allow clearing selection.\n            allow_single_date_in_range (Optional[bool]): Allow single date in range mode.\n            aria_labels (Optional[dict]): ARIA labels.\n            columns_to_scroll (Optional[int]): Months to scroll.\n            decade_label_format (Optional[str]): Decade label format.\n            default_level (Optional[Literal[\"month\", \"year\", \"decade\"]]): Initial calendar level.\n            description (Optional[str]): Helper text under the label.\n            enable_keyboard_navigation (Optional[bool]): Enable keyboard navigation.\n            first_day_of_week (Optional[Literal[0,1,2,3,4,5,6]]): First day of week.\n            header_controls_order (Optional[list[...]]): Header controls order.\n            hide_outside_dates (Optional[bool]): Hide outside month dates.\n            hide_weekdays (Optional[bool]): Hide weekday labels.\n            highlight_today (Optional[bool]): Highlight current date.\n            key (Optional[str]): Explicit element key.\n            level (Optional[str]): Current level.\n            locale (Optional[str]): Locale code.\n            max_date (Optional[Union[str, datetime.date]]): Max date.\n            max_level (Optional[str]): Max level.\n            min_date (Optional[Union[str, datetime.date]]): Min date.\n            month_label_format (Optional[str]): Month label format.\n            months_list_format (Optional[str]): Months list format.\n            next_icon (Optional[RouteLitElement]): Next button icon.\n            next_label (Optional[str]): Next button label.\n            number_of_columns (Optional[int]): Months displayed.\n            on_change (Optional[Callable[[...], None]]): Change handler.\n            presets (Optional[list]): Preset ranges.\n            previous_icon (Optional[RouteLitElement]): Previous button icon.\n            previous_label (Optional[str]): Previous button label.\n            size (Optional[str]): Control size.\n            type (Optional[Literal[\"default\", \"range\", \"multiple\"]]): Picker mode.\n            weekday_format (Optional[str]): Weekday label format.\n            weekend_days (Optional[list[...]]): Weekend days indices.\n            with_cell_spacing (Optional[bool]): Add spacing between cells.\n            with_week_numbers (Optional[bool]): Show week numbers.\n            year_label_format (Optional[str]): Year label format.\n            years_list_format (Optional[str]): Years list format.\n            kwargs: Additional props to set.\n\n        Returns:\n            Optional[Union[datetime.date, list[datetime.date], tuple[datetime.date, datetime.date]]]: Current value.\n        \"\"\"\n        return cast(\n            Optional[\n                Union[\n                    datetime.date,\n                    list[datetime.date],\n                    tuple[datetime.date, datetime.date],\n                ]\n            ],\n            self._x_input(\n                \"datepicker\",\n                key or self._new_widget_id(\"datepicker\", label),\n                label=label,\n                description=description,\n                value=value,\n                allowDeselect=allow_deselect,\n                allowSingleDateInRange=allow_single_date_in_range,\n                ariaLabels=aria_labels,\n                columnsToScroll=columns_to_scroll,\n                decadeLabelFormat=decade_label_format,\n                defaultLevel=default_level,\n                enableKeyboardNavigation=enable_keyboard_navigation,\n                firstDayOfWeek=first_day_of_week,\n                headerControlsOrder=header_controls_order,\n                hideOutsideDates=hide_outside_dates,\n                hideWeekdays=hide_weekdays,\n                highlightToday=highlight_today,\n                level=level,\n                locale=locale,\n                maxDate=max_date,\n                maxLevel=max_level,\n                minDate=min_date,\n                monthLabelFormat=month_label_format,\n                monthsListFormat=months_list_format,\n                nextIcon=next_icon,\n                nextLabel=next_label,\n                numberOfColumns=number_of_columns,\n                onChange=on_change,\n                presets=presets,\n                previousIcon=previous_icon,\n                previousLabel=previous_label,\n                size=size,\n                type=type,\n                weekdayFormat=weekday_format,\n                weekendDays=weekend_days,\n                withCellSpacing=with_cell_spacing,\n                withWeekNumbers=with_week_numbers,\n                yearLabelFormat=year_label_format,\n                yearsListFormat=years_list_format,\n                rl_format_func=self._format_date_picker,\n                **kwargs,\n            ),\n        )\n\n    def date_picker_input(\n        self,\n        label: str,\n        value: Optional[\n            Union[\n                datetime.date,\n                str,\n                list[str],\n                list[datetime.date],\n                tuple[str, str],\n                tuple[datetime.date, datetime.date],\n            ]\n        ] = None,\n        *,\n        key: Optional[str] = None,\n        description: Optional[str] = None,\n        on_change: Optional[Callable[[Any], None]] = None,\n        allow_deselect: Optional[bool] = None,\n        allow_single_date_in_range: Optional[bool] = None,\n        aria_labels: Optional[dict] = None,\n        clear_button_props: Optional[dict] = None,\n        clearable: Optional[bool] = None,\n        close_on_change: Optional[bool] = None,\n        columns_to_scroll: Optional[int] = None,\n        decade_label_format: Optional[str] = None,\n        default_level: Optional[Literal[\"month\", \"year\", \"decade\"]] = None,\n        description_props: Optional[dict] = None,\n        disabled: Optional[bool] = None,\n        dropdown_type: Optional[Literal[\"modal\", \"popover\"]] = None,\n        enable_keyboard_navigation: Optional[bool] = None,\n        error: Optional[str] = None,\n        error_props: Optional[dict] = None,\n        first_day_of_week: Optional[Literal[0, 1, 2, 3, 4, 5, 6]] = None,\n        header_controls_order: Optional[list[Literal[\"level\", \"next\", \"previous\"]]] = None,\n        hide_outside_dates: Optional[bool] = None,\n        hide_weekdays: Optional[bool] = None,\n        highlight_today: Optional[bool] = None,\n        input_size: Optional[str] = None,\n        input_wrapper_order: Optional[list[Literal[\"input\", \"label\", \"description\", \"error\"]]] = None,\n        label_props: Optional[dict] = None,\n        label_separator: Optional[str] = None,\n        left_section: Optional[RouteLitElement] = None,\n        left_section_pointer_events: Optional[str] = None,\n        left_section_props: Optional[dict] = None,\n        left_section_width: Optional[str] = None,\n        level: Optional[Literal[\"month\", \"year\", \"decade\"]] = None,\n        locale: Optional[str] = None,\n        max_date: Optional[Union[str, datetime.date]] = None,\n        max_level: Optional[Literal[\"month\", \"year\", \"decade\"]] = None,\n        min_date: Optional[Union[str, datetime.date]] = None,\n        modal_props: Optional[dict] = None,\n        month_label_format: Optional[str] = None,\n        months_list_format: Optional[str] = None,\n        next_icon: Optional[RouteLitElement] = None,\n        next_label: Optional[str] = None,\n        number_of_columns: Optional[int] = None,\n        placeholder: Optional[str] = None,\n        pointer: Optional[bool] = None,\n        popover_props: Optional[dict] = None,\n        presets: Optional[list] = None,\n        previous_icon: Optional[RouteLitElement] = None,\n        previous_label: Optional[str] = None,\n        radius: Optional[Union[str, int]] = None,\n        read_only: Optional[bool] = None,\n        required: Optional[bool] = None,\n        right_section: Optional[RouteLitElement] = None,\n        right_section_pointer_events: Optional[str] = None,\n        right_section_props: Optional[dict] = None,\n        right_section_width: Optional[str] = None,\n        size: Optional[str] = None,\n        sort_dates: Optional[bool] = None,\n        type: Optional[str] = None,  # noqa: A002\n        value_format: Optional[str] = None,\n        weekday_format: Optional[str] = None,\n        weekend_days: Optional[list] = None,\n        with_asterisk: Optional[bool] = None,\n        with_cell_spacing: Optional[bool] = None,\n        with_error_styles: Optional[bool] = None,\n        with_week_numbers: Optional[bool] = None,\n        wrapper_props: Optional[dict] = None,\n        year_label_format: Optional[str] = None,\n        years_list_format: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; Optional[Union[datetime.date, list[datetime.date], tuple[datetime.date, datetime.date]]]:\n        \"\"\"\n        Text input with integrated date picker dropdown.\n\n        Args:\n            label (str): Field label.\n            value (Optional[...]): Current value in the selected mode.\n            key (Optional[str]): Explicit element key.\n            description (Optional[str]): Helper text.\n            on_change (Optional[Callable[[Any], None]]): Change handler.\n            allow_deselect (Optional[bool]): Allow clearing selection.\n            allow_single_date_in_range (Optional[bool]): Allow single date in range mode.\n            aria_labels (Optional[dict]): ARIA labels.\n            clear_button_props (Optional[dict]): Clear button props.\n            clearable (Optional[bool]): Enable clear button.\n            close_on_change (Optional[bool]): Close dropdown on change.\n            columns_to_scroll (Optional[int]): Months to scroll.\n            decade_label_format (Optional[str]): Decade label format.\n            default_level (Optional[Literal[\"month\", \"year\", \"decade\"]]): Initial calendar level.\n            description_props (Optional[dict]): Description props.\n            disabled (Optional[bool]): Disable interaction.\n            dropdown_type (Optional[Literal[\"modal\", \"popover\"]]): Dropdown type.\n            enable_keyboard_navigation (Optional[bool]): Enable keyboard navigation.\n            error (Optional[str]): Error message.\n            error_props (Optional[dict]): Error props.\n            first_day_of_week (Optional[Literal[0,1,2,3,4,5,6]]): First day of week.\n            header_controls_order (Optional[list[...]]): Header controls order.\n            hide_outside_dates (Optional[bool]): Hide outside month dates.\n            hide_weekdays (Optional[bool]): Hide weekday labels.\n            highlight_today (Optional[bool]): Highlight current date.\n            input_size (Optional[str]): Control size.\n            input_wrapper_order (Optional[list[Literal[\"input\",\"label\",\"description\",\"error\"]]]): Wrapper parts order.\n            label_props (Optional[dict]): Label props.\n            label_separator (Optional[str]): Separator for range values.\n            left_section (Optional[RouteLitElement]): Left adornment.\n            left_section_pointer_events (Optional[str]): Pointer events for left section.\n            left_section_props (Optional[dict]): Left adornment props.\n            left_section_width (Optional[str]): Left adornment width.\n            level (Optional[Literal[\"month\", \"year\", \"decade\"]]): Initial calendar level.\n            locale (Optional[str]): Locale code.\n            max_date (Optional[Union[str, datetime.date]]): Max date.\n            max_level (Optional[Literal[\"month\", \"year\", \"decade\"]]): Max calendar level.\n            min_date (Optional[Union[str, datetime.date]]): Min date.\n            modal_props (Optional[dict]): Modal props.\n            month_label_format (Optional[str]): Month label format.\n            months_list_format (Optional[str]): Months list format.\n            next_icon (Optional[RouteLitElement]): Next button icon.\n            next_label (Optional[str]): Next button label.\n            number_of_columns (Optional[int]): Months displayed.\n            placeholder (Optional[str]): Input placeholder.\n            pointer (Optional[bool]): Use pointer cursor.\n            popover_props (Optional[dict]): Popover props.\n            presets (Optional[list]): Preset ranges.\n            previous_icon (Optional[RouteLitElement]): Previous button icon.\n            previous_label (Optional[str]): Previous button label.\n            radius (Optional[Union[str, int]]): Corner radius.\n            read_only (Optional[bool]): Read-only state.\n            required (Optional[bool]): Mark as required.\n            right_section (Optional[RouteLitElement]): Right adornment.\n            right_section_pointer_events (Optional[str]): Pointer events for right section.\n            right_section_props (Optional[dict]): Right adornment props.\n            right_section_width (Optional[str]): Right adornment width.\n            size (Optional[str]): Control size.\n            sort_dates (Optional[bool]): Sort selected dates.\n            type (Optional[str]): Picker mode.\n            value_format (Optional[str]): Output value format.\n            weekday_format (Optional[str]): Weekday label format.\n            weekend_days (Optional[list]): Weekend days indices.\n            with_asterisk (Optional[bool]): Show required asterisk.\n            with_cell_spacing (Optional[bool]): Add spacing between cells.\n            with_error_styles (Optional[bool]): Apply error styles.\n            with_week_numbers (Optional[bool]): Show week numbers.\n            wrapper_props (Optional[dict]): Wrapper props.\n            year_label_format (Optional[str]): Year label format.\n            years_list_format (Optional[str]): Years list format.\n            kwargs: Additional props to set.\n\n        Returns:\n            Optional[Union[datetime.date, list[datetime.date], tuple[datetime.date, datetime.date]]]: Current value.\n        \"\"\"\n        return cast(\n            Optional[\n                Union[\n                    datetime.date,\n                    list[datetime.date],\n                    tuple[datetime.date, datetime.date],\n                ]\n            ],\n            self._x_input(\n                \"datepickerinput\",\n                key or self._new_widget_id(\"datepickerinput\", label),\n                label=label,\n                description=description,\n                value=value,\n                allowDeselect=allow_deselect,\n                allowSingleDateInRange=allow_single_date_in_range,\n                ariaLabels=aria_labels,\n                clearButtonProps=clear_button_props,\n                clearable=clearable,\n                closeOnChange=close_on_change,\n                columnsToScroll=columns_to_scroll,\n                decadeLabelFormat=decade_label_format,\n                defaultLevel=default_level,\n                descriptionProps=description_props,\n                disabled=disabled,\n                dropdownType=dropdown_type,\n                enableKeyboardNavigation=enable_keyboard_navigation,\n                error=error,\n                errorProps=error_props,\n                firstDayOfWeek=first_day_of_week,\n                headerControlsOrder=header_controls_order,\n                hideOutsideDates=hide_outside_dates,\n                hideWeekdays=hide_weekdays,\n                highlightToday=highlight_today,\n                inputSize=input_size,\n                inputWrapperOrder=input_wrapper_order,\n                labelProps=label_props,\n                labelSeparator=label_separator,\n                leftSection=left_section,\n                leftSectionPointerEvents=left_section_pointer_events,\n                leftSectionProps=left_section_props,\n                leftSectionWidth=left_section_width,\n                level=level,\n                locale=locale,\n                maxDate=max_date,\n                maxLevel=max_level,\n                minDate=min_date,\n                modalProps=modal_props,\n                monthLabelFormat=month_label_format,\n                monthsListFormat=months_list_format,\n                nextIcon=next_icon,\n                nextLabel=next_label,\n                numberOfColumns=number_of_columns,\n                on_change=on_change,\n                placeholder=placeholder,\n                pointer=pointer,\n                popoverProps=popover_props,\n                presets=presets,\n                previousIcon=previous_icon,\n                previousLabel=previous_label,\n                radius=radius,\n                readOnly=read_only,\n                required=required,\n                rightSection=right_section,\n                rightSectionPointerEvents=right_section_pointer_events,\n                rightSectionProps=right_section_props,\n                rightSectionWidth=right_section_width,\n                size=size,\n                sortDates=sort_dates,\n                type=type,\n                valueFormat=value_format,\n                weekdayFormat=weekday_format,\n                weekendDays=weekend_days,\n                withAsterisk=with_asterisk,\n                withCellSpacing=with_cell_spacing,\n                withErrorStyles=with_error_styles,\n                withWeekNumbers=with_week_numbers,\n                wrapperProps=wrapper_props,\n                yearLabelFormat=year_label_format,\n                yearsListFormat=years_list_format,\n                rl_format_func=self._format_date_picker,\n                **kwargs,\n            ),\n        )\n\n    def _format_time(self, value: Optional[Union[datetime.time, str]]) -&gt; Optional[datetime.time]:\n        if value is None:\n            return None\n        if isinstance(value, str):\n            return datetime.time.fromisoformat(value)\n        return value\n\n    def time_input(\n        self,\n        label: str,\n        value: Optional[Union[datetime.time, str]] = None,\n        *,\n        key: Optional[str] = None,\n        on_change: Optional[Callable[[Any], None]] = None,\n        description: Optional[Any] = None,\n        description_props: Optional[dict[str, Any]] = None,\n        disabled: Optional[bool] = None,\n        error: Optional[Any] = None,\n        error_props: Optional[dict[str, Any]] = None,\n        input_size: Optional[str] = None,\n        input_wrapper_order: Optional[list[str]] = None,\n        label_props: Optional[dict[str, Any]] = None,\n        left_section: Optional[Any] = None,\n        left_section_pointer_events: Optional[str] = None,\n        left_section_props: Optional[dict[str, Any]] = None,\n        left_section_width: Optional[Union[str, int]] = None,\n        max_time: Optional[str] = None,\n        min_time: Optional[str] = None,\n        pointer: Optional[bool] = None,\n        radius: Optional[Union[str, int]] = None,\n        required: Optional[bool] = None,\n        right_section: Optional[Any] = None,\n        right_section_pointer_events: Optional[str] = None,\n        right_section_props: Optional[dict[str, Any]] = None,\n        right_section_width: Optional[Union[str, int]] = None,\n        size: Optional[str] = None,\n        with_asterisk: Optional[bool] = None,\n        with_error_styles: Optional[bool] = None,\n        with_seconds: Optional[bool] = None,\n        wrapper_props: Optional[dict[str, Any]] = None,\n        **kwargs: Any,\n    ) -&gt; Optional[datetime.time]:\n        \"\"\"\n        Time input with support for parsing from string.\n\n        Args:\n            label (str): Field label.\n            value (Optional[Union[datetime.time, str]]): Current value.\n            key (Optional[str]): Explicit element key.\n            on_change (Optional[Callable[[Any], None]]): Change handler.\n            description (Optional[Any]): Contents of Input.Description component.\n            description_props (Optional[dict[str, Any]]): Props passed to Input.Description component.\n            disabled (Optional[bool]): Sets disabled attribute on input element.\n            error (Optional[Any]): Contents of Input.Error component.\n            error_props (Optional[dict[str, Any]]): Props passed to Input.Error component.\n            input_size (Optional[str]): Size attribute for input element.\n            input_wrapper_order (Optional[list[str]]): Controls order of elements.\n            label_props (Optional[dict[str, Any]]): Props passed to Input.Label component.\n            left_section (Optional[Any]): Content displayed on left side of input.\n            left_section_pointer_events (Optional[str]): Pointer events style for left section.\n            left_section_props (Optional[dict[str, Any]]): Props for left section element.\n            left_section_width (Optional[Union[str, int]]): Width of left section.\n            max_time (Optional[str]): Maximum possible time value.\n            min_time (Optional[str]): Minimum possible time value.\n            pointer (Optional[bool]): Whether input should have pointer cursor.\n            radius (Optional[Union[str, int]]): Border radius value.\n            required (Optional[bool]): Whether input is required.\n            right_section (Optional[Any]): Content displayed on right side of input.\n            right_section_pointer_events (Optional[str]): Pointer events style for right section.\n            right_section_props (Optional[dict[str, Any]]): Props for right section element.\n            right_section_width (Optional[Union[str, int]]): Width of right section.\n            size (Optional[str]): Controls input height and padding.\n            with_asterisk (Optional[bool]): Whether to show required asterisk.\n            with_error_styles (Optional[bool]): Whether to show error styling.\n            with_seconds (Optional[bool]): Whether to show seconds input.\n            wrapper_props (Optional[dict[str, Any]]): Props for root element.\n            kwargs: Additional props to set.\n\n        Returns:\n            Optional[datetime.time]: Current value.\n        \"\"\"\n        return cast(\n            Optional[datetime.time],\n            self._x_input(\n                \"timeinput\",\n                key=key or self._new_widget_id(\"timeinput\", label),\n                label=label,\n                value=value,\n                description=description,\n                descriptionProps=description_props,\n                disabled=disabled,\n                error=error,\n                errorProps=error_props,\n                inputSize=input_size,\n                inputWrapperOrder=input_wrapper_order,\n                labelProps=label_props,\n                leftSection=left_section,\n                leftSectionPointerEvents=left_section_pointer_events,\n                leftSectionProps=left_section_props,\n                leftSectionWidth=left_section_width,\n                maxTime=max_time,\n                minTime=min_time,\n                pointer=pointer,\n                radius=radius,\n                required=required,\n                rightSection=right_section,\n                rightSectionPointerEvents=right_section_pointer_events,\n                rightSectionProps=right_section_props,\n                rightSectionWidth=right_section_width,\n                size=size,\n                withAsterisk=with_asterisk,\n                withErrorStyles=with_error_styles,\n                withSeconds=with_seconds,\n                wrapperProps=wrapper_props,\n                rl_format_func=self._format_time,\n                on_change=on_change,\n                **kwargs,\n            ),\n        )\n\n    def time_picker(\n        self,\n        label: str,\n        value: Optional[Union[datetime.time, str]] = None,\n        *,\n        key: Optional[str] = None,\n        on_change: Optional[Callable[[Any], None]] = None,\n        am_pm_input_label: Optional[str] = None,\n        am_pm_labels: Optional[dict[str, str]] = None,\n        am_pm_select_props: Optional[dict[str, Any]] = None,\n        clear_button_props: Optional[dict[str, Any]] = None,\n        clearable: Optional[bool] = None,\n        description: Optional[Any] = None,\n        description_props: Optional[dict[str, Any]] = None,\n        disabled: Optional[bool] = None,\n        error: Optional[Any] = None,\n        error_props: Optional[dict[str, Any]] = None,\n        form: Optional[str] = None,\n        format: Optional[str] = None,  # noqa: A002\n        hidden_input_props: Optional[dict[str, Any]] = None,\n        hours_input_label: Optional[str] = None,\n        hours_input_props: Optional[dict[str, Any]] = None,\n        hours_step: Optional[int] = None,\n        input_size: Optional[str] = None,\n        input_wrapper_order: Optional[list[str]] = None,\n        label_props: Optional[dict[str, Any]] = None,\n        left_section: Optional[Any] = None,\n        left_section_pointer_events: Optional[str] = None,\n        left_section_props: Optional[dict[str, Any]] = None,\n        left_section_width: Optional[Union[str, int]] = None,\n        max: Optional[str] = None,  # noqa: A002\n        max_dropdown_content_height: Optional[int] = None,\n        min: Optional[str] = None,  # noqa: A002\n        minutes_input_label: Optional[str] = None,\n        minutes_input_props: Optional[dict[str, Any]] = None,\n        minutes_step: Optional[int] = None,\n        name: Optional[str] = None,\n        pointer: Optional[bool] = None,\n        popover_props: Optional[dict[str, Any]] = None,\n        presets: Optional[Any] = None,\n        radius: Optional[Union[str, int]] = None,\n        read_only: Optional[bool] = None,\n        required: Optional[bool] = None,\n        right_section: Optional[Any] = None,\n        right_section_pointer_events: Optional[str] = None,\n        right_section_props: Optional[dict[str, Any]] = None,\n        right_section_width: Optional[Union[str, int]] = None,\n        scroll_area_props: Optional[dict[str, Any]] = None,\n        seconds_input_label: Optional[str] = None,\n        seconds_input_props: Optional[dict[str, Any]] = None,\n        seconds_step: Optional[int] = None,\n        size: Optional[str] = None,\n        with_asterisk: Optional[bool] = None,\n        with_dropdown: Optional[bool] = None,\n        with_error_styles: Optional[bool] = None,\n        with_seconds: Optional[bool] = None,\n        wrapper_props: Optional[dict[str, Any]] = None,\n        **kwargs: Any,\n    ) -&gt; Optional[datetime.time]:\n        \"\"\"\n        Time picker with support for parsing from string.\n\n        Args:\n            label (str): Label text.\n            value (Optional[Union[datetime.time, str]]): Current value.\n            key (Optional[str]): Unique key for the widget.\n            on_change (Optional[Callable[[Any], None]]): Called when value changes.\n            am_pm_input_label (Optional[str]): aria-label of am/pm input.\n            am_pm_labels (Optional[dict[str, str]]): Labels used for am/pm values.\n            am_pm_select_props (Optional[dict[str, Any]]): Props for am/pm select.\n            clear_button_props (Optional[dict[str, Any]]): Props for clear button.\n            clearable (Optional[bool]): Whether clear button should be displayed.\n            description (Optional[Any]): Description content.\n            description_props (Optional[dict[str, Any]]): Props for description.\n            disabled (Optional[bool]): Whether component is disabled.\n            error (Optional[Any]): Error content.\n            error_props (Optional[dict[str, Any]]): Props for error.\n            form (Optional[str]): Form prop for hidden input.\n            format (Optional[str]): Time format ('12h' or '24h').\n            hidden_input_props (Optional[dict[str, Any]]): Props for hidden input.\n            hours_input_label (Optional[str]): aria-label of hours input.\n            hours_input_props (Optional[dict[str, Any]]): Props for hours input.\n            hours_step (Optional[int]): Hours increment/decrement step.\n            input_size (Optional[str]): Size attribute for input element.\n            input_wrapper_order (Optional[list[str]]): Order of elements.\n            label_props (Optional[dict[str, Any]]): Props for label.\n            left_section (Optional[Any]): Left section content.\n            left_section_pointer_events (Optional[str]): Left section pointer events.\n            left_section_props (Optional[dict[str, Any]]): Props for left section.\n            left_section_width (Optional[Union[str, int]]): Left section width.\n            max (Optional[str]): Max time value (hh:mm:ss).\n            max_dropdown_content_height (Optional[int]): Max dropdown height in px.\n            min (Optional[str]): Min time value (hh:mm:ss).\n            minutes_input_label (Optional[str]): aria-label of minutes input.\n            minutes_input_props (Optional[dict[str, Any]]): Props for minutes input.\n            minutes_step (Optional[int]): Minutes increment/decrement step.\n            name (Optional[str]): Name prop for hidden input.\n            pointer (Optional[bool]): Whether to show pointer cursor.\n            popover_props (Optional[dict[str, Any]]): Props for popover.\n            presets (Optional[Any]): Time presets for dropdown.\n            radius (Optional[Union[str, int]]): Border radius.\n            read_only (Optional[bool]): Whether value is read-only.\n            required (Optional[bool]): Whether field is required.\n            right_section (Optional[Any]): Right section content.\n            right_section_pointer_events (Optional[str]): Right section pointer events.\n            right_section_props (Optional[dict[str, Any]]): Props for right section.\n            right_section_width (Optional[Union[str, int]]): Right section width.\n            scroll_area_props (Optional[dict[str, Any]]): Props for scroll areas.\n            seconds_input_label (Optional[str]): aria-label of seconds input.\n            seconds_input_props (Optional[dict[str, Any]]): Props for seconds input.\n            seconds_step (Optional[int]): Seconds increment/decrement step.\n            size (Optional[str]): Controls input height and padding.\n            value (Optional[Union[datetime.time, str]]): Current value.\n            with_asterisk (Optional[bool]): Whether to show required asterisk.\n            with_dropdown (Optional[bool]): Whether to show dropdown.\n            with_error_styles (Optional[bool]): Whether to show error styling.\n            with_seconds (Optional[bool]): Whether to show seconds input.\n            wrapper_props (Optional[dict[str, Any]]): Props for root element.\n            kwargs: Additional props to set.\n\n        Returns:\n            Optional[datetime.time]: Current value.\n        \"\"\"\n        return cast(\n            Optional[datetime.time],\n            self._x_input(\n                \"timepicker\",\n                key=key or self._new_widget_id(\"timepicker\", label),\n                label=label,\n                value=value,\n                amPmInputLabel=am_pm_input_label,\n                amPmLabels=am_pm_labels,\n                amPmSelectProps=am_pm_select_props,\n                clearButtonProps=clear_button_props,\n                clearable=clearable,\n                description=description,\n                descriptionProps=description_props,\n                disabled=disabled,\n                error=error,\n                errorProps=error_props,\n                form=form,\n                format=format,\n                hiddenInputProps=hidden_input_props,\n                hoursInputLabel=hours_input_label,\n                hoursInputProps=hours_input_props,\n                hoursStep=hours_step,\n                inputSize=input_size,\n                inputWrapperOrder=input_wrapper_order,\n                labelProps=label_props,\n                leftSection=left_section,\n                leftSectionPointerEvents=left_section_pointer_events,\n                leftSectionProps=left_section_props,\n                leftSectionWidth=left_section_width,\n                max=max,\n                maxDropdownContentHeight=max_dropdown_content_height,\n                min=min,\n                minutesInputLabel=minutes_input_label,\n                minutesInputProps=minutes_input_props,\n                minutesStep=minutes_step,\n                name=name,\n                pointer=pointer,\n                popoverProps=popover_props,\n                presets=presets,\n                radius=radius,\n                readOnly=read_only,\n                required=required,\n                rightSection=right_section,\n                rightSectionPointerEvents=right_section_pointer_events,\n                rightSectionProps=right_section_props,\n                rightSectionWidth=right_section_width,\n                scrollAreaProps=scroll_area_props,\n                secondsInputLabel=seconds_input_label,\n                secondsInputProps=seconds_input_props,\n                secondsStep=seconds_step,\n                size=size,\n                withAsterisk=with_asterisk,\n                withDropdown=with_dropdown,\n                withErrorStyles=with_error_styles,\n                withSeconds=with_seconds,\n                wrapperProps=wrapper_props,\n                rl_format_func=self._format_time,\n                on_change=on_change,\n                **kwargs,\n            ),\n        )\n\n    def area_chart(\n        self,\n        data: list,\n        data_key: str,\n        series: list[dict[str, Any]],\n        *,\n        key: Optional[str] = None,\n        active_dot_props: Optional[dict[str, Any]] = None,\n        area_chart_props: Optional[dict[str, Any]] = None,\n        area_props: Optional[dict[str, Any]] = None,\n        connect_nulls: Optional[bool] = None,\n        curve_type: Optional[str] = None,\n        dot_props: Optional[dict[str, Any]] = None,\n        fill_opacity: float = 0.2,\n        grid_axis: Optional[str] = None,\n        grid_color: Optional[str] = None,\n        grid_props: Optional[dict[str, Any]] = None,\n        legend_props: Optional[dict[str, Any]] = None,\n        orientation: Optional[str] = None,\n        reference_lines: Optional[list[dict[str, Any]]] = None,\n        right_y_axis_label: Optional[str] = None,\n        right_y_axis_props: Optional[dict[str, Any]] = None,\n        split_colors: Optional[list[str]] = None,\n        split_offset: Optional[float] = None,\n        stroke_dasharray: Optional[Union[str, int]] = None,\n        stroke_width: Optional[int] = None,\n        text_color: Optional[str] = None,\n        tick_line: Optional[str] = None,\n        tooltip_animation_duration: int = 0,\n        tooltip_props: Optional[dict[str, Any]] = None,\n        type: Optional[str] = None,  # noqa: A002\n        unit: Optional[str] = None,\n        with_dots: Optional[bool] = None,\n        with_gradient: Optional[bool] = None,\n        with_legend: Optional[bool] = None,\n        with_point_labels: Optional[bool] = None,\n        with_right_y_axis: Optional[bool] = None,\n        with_tooltip: Optional[bool] = None,\n        with_x_axis: Optional[bool] = None,\n        with_y_axis: Optional[bool] = None,\n        x_axis_label: Optional[str] = None,\n        x_axis_props: Optional[dict[str, Any]] = None,\n        y_axis_label: Optional[str] = None,\n        y_axis_props: Optional[dict[str, Any]] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Area chart for time series or continuous data.\n\n        Args:\n            data (list): Dataset.\n            data_key (str): X-axis data key.\n            series (list[dict[str, Any]]): Series configuration.\n            key (Optional[str]): Explicit element key.\n            active_dot_props (Optional[dict[str, Any]]): Active dot props.\n            area_chart_props (Optional[dict[str, Any]]): Chart container props.\n            area_props (Optional[dict[str, Any]]): Area props.\n            connect_nulls (Optional[bool]): Connect across null values.\n            curve_type (Optional[str]): Curve interpolation type.\n            dot_props (Optional[dict[str, Any]]): Dot props.\n            fill_opacity (float): Fill opacity for area.\n            grid_axis (Optional[str]): Grid axis.\n            grid_color (Optional[str]): Grid color.\n            grid_props (Optional[dict[str, Any]]): Grid props.\n            legend_props (Optional[dict[str, Any]]): Legend props.\n            orientation (Optional[str]): Chart orientation.\n            reference_lines (Optional[list[dict[str, Any]]]): Reference lines.\n            right_y_axis_label (Optional[str]): Secondary Y axis label.\n            right_y_axis_props (Optional[dict[str, Any]]): Secondary Y axis props.\n            split_colors (Optional[list[str]]): Split area colors.\n            split_offset (Optional[float]): Split offset value.\n            stroke_dasharray (Optional[Union[str, int]]): Stroke dash pattern.\n            stroke_width (Optional[int]): Line width.\n            text_color (Optional[str]): Text color.\n            tick_line (Optional[str]): Tick line display.\n            tooltip_animation_duration (int): Tooltip animation duration.\n            tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n            type (Optional[str]): Chart type variant.\n            unit (Optional[str]): Unit suffix.\n            with_dots (Optional[bool]): Show dots.\n            with_gradient (Optional[bool]): Fill with gradient.\n            with_legend (Optional[bool]): Show legend.\n            with_point_labels (Optional[bool]): Show point labels.\n            with_right_y_axis (Optional[bool]): Enable right Y axis.\n            with_tooltip (Optional[bool]): Show tooltip.\n            with_x_axis (Optional[bool]): Show X axis.\n            with_y_axis (Optional[bool]): Show Y axis.\n            x_axis_label (Optional[str]): X axis label.\n            x_axis_props (Optional[dict[str, Any]]): X axis props.\n            y_axis_label (Optional[str]): Y axis label.\n            y_axis_props (Optional[dict[str, Any]]): Y axis props.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the area chart element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"areachart\",\n            key=key or self._new_text_id(\"areachart\"),\n            props={\n                \"data\": data,\n                \"dataKey\": data_key,\n                \"series\": series,\n                \"activeDotProps\": active_dot_props,\n                \"areaChartProps\": area_chart_props,\n                \"areaProps\": area_props,\n                \"connectNulls\": connect_nulls,\n                \"curveType\": curve_type,\n                \"dotProps\": dot_props,\n                \"fillOpacity\": fill_opacity,\n                \"gridAxis\": grid_axis,\n                \"gridColor\": grid_color,\n                \"gridProps\": grid_props,\n                \"legendProps\": legend_props,\n                \"orientation\": orientation,\n                \"referenceLines\": reference_lines,\n                \"rightYAxisLabel\": right_y_axis_label,\n                \"rightYAxisProps\": right_y_axis_props,\n                \"splitColors\": split_colors,\n                \"splitOffset\": split_offset,\n                \"strokeDasharray\": stroke_dasharray,\n                \"strokeWidth\": stroke_width,\n                \"textColor\": text_color,\n                \"tickLine\": tick_line,\n                \"tooltipAnimationDuration\": tooltip_animation_duration,\n                \"tooltipProps\": tooltip_props,\n                \"type\": type,\n                \"unit\": unit,\n                \"withDots\": with_dots,\n                \"withGradient\": with_gradient,\n                \"withLegend\": with_legend,\n                \"withPointLabels\": with_point_labels,\n                \"withRightYAxis\": with_right_y_axis,\n                \"withTooltip\": with_tooltip,\n                \"withXAxis\": with_x_axis,\n                \"withYAxis\": with_y_axis,\n                \"xAxisLabel\": x_axis_label,\n                \"xAxisProps\": x_axis_props,\n                \"yAxisLabel\": y_axis_label,\n                \"yAxisProps\": y_axis_props,\n                **kwargs,\n            },\n        )\n\n    def bar_chart(\n        self,\n        data: list,\n        data_key: str,\n        series: list[dict[str, Any]],\n        *,\n        bar_chart_props: Optional[dict[str, Any]] = None,\n        bar_label_color: Optional[str] = None,\n        bar_props: Optional[dict[str, Any]] = None,\n        cursor_fill: Optional[str] = None,\n        fill_opacity: Optional[float] = None,\n        get_bar_color: Optional[Callable[[float, dict[str, Any]], str]] = None,\n        grid_axis: Optional[Literal[\"none\", \"x\", \"y\", \"xy\"]] = None,\n        grid_color: Optional[str] = None,\n        grid_props: Optional[dict[str, Any]] = None,\n        key: Optional[str] = None,\n        legend_props: Optional[dict[str, Any]] = None,\n        max_bar_width: Optional[int] = None,\n        min_bar_size: Optional[int] = None,\n        orientation: Optional[Literal[\"horizontal\", \"vertical\"]] = None,\n        reference_lines: Optional[list[dict[str, Any]]] = None,\n        right_y_axis_label: Optional[str] = None,\n        right_y_axis_props: Optional[dict[str, Any]] = None,\n        stroke_dasharray: Optional[Union[str, int]] = None,\n        text_color: Optional[str] = None,\n        tick_line: Optional[Literal[\"none\", \"x\", \"y\", \"xy\"]] = None,\n        tooltip_animation_duration: Optional[int] = None,\n        tooltip_props: Optional[dict[str, Any]] = None,\n        type: Optional[str] = None,  # noqa: A002\n        unit: Optional[str] = None,\n        value_label_props: Optional[dict[str, Any]] = None,\n        with_bar_value_label: Optional[bool] = None,\n        with_legend: Optional[bool] = None,\n        with_right_y_axis: Optional[bool] = None,\n        with_tooltip: Optional[bool] = None,\n        with_x_axis: Optional[bool] = None,\n        with_y_axis: Optional[bool] = None,\n        x_axis_label: Optional[str] = None,\n        x_axis_props: Optional[dict[str, Any]] = None,\n        y_axis_label: Optional[str] = None,\n        y_axis_props: Optional[dict[str, Any]] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Bar chart for categorical or time series data.\n\n        Args:\n            data (list): Dataset.\n            data_key (str): X-axis data key.\n            series (list[dict[str, Any]]): Series configuration.\n            bar_chart_props (Optional[dict[str, Any]]): Chart container props.\n            bar_label_color (Optional[str]): Value label color.\n            bar_props (Optional[dict[str, Any]]): Bar props.\n            cursor_fill (Optional[str]): Cursor overlay color.\n            fill_opacity (Optional[float]): Bar fill opacity.\n            get_bar_color (Optional[Callable[[float, dict[str, Any]], str]]): Dynamic color callback.\n            grid_axis (Optional[Literal[\"none\",\"x\",\"y\",\"xy\"]]): Grid axis.\n            grid_color (Optional[str]): Grid color.\n            grid_props (Optional[dict[str, Any]]): Grid props.\n            key (Optional[str]): Explicit element key.\n            legend_props (Optional[dict[str, Any]]): Legend props.\n            max_bar_width (Optional[int]): Max bar width.\n            min_bar_size (Optional[int]): Min bar size.\n            orientation (Optional[Literal[\"horizontal\",\"vertical\"]]): Orientation.\n            reference_lines (Optional[list[dict[str, Any]]]): Reference lines.\n            right_y_axis_label (Optional[str]): Secondary Y axis label.\n            right_y_axis_props (Optional[dict[str, Any]]): Secondary Y axis props.\n            stroke_dasharray (Optional[Union[str, int]]): Border dash pattern.\n            text_color (Optional[str]): Text color.\n            tick_line (Optional[Literal[\"none\",\"x\",\"y\",\"xy\"]]): Tick line display.\n            tooltip_animation_duration (Optional[int]): Tooltip animation duration.\n            tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n            type (Optional[str]): Chart type variant.\n            unit (Optional[str]): Unit suffix.\n            value_label_props (Optional[dict[str, Any]]): Value label props.\n            with_bar_value_label (Optional[bool]): Show value labels above bars.\n            with_legend (Optional[bool]): Show legend.\n            with_right_y_axis (Optional[bool]): Enable right Y axis.\n            with_tooltip (Optional[bool]): Show tooltip.\n            with_x_axis (Optional[bool]): Show X axis.\n            with_y_axis (Optional[bool]): Show Y axis.\n            x_axis_label (Optional[str]): X axis label.\n            x_axis_props (Optional[dict[str, Any]]): X axis props.\n            y_axis_label (Optional[str]): Y axis label.\n            y_axis_props (Optional[dict[str, Any]]): Y axis props.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the bar chart element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"barchart\",\n            key=key or self._new_text_id(\"barchart\"),\n            props={\n                \"data\": data,\n                \"dataKey\": data_key,\n                \"series\": series,\n                \"barChartProps\": bar_chart_props,\n                \"barLabelColor\": bar_label_color,\n                \"barProps\": bar_props,\n                \"cursorFill\": cursor_fill,\n                \"fillOpacity\": fill_opacity,\n                \"getBarColor\": get_bar_color,\n                \"gridAxis\": grid_axis,\n                \"gridColor\": grid_color,\n                \"gridProps\": grid_props,\n                \"legendProps\": legend_props,\n                \"maxBarWidth\": max_bar_width,\n                \"minBarSize\": min_bar_size,\n                \"orientation\": orientation,\n                \"referenceLines\": reference_lines,\n                \"rightYAxisLabel\": right_y_axis_label,\n                \"rightYAxisProps\": right_y_axis_props,\n                \"strokeDasharray\": stroke_dasharray,\n                \"textColor\": text_color,\n                \"tickLine\": tick_line,\n                \"tooltipAnimationDuration\": tooltip_animation_duration,\n                \"tooltipProps\": tooltip_props,\n                \"type\": type,\n                \"unit\": unit,\n                \"valueLabelProps\": value_label_props,\n                \"withBarValueLabel\": with_bar_value_label,\n                \"withLegend\": with_legend,\n                \"withRightYAxis\": with_right_y_axis,\n                \"withTooltip\": with_tooltip,\n                \"withXAxis\": with_x_axis,\n                \"withYAxis\": with_y_axis,\n                \"xAxisLabel\": x_axis_label,\n                \"xAxisProps\": x_axis_props,\n                \"yAxisLabel\": y_axis_label,\n                \"yAxisProps\": y_axis_props,\n                **kwargs,\n            },\n        )\n\n    def line_chart(\n        self,\n        data: list,\n        data_key: str,\n        series: list[dict[str, Any]],\n        *,\n        key: Optional[str] = None,\n        active_dot_props: Optional[dict[str, Any]] = None,\n        connect_nulls: Optional[bool] = None,\n        curve_type: Optional[str] = None,\n        dot_props: Optional[dict[str, Any]] = None,\n        fill_opacity: Optional[float] = None,\n        gradient_stops: Optional[list[dict[str, Any]]] = None,\n        grid_axis: Optional[str] = None,\n        grid_color: Optional[str] = None,\n        grid_props: Optional[dict[str, Any]] = None,\n        legend_props: Optional[dict[str, Any]] = None,\n        line_chart_props: Optional[dict[str, Any]] = None,\n        line_props: Optional[dict[str, Any]] = None,\n        orientation: Optional[str] = None,\n        reference_lines: Optional[list[dict[str, Any]]] = None,\n        right_y_axis_label: Optional[str] = None,\n        right_y_axis_props: Optional[dict[str, Any]] = None,\n        stroke_dasharray: Optional[str] = None,\n        stroke_width: Optional[float] = None,\n        text_color: Optional[str] = None,\n        tick_line: Optional[str] = None,\n        tooltip_animation_duration: Optional[int] = None,\n        tooltip_props: Optional[dict[str, Any]] = None,\n        type: Optional[str] = None,  # noqa: A002\n        unit: Optional[str] = None,\n        with_dots: Optional[bool] = None,\n        with_legend: Optional[bool] = None,\n        with_point_labels: Optional[bool] = None,\n        with_right_y_axis: Optional[bool] = None,\n        with_tooltip: Optional[bool] = None,\n        with_x_axis: Optional[bool] = None,\n        with_y_axis: Optional[bool] = None,\n        x_axis_label: Optional[str] = None,\n        x_axis_props: Optional[dict[str, Any]] = None,\n        y_axis_label: Optional[str] = None,\n        y_axis_props: Optional[dict[str, Any]] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Line chart for continuous data.\n\n        Args:\n            data (list): Dataset.\n            data_key (str): X-axis data key.\n            series (list[dict[str, Any]]): Series configuration.\n            key (Optional[str]): Explicit element key.\n            active_dot_props (Optional[dict[str, Any]]): Active dot props.\n            connect_nulls (Optional[bool]): Connect across null values.\n            curve_type (Optional[str]): Curve interpolation type.\n            dot_props (Optional[dict[str, Any]]): Dot props.\n            fill_opacity (Optional[float]): Area fill opacity for gradients.\n            gradient_stops (Optional[list[dict[str, Any]]]): Gradient configuration.\n            grid_axis (Optional[str]): Grid axis.\n            grid_color (Optional[str]): Grid color.\n            grid_props (Optional[dict[str, Any]]): Grid props.\n            legend_props (Optional[dict[str, Any]]): Legend props.\n            line_chart_props (Optional[dict[str, Any]]): Chart container props.\n            line_props (Optional[dict[str, Any]]): Line props.\n            orientation (Optional[str]): Chart orientation.\n            reference_lines (Optional[list[dict[str, Any]]]): Reference lines.\n            right_y_axis_label (Optional[str]): Secondary Y axis label.\n            right_y_axis_props (Optional[dict[str, Any]]): Secondary Y axis props.\n            stroke_dasharray (Optional[str]): Line dash pattern.\n            stroke_width (Optional[float]): Line width.\n            text_color (Optional[str]): Text color.\n            tick_line (Optional[str]): Tick line display.\n            tooltip_animation_duration (Optional[int]): Tooltip animation duration.\n            tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n            type (Optional[str]): Chart type variant.\n            unit (Optional[str]): Unit suffix.\n            with_dots (Optional[bool]): Show dots.\n            with_legend (Optional[bool]): Show legend.\n            with_point_labels (Optional[bool]): Show point labels.\n            with_right_y_axis (Optional[bool]): Enable right Y axis.\n            with_tooltip (Optional[bool]): Show tooltip.\n            with_x_axis (Optional[bool]): Show X axis.\n            with_y_axis (Optional[bool]): Show Y axis.\n            x_axis_label (Optional[str]): X axis label.\n            x_axis_props (Optional[dict[str, Any]]): X axis props.\n            y_axis_label (Optional[str]): Y axis label.\n            y_axis_props (Optional[dict[str, Any]]): Y axis props.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the line chart element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"linechart\",\n            key=key or self._new_text_id(\"linechart\"),\n            props={\n                \"data\": data,\n                \"dataKey\": data_key,\n                \"series\": series,\n                \"activeDotProps\": active_dot_props,\n                \"connectNulls\": connect_nulls,\n                \"curveType\": curve_type,\n                \"dotProps\": dot_props,\n                \"fillOpacity\": fill_opacity,\n                \"gradientStops\": gradient_stops,\n                \"gridAxis\": grid_axis,\n                \"gridColor\": grid_color,\n                \"gridProps\": grid_props,\n                \"legendProps\": legend_props,\n                \"lineChartProps\": line_chart_props,\n                \"lineProps\": line_props,\n                \"orientation\": orientation,\n                \"referenceLines\": reference_lines,\n                \"rightYAxisLabel\": right_y_axis_label,\n                \"rightYAxisProps\": right_y_axis_props,\n                \"strokeDasharray\": stroke_dasharray,\n                \"strokeWidth\": stroke_width,\n                \"textColor\": text_color,\n                \"tickLine\": tick_line,\n                \"tooltipAnimationDuration\": tooltip_animation_duration,\n                \"tooltipProps\": tooltip_props,\n                \"type\": type,\n                \"unit\": unit,\n                \"withDots\": with_dots,\n                \"withLegend\": with_legend,\n                \"withPointLabels\": with_point_labels,\n                \"withRightYAxis\": with_right_y_axis,\n                \"withTooltip\": with_tooltip,\n                \"withXAxis\": with_x_axis,\n                \"withYAxis\": with_y_axis,\n                \"xAxisLabel\": x_axis_label,\n                \"xAxisProps\": x_axis_props,\n                \"yAxisLabel\": y_axis_label,\n                \"yAxisProps\": y_axis_props,\n                **kwargs,\n            },\n        )\n\n    def composite_chart(\n        self,\n        data: list,\n        data_key: str,\n        series: list[dict[str, Any]],\n        *,\n        key: Optional[str] = None,\n        active_dot_props: Optional[dict[str, Any]] = None,\n        area_props: Optional[dict[str, Any]] = None,\n        bar_props: Optional[dict[str, Any]] = None,\n        children: Optional[Any] = None,\n        composed_chart_props: Optional[dict[str, Any]] = None,\n        connect_nulls: Optional[bool] = None,\n        curve_type: Optional[str] = None,\n        dot_props: Optional[dict[str, Any]] = None,\n        grid_axis: Optional[str] = None,\n        grid_color: Optional[str] = None,\n        grid_props: Optional[dict[str, Any]] = None,\n        legend_props: Optional[dict[str, Any]] = None,\n        line_props: Optional[dict[str, Any]] = None,\n        max_bar_width: Optional[int] = None,\n        min_bar_size: Optional[int] = None,\n        reference_lines: Optional[list[dict[str, Any]]] = None,\n        right_y_axis_label: Optional[str] = None,\n        right_y_axis_props: Optional[dict[str, Any]] = None,\n        stroke_dasharray: Optional[str] = None,\n        stroke_width: Optional[int] = None,\n        text_color: Optional[str] = None,\n        tick_line: Optional[str] = None,\n        tooltip_animation_duration: Optional[int] = None,\n        tooltip_props: Optional[dict[str, Any]] = None,\n        unit: Optional[str] = None,\n        with_bar_value_label: Optional[bool] = None,\n        with_dots: Optional[bool] = None,\n        with_legend: Optional[bool] = None,\n        with_point_labels: Optional[bool] = None,\n        with_right_y_axis: Optional[bool] = None,\n        with_tooltip: Optional[bool] = None,\n        with_x_axis: Optional[bool] = None,\n        with_y_axis: Optional[bool] = None,\n        x_axis_label: Optional[str] = None,\n        x_axis_props: Optional[dict[str, Any]] = None,\n        y_axis_label: Optional[str] = None,\n        y_axis_props: Optional[dict[str, Any]] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Composite chart that can combine bars, lines, and areas.\n\n        Args:\n            data (list): Dataset.\n            data_key (str): X-axis data key.\n            series (list[dict[str, Any]]): Series configuration.\n            key (Optional[str]): Explicit element key.\n            active_dot_props (Optional[dict[str, Any]]): Active dot props.\n            area_props (Optional[dict[str, Any]]): Area props.\n            bar_props (Optional[dict[str, Any]]): Bar props.\n            children (Optional[Any]): Extra child elements.\n            composed_chart_props (Optional[dict[str, Any]]): Chart container props.\n            connect_nulls (Optional[bool]): Connect across null values.\n            curve_type (Optional[str]): Curve interpolation type.\n            dot_props (Optional[dict[str, Any]]): Dot props.\n            grid_axis (Optional[str]): Grid axis.\n            grid_color (Optional[str]): Grid color.\n            grid_props (Optional[dict[str, Any]]): Grid props.\n            legend_props (Optional[dict[str, Any]]): Legend props.\n            line_props (Optional[dict[str, Any]]): Line props.\n            max_bar_width (Optional[int]): Max bar width.\n            min_bar_size (Optional[int]): Min bar size.\n            reference_lines (Optional[list[dict[str, Any]]]): Reference lines.\n            right_y_axis_label (Optional[str]): Secondary Y axis label.\n            right_y_axis_props (Optional[dict[str, Any]]): Secondary Y axis props.\n            stroke_dasharray (Optional[str]): Stroke dash pattern.\n            stroke_width (Optional[int]): Line width.\n            text_color (Optional[str]): Text color.\n            tick_line (Optional[str]): Tick line display.\n            tooltip_animation_duration (Optional[int]): Tooltip animation duration.\n            tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n            unit (Optional[str]): Unit suffix.\n            with_bar_value_label (Optional[bool]): Show value labels on bars.\n            with_dots (Optional[bool]): Show dots on lines.\n            with_legend (Optional[bool]): Show legend.\n            with_point_labels (Optional[bool]): Show point labels on lines.\n            with_right_y_axis (Optional[bool]): Enable right Y axis.\n            with_tooltip (Optional[bool]): Show tooltip.\n            with_x_axis (Optional[bool]): Show X axis.\n            with_y_axis (Optional[bool]): Show Y axis.\n            x_axis_label (Optional[str]): X axis label.\n            x_axis_props (Optional[dict[str, Any]]): X axis props.\n            y_axis_label (Optional[str]): Y axis label.\n            y_axis_props (Optional[dict[str, Any]]): Y axis props.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the composite chart element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"compositechart\",\n            key=key or self._new_text_id(\"compositechart\"),\n            props={\n                \"data\": data,\n                \"dataKey\": data_key,\n                \"series\": series,\n                \"activeDotProps\": active_dot_props,\n                \"areaProps\": area_props,\n                \"barProps\": bar_props,\n                \"children\": children,\n                \"composedChartProps\": composed_chart_props,\n                \"connectNulls\": connect_nulls,\n                \"curveType\": curve_type,\n                \"dotProps\": dot_props,\n                \"gridAxis\": grid_axis,\n                \"gridColor\": grid_color,\n                \"gridProps\": grid_props,\n                \"legendProps\": legend_props,\n                \"lineProps\": line_props,\n                \"maxBarWidth\": max_bar_width,\n                \"minBarSize\": min_bar_size,\n                \"referenceLines\": reference_lines,\n                \"rightYAxisLabel\": right_y_axis_label,\n                \"rightYAxisProps\": right_y_axis_props,\n                \"strokeDasharray\": stroke_dasharray,\n                \"strokeWidth\": stroke_width,\n                \"textColor\": text_color,\n                \"tickLine\": tick_line,\n                \"tooltipAnimationDuration\": tooltip_animation_duration,\n                \"tooltipProps\": tooltip_props,\n                \"unit\": unit,\n                \"withBarValueLabel\": with_bar_value_label,\n                \"withDots\": with_dots,\n                \"withLegend\": with_legend,\n                \"withPointLabels\": with_point_labels,\n                \"withRightYAxis\": with_right_y_axis,\n                \"withTooltip\": with_tooltip,\n                \"withXAxis\": with_x_axis,\n                \"withYAxis\": with_y_axis,\n                \"xAxisLabel\": x_axis_label,\n                \"xAxisProps\": x_axis_props,\n                \"yAxisLabel\": y_axis_label,\n                \"yAxisProps\": y_axis_props,\n                **kwargs,\n            },\n        )\n\n    def donut_chart(\n        self,\n        data: list,\n        *,\n        chart_label: Optional[Union[str, int]] = None,\n        end_angle: Optional[int] = None,\n        key: Optional[str] = None,\n        label_color: Optional[str] = None,\n        labels_type: Optional[str] = None,\n        padding_angle: Optional[int] = None,\n        pie_chart_props: Optional[dict[str, Any]] = None,\n        pie_props: Optional[dict[str, Any]] = None,\n        size: Optional[int] = None,\n        start_angle: Optional[int] = None,\n        stroke_color: Optional[str] = None,\n        stroke_width: Optional[int] = None,\n        thickness: Optional[int] = None,\n        tooltip_animation_duration: Optional[int] = None,\n        tooltip_data_source: Optional[Literal[\"all\", \"segment\"]] = None,\n        tooltip_props: Optional[dict[str, Any]] = None,\n        with_labels: Optional[bool] = None,\n        with_labels_line: Optional[bool] = None,\n        with_tooltip: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Donut chart to visualize parts of a whole.\n\n        Args:\n            data (list): Dataset.\n            chart_label (Optional[Union[str, int]]): Center label.\n            end_angle (Optional[int]): End angle.\n            key (Optional[str]): Explicit element key.\n            label_color (Optional[str]): Label color.\n            labels_type (Optional[str]): Label content type.\n            padding_angle (Optional[int]): Angle between segments.\n            pie_chart_props (Optional[dict[str, Any]]): Chart container props.\n            pie_props (Optional[dict[str, Any]]): Pie props.\n            size (Optional[int]): Chart size.\n            start_angle (Optional[int]): Start angle.\n            stroke_color (Optional[str]): Segment border color.\n            stroke_width (Optional[int]): Segment border width.\n            thickness (Optional[int]): Ring thickness.\n            tooltip_animation_duration (Optional[int]): Tooltip animation duration.\n            tooltip_data_source (Optional[Literal[\"all\",\"segment\"]]): Tooltip data source.\n            tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n            with_labels (Optional[bool]): Show labels.\n            with_labels_line (Optional[bool]): Show label connector lines.\n            with_tooltip (Optional[bool]): Show tooltip.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the donut chart element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"donutchart\",\n            key=key or self._new_text_id(\"donutchart\"),\n            props={\n                \"data\": data,\n                \"chartLabel\": chart_label,\n                \"endAngle\": end_angle,\n                \"labelColor\": label_color,\n                \"labelsType\": labels_type,\n                \"paddingAngle\": padding_angle,\n                \"pieChartProps\": pie_chart_props,\n                \"pieProps\": pie_props,\n                \"size\": size,\n                \"startAngle\": start_angle,\n                \"strokeColor\": stroke_color,\n                \"strokeWidth\": stroke_width,\n                \"thickness\": thickness,\n                \"tooltipAnimationDuration\": tooltip_animation_duration,\n                \"tooltipDataSource\": tooltip_data_source,\n                \"tooltipProps\": tooltip_props,\n                \"withLabels\": with_labels,\n                \"withLabelsLine\": with_labels_line,\n                \"withTooltip\": with_tooltip,\n                **kwargs,\n            },\n        )\n\n    def funnel_chart(\n        self,\n        data: list,\n        *,\n        funnel_chart_props: Optional[dict[str, Any]] = None,\n        funnel_props: Optional[dict[str, Any]] = None,\n        key: Optional[str] = None,\n        label_color: Optional[str] = None,\n        labels_position: Optional[Literal[\"left\", \"right\", \"inside\"]] = None,\n        size: Optional[int] = None,\n        stroke_color: Optional[str] = None,\n        stroke_width: Optional[int] = None,\n        tooltip_animation_duration: Optional[int] = None,\n        tooltip_data_source: Optional[Literal[\"all\", \"segment\"]] = None,\n        tooltip_props: Optional[dict[str, Any]] = None,\n        value_formatter: Optional[Any] = None,\n        with_labels: Optional[bool] = None,\n        with_tooltip: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Funnel chart for conversion or pipeline visualization.\n\n        Args:\n            data (list): Dataset.\n            funnel_chart_props (Optional[dict[str, Any]]): Chart container props.\n            funnel_props (Optional[dict[str, Any]]): Funnel props.\n            key (Optional[str]): Explicit element key.\n            label_color (Optional[str]): Label color.\n            labels_position (Optional[Literal[\"left\",\"right\",\"inside\"]]): Labels position.\n            size (Optional[int]): Chart size.\n            stroke_color (Optional[str]): Border color.\n            stroke_width (Optional[int]): Border width.\n            tooltip_animation_duration (Optional[int]): Tooltip animation duration.\n            tooltip_data_source (Optional[Literal[\"all\",\"segment\"]]): Tooltip data source.\n            tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n            value_formatter (Optional[Any]): Value formatter.\n            with_labels (Optional[bool]): Show labels.\n            with_tooltip (Optional[bool]): Show tooltip.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the funnel chart element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"funnelchart\",\n            key=key or self._new_text_id(\"funnelchart\"),\n            props={\n                \"data\": data,\n                \"funnelChartProps\": funnel_chart_props,\n                \"funnelProps\": funnel_props,\n                \"labelColor\": label_color,\n                \"labelsPosition\": labels_position,\n                \"size\": size,\n                \"strokeColor\": stroke_color,\n                \"strokeWidth\": stroke_width,\n                \"tooltipAnimationDuration\": tooltip_animation_duration,\n                \"tooltipDataSource\": tooltip_data_source,\n                \"tooltipProps\": tooltip_props,\n                \"valueFormatter\": value_formatter,\n                \"withLabels\": with_labels,\n                \"withTooltip\": with_tooltip,\n                **kwargs,\n            },\n        )\n\n    def pie_chart(\n        self,\n        data: list,\n        *,\n        end_angle: Optional[int] = None,\n        key: Optional[str] = None,\n        label_color: Optional[str] = None,\n        labels_position: Optional[Literal[\"outside\", \"inside\"]] = None,\n        labels_type: Optional[Literal[\"value\", \"percent\"]] = None,\n        padding_angle: Optional[int] = None,\n        pie_chart_props: Optional[dict[str, Any]] = None,\n        pie_props: Optional[dict[str, Any]] = None,\n        size: Optional[int] = None,\n        start_angle: Optional[int] = None,\n        stroke_color: Optional[str] = None,\n        stroke_width: Optional[int] = None,\n        tooltip_animation_duration: Optional[int] = None,\n        tooltip_data_source: Optional[Literal[\"all\", \"segment\"]] = None,\n        tooltip_props: Optional[dict[str, Any]] = None,\n        with_labels: Optional[bool] = None,\n        with_labels_line: Optional[bool] = None,\n        with_tooltip: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Pie chart to visualize parts of a whole.\n\n        Args:\n            data (list): Dataset.\n            end_angle (Optional[int]): End angle.\n            key (Optional[str]): Explicit element key.\n            label_color (Optional[str]): Label color.\n            labels_position (Optional[Literal[\"outside\",\"inside\"]]): Labels position.\n            labels_type (Optional[Literal[\"value\",\"percent\"]]): Label content.\n            padding_angle (Optional[int]): Angle between segments.\n            pie_chart_props (Optional[dict[str, Any]]): Chart container props.\n            pie_props (Optional[dict[str, Any]]): Pie props.\n            size (Optional[int]): Chart size.\n            start_angle (Optional[int]): Start angle.\n            stroke_color (Optional[str]): Border color.\n            stroke_width (Optional[int]): Border width.\n            tooltip_animation_duration (Optional[int]): Tooltip animation duration.\n            tooltip_data_source (Optional[Literal[\"all\",\"segment\"]]): Tooltip data source.\n            tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n            with_labels (Optional[bool]): Show labels.\n            with_labels_line (Optional[bool]): Show label connector lines.\n            with_tooltip (Optional[bool]): Show tooltip.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the pie chart element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"piechart\",\n            key=key or self._new_text_id(\"piechart\"),\n            props={\n                \"data\": data,\n                \"endAngle\": end_angle,\n                \"labelColor\": label_color,\n                \"labelsPosition\": labels_position,\n                \"labelsType\": labels_type,\n                \"paddingAngle\": padding_angle,\n                \"pieChartProps\": pie_chart_props,\n                \"pieProps\": pie_props,\n                \"size\": size,\n                \"startAngle\": start_angle,\n                \"strokeColor\": stroke_color,\n                \"strokeWidth\": stroke_width,\n                \"tooltipAnimationDuration\": tooltip_animation_duration,\n                \"tooltipDataSource\": tooltip_data_source,\n                \"tooltipProps\": tooltip_props,\n                \"withLabels\": with_labels,\n                \"withLabelsLine\": with_labels_line,\n                \"withTooltip\": with_tooltip,\n                **kwargs,\n            },\n        )\n\n    def radar_chart(\n        self,\n        data: list,\n        data_key: str,\n        series: list[dict[str, Any]],\n        *,\n        active_dot_props: Optional[dict[str, Any]] = None,\n        dot_props: Optional[dict[str, Any]] = None,\n        grid_color: Optional[str] = None,\n        key: Optional[str] = None,\n        legend_props: Optional[dict[str, Any]] = None,\n        polar_angle_axis_props: Optional[dict[str, Any]] = None,\n        polar_grid_props: Optional[dict[str, Any]] = None,\n        polar_radius_axis_props: Optional[dict[str, Any]] = None,\n        radar_chart_props: Optional[dict[str, Any]] = None,\n        radar_props: Optional[dict[str, Any]] = None,\n        text_color: Optional[str] = None,\n        tooltip_animation_duration: Optional[int] = None,\n        tooltip_props: Optional[dict[str, Any]] = None,\n        with_dots: Optional[bool] = None,\n        with_legend: Optional[bool] = None,\n        with_polar_angle_axis: Optional[bool] = None,\n        with_polar_grid: Optional[bool] = None,\n        with_polar_radius_axis: Optional[bool] = None,\n        with_tooltip: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Radar chart for multi-dimensional categorical data.\n\n        Args:\n            data (list): Dataset.\n            data_key (str): Key for category labels.\n            series (list[dict[str, Any]]): Series configuration.\n            active_dot_props (Optional[dict[str, Any]]): Active dot props.\n            dot_props (Optional[dict[str, Any]]): Dot props.\n            grid_color (Optional[str]): Grid color.\n            key (Optional[str]): Explicit element key.\n            legend_props (Optional[dict[str, Any]]): Legend props.\n            polar_angle_axis_props (Optional[dict[str, Any]]): Polar angle axis props.\n            polar_grid_props (Optional[dict[str, Any]]): Polar grid props.\n            polar_radius_axis_props (Optional[dict[str, Any]]): Polar radius axis props.\n            radar_chart_props (Optional[dict[str, Any]]): Chart container props.\n            radar_props (Optional[dict[str, Any]]): Radar area/line props.\n            text_color (Optional[str]): Text color.\n            tooltip_animation_duration (Optional[int]): Tooltip animation duration.\n            tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n            with_dots (Optional[bool]): Show dots.\n            with_legend (Optional[bool]): Show legend.\n            with_polar_angle_axis (Optional[bool]): Show angle axis.\n            with_polar_grid (Optional[bool]): Show polar grid.\n            with_polar_radius_axis (Optional[bool]): Show radius axis.\n            with_tooltip (Optional[bool]): Show tooltip.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the radar chart element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"radarchart\",\n            key=key or self._new_text_id(\"radarchart\"),\n            props={\n                \"activeDotProps\": active_dot_props,\n                \"data\": data,\n                \"dataKey\": data_key,\n                \"dotProps\": dot_props,\n                \"gridColor\": grid_color,\n                \"legendProps\": legend_props,\n                \"polarAngleAxisProps\": polar_angle_axis_props,\n                \"polarGridProps\": polar_grid_props,\n                \"polarRadiusAxisProps\": polar_radius_axis_props,\n                \"radarChartProps\": radar_chart_props,\n                \"radarProps\": radar_props,\n                \"series\": series,\n                \"textColor\": text_color,\n                \"tooltipAnimationDuration\": tooltip_animation_duration,\n                \"tooltipProps\": tooltip_props,\n                \"withDots\": with_dots,\n                \"withLegend\": with_legend,\n                \"withPolarAngleAxis\": with_polar_angle_axis,\n                \"withPolarGrid\": with_polar_grid,\n                \"withPolarRadiusAxis\": with_polar_radius_axis,\n                \"withTooltip\": with_tooltip,\n                **kwargs,\n            },\n        )\n\n    def scatter_chart(\n        self,\n        data: list,\n        data_key: dict[str, str],\n        *,\n        grid_axis: Optional[str] = None,\n        grid_color: Optional[str] = None,\n        grid_props: Optional[dict[str, Any]] = None,\n        labels: Optional[dict[str, str]] = None,\n        legend_props: Optional[dict[str, Any]] = None,\n        orientation: Optional[str] = None,\n        point_labels: Optional[str] = None,\n        reference_lines: Optional[list[dict[str, Any]]] = None,\n        right_y_axis_label: Optional[str] = None,\n        right_y_axis_props: Optional[dict[str, Any]] = None,\n        scatter_chart_props: Optional[dict[str, Any]] = None,\n        scatter_props: Optional[dict[str, Any]] = None,\n        stroke_dasharray: Optional[Union[str, int]] = None,\n        text_color: Optional[str] = None,\n        tick_line: Optional[str] = None,\n        tooltip_animation_duration: Optional[int] = None,\n        tooltip_props: Optional[dict[str, Any]] = None,\n        unit: Optional[dict[str, str]] = None,\n        value_formatter: Optional[Any] = None,\n        with_legend: Optional[bool] = None,\n        with_right_y_axis: Optional[bool] = None,\n        with_tooltip: Optional[bool] = None,\n        with_x_axis: Optional[bool] = None,\n        with_y_axis: Optional[bool] = None,\n        x_axis_label: Optional[str] = None,\n        x_axis_props: Optional[dict[str, Any]] = None,\n        y_axis_label: Optional[str] = None,\n        y_axis_props: Optional[dict[str, Any]] = None,\n        key: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Scatter chart for visualizing correlation between two variables.\n\n        Args:\n            data (list): Dataset.\n            data_key (dict[str, str]): Mapping for x/y keys.\n            grid_axis (Optional[str]): Grid axis.\n            grid_color (Optional[str]): Grid color.\n            grid_props (Optional[dict[str, Any]]): Grid props.\n            labels (Optional[dict[str, str]]): Axis labels.\n            legend_props (Optional[dict[str, Any]]): Legend props.\n            orientation (Optional[str]): Orientation.\n            point_labels (Optional[str]): Point labels key.\n            reference_lines (Optional[list[dict[str, Any]]]): Reference lines.\n            right_y_axis_label (Optional[str]): Secondary Y axis label.\n            right_y_axis_props (Optional[dict[str, Any]]): Secondary Y axis props.\n            scatter_chart_props (Optional[dict[str, Any]]): Chart container props.\n            scatter_props (Optional[dict[str, Any]]): Scatter props.\n            stroke_dasharray (Optional[Union[str, int]]): Stroke dash pattern.\n            text_color (Optional[str]): Text color.\n            tick_line (Optional[str]): Tick line display.\n            tooltip_animation_duration (Optional[int]): Tooltip animation duration.\n            tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n            unit (Optional[dict[str, str]]): Axis units.\n            value_formatter (Optional[Any]): Value formatter.\n            with_legend (Optional[bool]): Show legend.\n            with_right_y_axis (Optional[bool]): Enable right Y axis.\n            with_tooltip (Optional[bool]): Show tooltip.\n            with_x_axis (Optional[bool]): Show X axis.\n            with_y_axis (Optional[bool]): Show Y axis.\n            x_axis_label (Optional[str]): X axis label.\n            x_axis_props (Optional[dict[str, Any]]): X axis props.\n            y_axis_label (Optional[str]): Y axis label.\n            y_axis_props (Optional[dict[str, Any]]): Y axis props.\n            key (Optional[str]): Explicit element key.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the scatter chart element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"scatterchart\",\n            key=key or self._new_text_id(\"scatterchart\"),\n            props={\n                \"data\": data,\n                \"dataKey\": data_key,\n                \"gridAxis\": grid_axis,\n                \"gridColor\": grid_color,\n                \"gridProps\": grid_props,\n                \"labels\": labels,\n                \"legendProps\": legend_props,\n                \"orientation\": orientation,\n                \"pointLabels\": point_labels,\n                \"referenceLines\": reference_lines,\n                \"rightYAxisLabel\": right_y_axis_label,\n                \"rightYAxisProps\": right_y_axis_props,\n                \"scatterChartProps\": scatter_chart_props,\n                \"scatterProps\": scatter_props,\n                \"strokeDasharray\": stroke_dasharray,\n                \"textColor\": text_color,\n                \"tickLine\": tick_line,\n                \"tooltipAnimationDuration\": tooltip_animation_duration,\n                \"tooltipProps\": tooltip_props,\n                \"unit\": unit,\n                \"valueFormatter\": value_formatter,\n                \"withLegend\": with_legend,\n                \"withRightYAxis\": with_right_y_axis,\n                \"withTooltip\": with_tooltip,\n                \"withXAxis\": with_x_axis,\n                \"withYAxis\": with_y_axis,\n                \"xAxisLabel\": x_axis_label,\n                \"xAxisProps\": x_axis_props,\n                \"yAxisLabel\": y_axis_label,\n                \"yAxisProps\": y_axis_props,\n                **kwargs,\n            },\n        )\n\n    def bubble_chart(\n        self,\n        data: list[dict[str, Any]],\n        data_key: dict[str, str],\n        range: tuple[int, int],  # noqa: A002\n        *,\n        color: Optional[str] = None,\n        grid_color: Optional[str] = None,\n        key: Optional[str] = None,\n        label: Optional[str] = None,\n        scatter_props: Optional[dict[str, Any]] = None,\n        text_color: Optional[str] = None,\n        tooltip_props: Optional[dict[str, Any]] = None,\n        with_tooltip: Optional[bool] = None,\n        x_axis_props: Optional[dict[str, Any]] = None,\n        y_axis_props: Optional[dict[str, Any]] = None,\n        z_axis_props: Optional[dict[str, Any]] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Bubble chart for three-dimensional data (x, y, z-size).\n\n        Args:\n            data (list[dict[str, Any]]): Dataset with x, y, z.\n            data_key (dict[str, str]): Mapping for x/y/z keys.\n            range (tuple[int, int]): Bubble size range.\n            color (Optional[str]): Bubble color.\n            grid_color (Optional[str]): Grid color.\n            key (Optional[str]): Explicit element key.\n            label (Optional[str]): Series label.\n            scatter_props (Optional[dict[str, Any]]): Scatter props.\n            text_color (Optional[str]): Text color.\n            tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n            with_tooltip (Optional[bool]): Show tooltip.\n            x_axis_props (Optional[dict[str, Any]]): X axis props.\n            y_axis_props (Optional[dict[str, Any]]): Y axis props.\n            z_axis_props (Optional[dict[str, Any]]): Z axis props.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the bubble chart element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"bubblechart\",\n            key=key or self._new_text_id(\"bubblechart\"),\n            props={\n                \"data\": data,\n                \"dataKey\": data_key,\n                \"range\": range,\n                \"color\": color,\n                \"gridColor\": grid_color,\n                \"label\": label,\n                \"scatterProps\": scatter_props,\n                \"textColor\": text_color,\n                \"tooltipProps\": tooltip_props,\n                \"withTooltip\": with_tooltip,\n                \"xAxisProps\": x_axis_props,\n                \"yAxisProps\": y_axis_props,\n                \"zAxisProps\": z_axis_props,\n                **kwargs,\n            },\n        )\n\n    def radial_bar_chart(\n        self,\n        data: list[dict[str, Any]],\n        data_key: str,\n        *,\n        bar_size: Optional[int] = None,\n        empty_background_color: Optional[str] = None,\n        end_angle: Optional[int] = None,\n        key: Optional[str] = None,\n        legend_props: Optional[dict[str, Any]] = None,\n        radial_bar_chart_props: Optional[dict[str, Any]] = None,\n        radial_bar_props: Optional[dict[str, Any]] = None,\n        start_angle: Optional[int] = None,\n        tooltip_props: Optional[dict[str, Any]] = None,\n        with_background: Optional[bool] = None,\n        with_labels: Optional[bool] = None,\n        with_legend: Optional[bool] = None,\n        with_tooltip: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Radial bar chart for circular bar visualizations.\n\n        Args:\n            data (list[dict[str, Any]]): Dataset.\n            data_key (str): Value key.\n            bar_size (Optional[int]): Bar thickness.\n            empty_background_color (Optional[str]): Empty background color.\n            end_angle (Optional[int]): End angle.\n            key (Optional[str]): Explicit element key.\n            legend_props (Optional[dict[str, Any]]): Legend props.\n            radial_bar_chart_props (Optional[dict[str, Any]]): Chart container props.\n            radial_bar_props (Optional[dict[str, Any]]): Bar props.\n            start_angle (Optional[int]): Start angle.\n            tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n            with_background (Optional[bool]): Show circular background.\n            with_labels (Optional[bool]): Show labels.\n            with_legend (Optional[bool]): Show legend.\n            with_tooltip (Optional[bool]): Show tooltip.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the radial bar chart element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"radialbarchart\",\n            key=key or self._new_text_id(\"radialbarchart\"),\n            props={\n                \"data\": data,\n                \"dataKey\": data_key,\n                \"barSize\": bar_size,\n                \"emptyBackgroundColor\": empty_background_color,\n                \"endAngle\": end_angle,\n                \"legendProps\": legend_props,\n                \"radialBarChartProps\": radial_bar_chart_props,\n                \"radialBarProps\": radial_bar_props,\n                \"startAngle\": start_angle,\n                \"tooltipProps\": tooltip_props,\n                \"withBackground\": with_background,\n                \"withLabels\": with_labels,\n                \"withLegend\": with_legend,\n                \"withTooltip\": with_tooltip,\n                **kwargs,\n            },\n        )\n\n    def sparkline_chart(\n        self,\n        data: list[Union[int, float, None]],\n        *,\n        area_props: Optional[dict[str, Any]] = None,\n        color: Optional[str] = None,\n        connect_nulls: Optional[bool] = None,\n        curve_type: Optional[str] = None,\n        fill_opacity: Optional[float] = None,\n        key: Optional[str] = None,\n        stroke_width: Optional[int] = None,\n        trend_colors: Optional[dict[str, Any]] = None,\n        with_gradient: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Compact sparkline chart for trends.\n\n        Args:\n            data (list[Union[int, float, None]]): Dataset.\n            area_props (Optional[dict[str, Any]]): Area props.\n            color (Optional[str]): Line/area color.\n            connect_nulls (Optional[bool]): Connect across null values.\n            curve_type (Optional[str]): Curve interpolation type.\n            fill_opacity (Optional[float]): Area fill opacity.\n            key (Optional[str]): Explicit element key.\n            stroke_width (Optional[int]): Line width.\n            trend_colors (Optional[dict[str, Any]]): Trend color overrides.\n            with_gradient (Optional[bool]): Fill with gradient.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the sparkline element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"sparkline\",\n            key=key or self._new_text_id(\"sparkline\"),\n            props={\n                \"data\": data,\n                \"areaProps\": area_props,\n                \"color\": color,\n                \"connectNulls\": connect_nulls,\n                \"curveType\": curve_type,\n                \"fillOpacity\": fill_opacity,\n                \"strokeWidth\": stroke_width,\n                \"trendColors\": trend_colors,\n                \"withGradient\": with_gradient,\n                **kwargs,\n            },\n        )\n\n    def heatmap(\n        self,\n        data: dict[str, Union[int, float]],\n        *,\n        colors: Optional[list[str]] = None,\n        domain: Optional[tuple[Union[int, float], Union[int, float]]] = None,\n        end_date: Optional[Union[str, Any]] = None,\n        first_day_of_week: Optional[int] = None,\n        font_size: Optional[int] = None,\n        gap: Optional[int] = None,\n        get_rect_props: Optional[Any] = None,\n        get_tooltip_label: Optional[Any] = None,\n        key: Optional[str] = None,\n        month_labels: Optional[list[str]] = None,\n        months_labels_height: Optional[int] = None,\n        rect_radius: Optional[int] = None,\n        rect_size: Optional[int] = None,\n        start_date: Optional[Union[str, Any]] = None,\n        tooltip_props: Optional[dict[str, Any]] = None,\n        weekday_labels: Optional[list[str]] = None,\n        weekdays_labels_width: Optional[int] = None,\n        with_month_labels: Optional[bool] = None,\n        with_outside_dates: Optional[bool] = None,\n        with_tooltip: Optional[bool] = None,\n        with_weekday_labels: Optional[bool] = None,\n        **kwargs: Any,\n    ) -&gt; \"RLBuilder\":\n        \"\"\"\n        Calendar heatmap for visualizing value intensity over dates.\n\n        Args:\n            data (dict[str, Union[int, float]]): Mapping of ISO date -&gt; value.\n            colors (Optional[list[str]]): Color scale.\n            domain (Optional[tuple[Union[int, float], Union[int, float]]]): Min/max domain.\n            end_date (Optional[Union[str, Any]]): End date.\n            first_day_of_week (Optional[int]): First day of the week.\n            font_size (Optional[int]): Font size for labels.\n            gap (Optional[int]): Gap between cells.\n            get_rect_props (Optional[Any]): Custom rect props callback.\n            get_tooltip_label (Optional[Any]): Tooltip label callback.\n            key (Optional[str]): Explicit element key.\n            month_labels (Optional[list[str]]): Month labels.\n            months_labels_height (Optional[int]): Month labels height.\n            rect_radius (Optional[int]): Cell border radius.\n            rect_size (Optional[int]): Cell size.\n            start_date (Optional[Union[str, Any]]): Start date.\n            tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n            weekday_labels (Optional[list[str]]): Weekday labels.\n            weekdays_labels_width (Optional[int]): Weekday labels width.\n            with_month_labels (Optional[bool]): Show month labels.\n            with_outside_dates (Optional[bool]): Show dates outside range.\n            with_tooltip (Optional[bool]): Show tooltip.\n            with_weekday_labels (Optional[bool]): Show weekday labels.\n            kwargs: Additional props to set.\n\n        Returns:\n            RLBuilder: A nested builder scoped to the heatmap element.\n        \"\"\"\n        return self._create_builder_element(  # type: ignore[return-value]\n            name=\"heatmap\",\n            key=key or self._new_text_id(\"heatmap\"),\n            props={\n                \"data\": data,\n                \"colors\": colors,\n                \"domain\": domain,\n                \"endDate\": end_date,\n                \"firstDayOfWeek\": first_day_of_week,\n                \"fontSize\": font_size,\n                \"gap\": gap,\n                \"getRectProps\": get_rect_props,\n                \"getTooltipLabel\": get_tooltip_label,\n                \"monthLabels\": month_labels,\n                \"monthsLabelsHeight\": months_labels_height,\n                \"rectRadius\": rect_radius,\n                \"rectSize\": rect_size,\n                \"startDate\": start_date,\n                \"tooltipProps\": tooltip_props,\n                \"weekdayLabels\": weekday_labels,\n                \"weekdaysLabelsWidth\": weekdays_labels_width,\n                \"withMonthLabels\": with_month_labels,\n                \"withOutsideDates\": with_outside_dates,\n                \"withTooltip\": with_tooltip,\n                \"withWeekdayLabels\": with_weekday_labels,\n                **kwargs,\n            },\n        )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.sidebar","title":"<code>sidebar</code>  <code>property</code>","text":"<p>Get the sidebar builder.</p> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>The sidebar builder.</p> <p>Example:</p> <pre><code>with ui.sidebar:\n    ui.subheader(\"Sidebar\")\n\n# or\n\nui.sidebar.subheader(\"Sidebar\")\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.accordion","title":"<code>accordion(value=None, *, key=None, chevron=None, chevron_icon_size=None, chevron_position=None, chevron_size=None, disable_chevron_rotation=None, loop=None, multiple=None, on_change=None, order=None, radius=None, transition_duration=None, variant=None)</code>","text":"<p>Accordion component.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Optional[Union[list[str], str]]</code> <p>Controlled component value.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Unique key for the component.</p> <code>None</code> <code>chevron</code> <code>Optional[Any]</code> <p>Custom chevron icon.</p> <code>None</code> <code>chevron_icon_size</code> <code>Optional[Union[str, int]]</code> <p>Size of default chevron icon.</p> <code>None</code> <code>chevron_position</code> <code>Optional[str]</code> <p>Position of chevron relative to label.</p> <code>None</code> <code>chevron_size</code> <code>Optional[Union[str, int]]</code> <p>Size of chevron icon container.</p> <code>None</code> <code>disable_chevron_rotation</code> <code>Optional[bool]</code> <p>Disable chevron rotation.</p> <code>None</code> <code>loop</code> <code>Optional[bool]</code> <p>Loop through items with arrow keys.</p> <code>None</code> <code>multiple</code> <code>Optional[bool]</code> <p>Allow multiple items open at once.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[Any], None]]</code> <p>Called when value changes.</p> <code>None</code> <code>order</code> <code>Optional[Literal[2, 3, 4, 5, 6]]</code> <p>Heading order.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Border radius.</p> <code>None</code> <code>transition_duration</code> <code>Optional[int]</code> <p>Transition duration in ms.</p> <code>None</code> <code>variant</code> <code>Optional[Literal['default', 'filled', 'separated', 'contained', 'unstyled']]</code> <p>Visual variant.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the accordion.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def accordion(\n    self,\n    value: Optional[Union[list[str], str]] = None,\n    *,\n    key: Optional[str] = None,\n    chevron: Optional[Any] = None,\n    chevron_icon_size: Optional[Union[str, int]] = None,\n    chevron_position: Optional[str] = None,\n    chevron_size: Optional[Union[str, int]] = None,\n    disable_chevron_rotation: Optional[bool] = None,\n    loop: Optional[bool] = None,\n    multiple: Optional[bool] = None,\n    on_change: Optional[Callable[[Any], None]] = None,\n    order: Optional[Literal[2, 3, 4, 5, 6]] = None,\n    radius: Optional[Union[str, int]] = None,\n    transition_duration: Optional[int] = None,\n    variant: Optional[Literal[\"default\", \"filled\", \"separated\", \"contained\", \"unstyled\"]] = None,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Accordion component.\n\n    Args:\n        value (Optional[Union[list[str], str]]): Controlled component value.\n        key (Optional[str]): Unique key for the component.\n        chevron (Optional[Any]): Custom chevron icon.\n        chevron_icon_size (Optional[Union[str, int]]): Size of default chevron icon.\n        chevron_position (Optional[str]): Position of chevron relative to label.\n        chevron_size (Optional[Union[str, int]]): Size of chevron icon container.\n        disable_chevron_rotation (Optional[bool]): Disable chevron rotation.\n        loop (Optional[bool]): Loop through items with arrow keys.\n        multiple (Optional[bool]): Allow multiple items open at once.\n        on_change (Optional[Callable[[Any], None]]): Called when value changes.\n        order (Optional[Literal[2,3,4,5,6]]): Heading order.\n        radius (Optional[Union[str, int]]): Border radius.\n        transition_duration (Optional[int]): Transition duration in ms.\n        variant (Optional[Literal[\"default\", \"filled\", \"separated\", \"contained\", \"unstyled\"]]): Visual variant.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the accordion.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"accordion\",\n        key=key or self._new_text_id(\"accordion\"),\n        props={\n            \"defaultValue\": value,\n            \"chevron\": chevron,\n            \"chevronIconSize\": chevron_icon_size,\n            \"chevronPosition\": chevron_position,\n            \"chevronSize\": chevron_size,\n            \"disableChevronRotation\": disable_chevron_rotation,\n            \"loop\": loop,\n            \"multiple\": multiple,\n            \"onChange\": on_change,\n            \"order\": order,\n            \"radius\": radius,\n            \"transitionDuration\": transition_duration,\n            \"variant\": variant,\n        },\n        virtual=True,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.accordion_item","title":"<code>accordion_item(label, *, key=None, chevron=None, disabled=None, icon=None, **kwargs)</code>","text":"<p>Accordion item component.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def accordion_item(\n    self,\n    label: str,\n    *,\n    key: Optional[str] = None,\n    chevron: Optional[RouteLitElement] = None,\n    disabled: Optional[bool] = None,\n    icon: Optional[RouteLitElement] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Accordion item component.\n    \"\"\"\n    item_key = self._new_widget_id(\"accordionitem\", label) if key is None else key\n    accordion_item = self._create_builder_element(\n        name=\"accordionitem\",\n        key=item_key,\n        props={\n            \"value\": item_key,\n            **kwargs,\n        },\n        virtual=True,\n    )\n    with accordion_item:\n        control_key = self._new_widget_id(\"accordioncontrol\", label) if key is None else key + \"-control\"\n        self._create_element(\n            \"accordioncontrol\",\n            key=control_key,\n            props={\n                \"chevron\": chevron,\n                \"disabled\": disabled,\n                \"icon\": icon,\n                \"children\": label,\n            },\n            virtual=True,\n        )\n        panel_key = self._new_widget_id(\"accordionpanel\", label) if key is None else key + \"-panel\"\n        panel = self._create_builder_element(\n            name=\"accordionpanel\",\n            key=panel_key,\n            props={},\n            virtual=True,\n        )\n        return panel  # type: ignore[return-value]\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.action_icon","title":"<code>action_icon(name, *, key=None, on_click=None, rl_virtual=None, **kwargs)</code>","text":"<p>Icon-only button for compact actions.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Icon name.</p> required <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>on_click</code> <code>Optional[Callable[[], None]]</code> <p>Click handler.</p> <code>None</code> <code>rl_virtual</code> <code>Optional[bool]</code> <p>Whether the element is virtual.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Click result flag.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def action_icon(\n    self,\n    name: str,\n    *,\n    key: Optional[str] = None,\n    on_click: Optional[Callable[[], None]] = None,\n    rl_virtual: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; bool:\n    \"\"\"\n    Icon-only button for compact actions.\n\n    Args:\n        name (str): Icon name.\n        key (Optional[str]): Explicit element key.\n        on_click (Optional[Callable[[], None]]): Click handler.\n        rl_virtual (Optional[bool]): Whether the element is virtual.\n        kwargs: Additional props to set.\n\n    Returns:\n        bool: Click result flag.\n    \"\"\"\n    return self._x_button(\n        \"actionicon\",\n        key or self._new_widget_id(\"actionicon\", name),\n        name=name,\n        on_click=on_click,\n        rl_virtual=rl_virtual,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.action_icon_group","title":"<code>action_icon_group(border_width=None, orientation=None, **kwargs)</code>","text":"<p>Group multiple <code>action_icon</code> elements together.</p> <p>Parameters:</p> Name Type Description Default <code>border_width</code> <code>Optional[str]</code> <p>Border width between icons.</p> <code>None</code> <code>orientation</code> <code>Optional[Literal['horizontal', 'vertical']]</code> <p>Layout direction.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the group element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def action_icon_group(\n    self,\n    border_width: Optional[str] = None,\n    orientation: Optional[Literal[\"horizontal\", \"vertical\"]] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Group multiple `action_icon` elements together.\n\n    Args:\n        border_width (Optional[str]): Border width between icons.\n        orientation (Optional[Literal[\"horizontal\", \"vertical\"]]): Layout direction.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the group element.\n    \"\"\"\n    element = self._create_element(\n        key=self._new_text_id(\"actionicongroup\"),\n        name=\"actionicongroup\",\n        props={\n            \"borderWidth\": border_width,\n            \"orientation\": orientation,\n            **kwargs,\n        },\n        virtual=True,\n    )\n    return cast(RLBuilder, self._build_nested_builder(element))\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.action_icon_group_section","title":"<code>action_icon_group_section(text=None, rl_virtual=True, **kwargs)</code>","text":"<p>Section within an <code>action_icon_group</code>, usually for labels or extra content.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>Optional[str]</code> <p>Section text.</p> <code>None</code> <code>rl_virtual</code> <code>bool</code> <p>Whether the element is virtual.</p> <code>True</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the section element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def action_icon_group_section(\n    self,\n    text: Optional[str] = None,\n    rl_virtual: bool = True,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Section within an `action_icon_group`, usually for labels or extra content.\n\n    Args:\n        text (Optional[str]): Section text.\n        rl_virtual (bool): Whether the element is virtual.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the section element.\n    \"\"\"\n    element = self._create_element(\n        key=self._new_text_id(\"actionicongroupsection\"),\n        name=\"actionicongroupsection\",\n        props={\n            \"children\": text,\n            **kwargs,\n        },\n        virtual=rl_virtual,\n    )\n    return self._build_nested_builder(element)  # type: ignore[return-value]\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.affix","title":"<code>affix(key=None, **kwargs)</code>","text":"<p>Position an element at a fixed offset from viewport edges.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the affix element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def affix(\n    self,\n    key: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Position an element at a fixed offset from viewport edges.\n\n    Args:\n        key (Optional[str]): Explicit element key.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the affix element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"affix\",\n        key=key or self._new_text_id(\"affix\"),\n        props=kwargs,\n        virtual=True,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.alert","title":"<code>alert(title, *, auto_contrast=None, key=None, color=None, radius=None, icon=None, with_close_button=None, close_button_label=None, on_close=None, variant=None, text=None, **kwargs)</code>","text":"<p>Inline alert with optional icon and close button.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>Alert title.</p> required <code>auto_contrast</code> <code>Optional[bool]</code> <p>Improve contrast automatically.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>color</code> <code>Optional[str]</code> <p>Color variant.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Corner radius.</p> <code>None</code> <code>icon</code> <code>Optional[RouteLitElement]</code> <p>Leading icon.</p> <code>None</code> <code>with_close_button</code> <code>Optional[bool]</code> <p>Show close button.</p> <code>None</code> <code>close_button_label</code> <code>Optional[str]</code> <p>Accessible label for close button.</p> <code>None</code> <code>on_close</code> <code>Optional[Callable[[], bool]]</code> <p>Close handler.</p> <code>None</code> <code>variant</code> <code>Optional[Literal['default', 'filled', 'light', 'outline', 'white', 'transparent']]</code> <p>Visual variant.</p> <code>None</code> <code>text</code> <code>Optional[str]</code> <p>Alert content.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the alert element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def alert(\n    self,\n    title: str,\n    *,\n    auto_contrast: Optional[bool] = None,\n    key: Optional[str] = None,\n    color: Optional[str] = None,\n    radius: Optional[Union[str, int]] = None,\n    icon: Optional[RouteLitElement] = None,\n    with_close_button: Optional[bool] = None,\n    close_button_label: Optional[str] = None,\n    on_close: Optional[Callable[[], bool]] = None,\n    variant: Optional[Literal[\"default\", \"filled\", \"light\", \"outline\", \"white\", \"transparent\"]] = None,\n    text: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Inline alert with optional icon and close button.\n\n    Args:\n        title (str): Alert title.\n        auto_contrast (Optional[bool]): Improve contrast automatically.\n        key (Optional[str]): Explicit element key.\n        color (Optional[str]): Color variant.\n        radius (Optional[Union[str, int]]): Corner radius.\n        icon (Optional[RouteLitElement]): Leading icon.\n        with_close_button (Optional[bool]): Show close button.\n        close_button_label (Optional[str]): Accessible label for close button.\n        on_close (Optional[Callable[[], bool]]): Close handler.\n        variant (Optional[Literal[\"default\", \"filled\", \"light\", \"outline\", \"white\", \"transparent\"]]): Visual variant.\n        text (Optional[str]): Alert content.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the alert element.\n    \"\"\"\n    return self._x_dialog(  # type: ignore[return-value]\n        \"alert\",\n        key or self._new_widget_id(\"alert\", title),\n        autoContrast=auto_contrast,\n        closeButtonLabel=close_button_label,\n        color=color,\n        radius=radius,\n        icon=icon,\n        title=title,\n        on_close=on_close,\n        variant=variant,\n        withCloseButton=with_close_button,\n        children=text,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.anchor","title":"<code>anchor(href, text, *, c=None, gradient=None, inherit=None, inline=None, is_external=False, line_clamp=None, replace=False, size=None, truncate=None, underline=None, variant=None, **kwargs)</code>","text":"<p>Anchor link element that routes internally or opens external URLs.</p> <p>Parameters:</p> Name Type Description Default <code>href</code> <code>str</code> <p>Destination path or URL.</p> required <code>text</code> <code>str</code> <p>Link text.</p> required <code>c</code> <code>Optional[str]</code> <p>Text color.</p> <code>None</code> <code>gradient</code> <code>Optional[dict[str, Any]]</code> <p>Gradient style.</p> <code>None</code> <code>inherit</code> <code>Optional[bool]</code> <p>Inherit parent font styles.</p> <code>None</code> <code>inline</code> <code>Optional[bool]</code> <p>Render inline.</p> <code>None</code> <code>is_external</code> <code>bool</code> <p>Open in a new tab/window if true.</p> <code>False</code> <code>line_clamp</code> <code>Optional[int]</code> <p>Clamp to a number of lines.</p> <code>None</code> <code>replace</code> <code>bool</code> <p>Replace history entry when routing.</p> <code>False</code> <code>size</code> <code>Optional[str]</code> <p>Text size.</p> <code>None</code> <code>truncate</code> <code>Optional[str]</code> <p>Truncate overflow.</p> <code>None</code> <code>underline</code> <code>Optional[str]</code> <p>Underline style.</p> <code>None</code> <code>variant</code> <code>Optional[str]</code> <p>Visual variant.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RouteLitElement</code> <code>RouteLitElement</code> <p>Configured anchor element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def anchor(\n    self,\n    href: str,\n    text: str,\n    *,\n    c: Optional[str] = None,\n    gradient: Optional[dict[str, Any]] = None,\n    inherit: Optional[bool] = None,\n    inline: Optional[bool] = None,\n    is_external: bool = False,\n    line_clamp: Optional[int] = None,\n    replace: bool = False,\n    size: Optional[str] = None,\n    truncate: Optional[str] = None,\n    underline: Optional[str] = None,\n    variant: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; RouteLitElement:\n    \"\"\"\n    Anchor link element that routes internally or opens external URLs.\n\n    Args:\n        href (str): Destination path or URL.\n        text (str): Link text.\n        c (Optional[str]): Text color.\n        gradient (Optional[dict[str, Any]]): Gradient style.\n        inherit (Optional[bool]): Inherit parent font styles.\n        inline (Optional[bool]): Render inline.\n        is_external (bool): Open in a new tab/window if true.\n        line_clamp (Optional[int]): Clamp to a number of lines.\n        replace (bool): Replace history entry when routing.\n        size (Optional[str]): Text size.\n        truncate (Optional[str]): Truncate overflow.\n        underline (Optional[str]): Underline style.\n        variant (Optional[str]): Visual variant.\n        kwargs: Additional props to set.\n\n    Returns:\n        RouteLitElement: Configured anchor element.\n    \"\"\"\n    return self.link(\n        href,\n        text,\n        c=c,\n        rl_element_type=\"anchor\",\n        gradient=gradient,\n        is_external=is_external,\n        inherit=inherit,\n        inline=inline,\n        lineClamp=line_clamp,\n        replace=replace,\n        size=size,\n        truncate=truncate,\n        underline=underline,\n        variant=variant,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.area_chart","title":"<code>area_chart(data, data_key, series, *, key=None, active_dot_props=None, area_chart_props=None, area_props=None, connect_nulls=None, curve_type=None, dot_props=None, fill_opacity=0.2, grid_axis=None, grid_color=None, grid_props=None, legend_props=None, orientation=None, reference_lines=None, right_y_axis_label=None, right_y_axis_props=None, split_colors=None, split_offset=None, stroke_dasharray=None, stroke_width=None, text_color=None, tick_line=None, tooltip_animation_duration=0, tooltip_props=None, type=None, unit=None, with_dots=None, with_gradient=None, with_legend=None, with_point_labels=None, with_right_y_axis=None, with_tooltip=None, with_x_axis=None, with_y_axis=None, x_axis_label=None, x_axis_props=None, y_axis_label=None, y_axis_props=None, **kwargs)</code>","text":"<p>Area chart for time series or continuous data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list</code> <p>Dataset.</p> required <code>data_key</code> <code>str</code> <p>X-axis data key.</p> required <code>series</code> <code>list[dict[str, Any]]</code> <p>Series configuration.</p> required <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>active_dot_props</code> <code>Optional[dict[str, Any]]</code> <p>Active dot props.</p> <code>None</code> <code>area_chart_props</code> <code>Optional[dict[str, Any]]</code> <p>Chart container props.</p> <code>None</code> <code>area_props</code> <code>Optional[dict[str, Any]]</code> <p>Area props.</p> <code>None</code> <code>connect_nulls</code> <code>Optional[bool]</code> <p>Connect across null values.</p> <code>None</code> <code>curve_type</code> <code>Optional[str]</code> <p>Curve interpolation type.</p> <code>None</code> <code>dot_props</code> <code>Optional[dict[str, Any]]</code> <p>Dot props.</p> <code>None</code> <code>fill_opacity</code> <code>float</code> <p>Fill opacity for area.</p> <code>0.2</code> <code>grid_axis</code> <code>Optional[str]</code> <p>Grid axis.</p> <code>None</code> <code>grid_color</code> <code>Optional[str]</code> <p>Grid color.</p> <code>None</code> <code>grid_props</code> <code>Optional[dict[str, Any]]</code> <p>Grid props.</p> <code>None</code> <code>legend_props</code> <code>Optional[dict[str, Any]]</code> <p>Legend props.</p> <code>None</code> <code>orientation</code> <code>Optional[str]</code> <p>Chart orientation.</p> <code>None</code> <code>reference_lines</code> <code>Optional[list[dict[str, Any]]]</code> <p>Reference lines.</p> <code>None</code> <code>right_y_axis_label</code> <code>Optional[str]</code> <p>Secondary Y axis label.</p> <code>None</code> <code>right_y_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>Secondary Y axis props.</p> <code>None</code> <code>split_colors</code> <code>Optional[list[str]]</code> <p>Split area colors.</p> <code>None</code> <code>split_offset</code> <code>Optional[float]</code> <p>Split offset value.</p> <code>None</code> <code>stroke_dasharray</code> <code>Optional[Union[str, int]]</code> <p>Stroke dash pattern.</p> <code>None</code> <code>stroke_width</code> <code>Optional[int]</code> <p>Line width.</p> <code>None</code> <code>text_color</code> <code>Optional[str]</code> <p>Text color.</p> <code>None</code> <code>tick_line</code> <code>Optional[str]</code> <p>Tick line display.</p> <code>None</code> <code>tooltip_animation_duration</code> <code>int</code> <p>Tooltip animation duration.</p> <code>0</code> <code>tooltip_props</code> <code>Optional[dict[str, Any]]</code> <p>Tooltip props.</p> <code>None</code> <code>type</code> <code>Optional[str]</code> <p>Chart type variant.</p> <code>None</code> <code>unit</code> <code>Optional[str]</code> <p>Unit suffix.</p> <code>None</code> <code>with_dots</code> <code>Optional[bool]</code> <p>Show dots.</p> <code>None</code> <code>with_gradient</code> <code>Optional[bool]</code> <p>Fill with gradient.</p> <code>None</code> <code>with_legend</code> <code>Optional[bool]</code> <p>Show legend.</p> <code>None</code> <code>with_point_labels</code> <code>Optional[bool]</code> <p>Show point labels.</p> <code>None</code> <code>with_right_y_axis</code> <code>Optional[bool]</code> <p>Enable right Y axis.</p> <code>None</code> <code>with_tooltip</code> <code>Optional[bool]</code> <p>Show tooltip.</p> <code>None</code> <code>with_x_axis</code> <code>Optional[bool]</code> <p>Show X axis.</p> <code>None</code> <code>with_y_axis</code> <code>Optional[bool]</code> <p>Show Y axis.</p> <code>None</code> <code>x_axis_label</code> <code>Optional[str]</code> <p>X axis label.</p> <code>None</code> <code>x_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>X axis props.</p> <code>None</code> <code>y_axis_label</code> <code>Optional[str]</code> <p>Y axis label.</p> <code>None</code> <code>y_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>Y axis props.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the area chart element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def area_chart(\n    self,\n    data: list,\n    data_key: str,\n    series: list[dict[str, Any]],\n    *,\n    key: Optional[str] = None,\n    active_dot_props: Optional[dict[str, Any]] = None,\n    area_chart_props: Optional[dict[str, Any]] = None,\n    area_props: Optional[dict[str, Any]] = None,\n    connect_nulls: Optional[bool] = None,\n    curve_type: Optional[str] = None,\n    dot_props: Optional[dict[str, Any]] = None,\n    fill_opacity: float = 0.2,\n    grid_axis: Optional[str] = None,\n    grid_color: Optional[str] = None,\n    grid_props: Optional[dict[str, Any]] = None,\n    legend_props: Optional[dict[str, Any]] = None,\n    orientation: Optional[str] = None,\n    reference_lines: Optional[list[dict[str, Any]]] = None,\n    right_y_axis_label: Optional[str] = None,\n    right_y_axis_props: Optional[dict[str, Any]] = None,\n    split_colors: Optional[list[str]] = None,\n    split_offset: Optional[float] = None,\n    stroke_dasharray: Optional[Union[str, int]] = None,\n    stroke_width: Optional[int] = None,\n    text_color: Optional[str] = None,\n    tick_line: Optional[str] = None,\n    tooltip_animation_duration: int = 0,\n    tooltip_props: Optional[dict[str, Any]] = None,\n    type: Optional[str] = None,  # noqa: A002\n    unit: Optional[str] = None,\n    with_dots: Optional[bool] = None,\n    with_gradient: Optional[bool] = None,\n    with_legend: Optional[bool] = None,\n    with_point_labels: Optional[bool] = None,\n    with_right_y_axis: Optional[bool] = None,\n    with_tooltip: Optional[bool] = None,\n    with_x_axis: Optional[bool] = None,\n    with_y_axis: Optional[bool] = None,\n    x_axis_label: Optional[str] = None,\n    x_axis_props: Optional[dict[str, Any]] = None,\n    y_axis_label: Optional[str] = None,\n    y_axis_props: Optional[dict[str, Any]] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Area chart for time series or continuous data.\n\n    Args:\n        data (list): Dataset.\n        data_key (str): X-axis data key.\n        series (list[dict[str, Any]]): Series configuration.\n        key (Optional[str]): Explicit element key.\n        active_dot_props (Optional[dict[str, Any]]): Active dot props.\n        area_chart_props (Optional[dict[str, Any]]): Chart container props.\n        area_props (Optional[dict[str, Any]]): Area props.\n        connect_nulls (Optional[bool]): Connect across null values.\n        curve_type (Optional[str]): Curve interpolation type.\n        dot_props (Optional[dict[str, Any]]): Dot props.\n        fill_opacity (float): Fill opacity for area.\n        grid_axis (Optional[str]): Grid axis.\n        grid_color (Optional[str]): Grid color.\n        grid_props (Optional[dict[str, Any]]): Grid props.\n        legend_props (Optional[dict[str, Any]]): Legend props.\n        orientation (Optional[str]): Chart orientation.\n        reference_lines (Optional[list[dict[str, Any]]]): Reference lines.\n        right_y_axis_label (Optional[str]): Secondary Y axis label.\n        right_y_axis_props (Optional[dict[str, Any]]): Secondary Y axis props.\n        split_colors (Optional[list[str]]): Split area colors.\n        split_offset (Optional[float]): Split offset value.\n        stroke_dasharray (Optional[Union[str, int]]): Stroke dash pattern.\n        stroke_width (Optional[int]): Line width.\n        text_color (Optional[str]): Text color.\n        tick_line (Optional[str]): Tick line display.\n        tooltip_animation_duration (int): Tooltip animation duration.\n        tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n        type (Optional[str]): Chart type variant.\n        unit (Optional[str]): Unit suffix.\n        with_dots (Optional[bool]): Show dots.\n        with_gradient (Optional[bool]): Fill with gradient.\n        with_legend (Optional[bool]): Show legend.\n        with_point_labels (Optional[bool]): Show point labels.\n        with_right_y_axis (Optional[bool]): Enable right Y axis.\n        with_tooltip (Optional[bool]): Show tooltip.\n        with_x_axis (Optional[bool]): Show X axis.\n        with_y_axis (Optional[bool]): Show Y axis.\n        x_axis_label (Optional[str]): X axis label.\n        x_axis_props (Optional[dict[str, Any]]): X axis props.\n        y_axis_label (Optional[str]): Y axis label.\n        y_axis_props (Optional[dict[str, Any]]): Y axis props.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the area chart element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"areachart\",\n        key=key or self._new_text_id(\"areachart\"),\n        props={\n            \"data\": data,\n            \"dataKey\": data_key,\n            \"series\": series,\n            \"activeDotProps\": active_dot_props,\n            \"areaChartProps\": area_chart_props,\n            \"areaProps\": area_props,\n            \"connectNulls\": connect_nulls,\n            \"curveType\": curve_type,\n            \"dotProps\": dot_props,\n            \"fillOpacity\": fill_opacity,\n            \"gridAxis\": grid_axis,\n            \"gridColor\": grid_color,\n            \"gridProps\": grid_props,\n            \"legendProps\": legend_props,\n            \"orientation\": orientation,\n            \"referenceLines\": reference_lines,\n            \"rightYAxisLabel\": right_y_axis_label,\n            \"rightYAxisProps\": right_y_axis_props,\n            \"splitColors\": split_colors,\n            \"splitOffset\": split_offset,\n            \"strokeDasharray\": stroke_dasharray,\n            \"strokeWidth\": stroke_width,\n            \"textColor\": text_color,\n            \"tickLine\": tick_line,\n            \"tooltipAnimationDuration\": tooltip_animation_duration,\n            \"tooltipProps\": tooltip_props,\n            \"type\": type,\n            \"unit\": unit,\n            \"withDots\": with_dots,\n            \"withGradient\": with_gradient,\n            \"withLegend\": with_legend,\n            \"withPointLabels\": with_point_labels,\n            \"withRightYAxis\": with_right_y_axis,\n            \"withTooltip\": with_tooltip,\n            \"withXAxis\": with_x_axis,\n            \"withYAxis\": with_y_axis,\n            \"xAxisLabel\": x_axis_label,\n            \"xAxisProps\": x_axis_props,\n            \"yAxisLabel\": y_axis_label,\n            \"yAxisProps\": y_axis_props,\n            **kwargs,\n        },\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.autocomplete","title":"<code>autocomplete(label, data, *, auto_select_on_blur=None, clear_button_props=None, clearable=None, combobox_props=None, default_drowndown_open=None, description=None, disabled=None, dropdown_opened=None, error=None, key=None, left_section=None, left_section_props=None, left_section_width=None, limit=None, on_change=None, radius=None, required=None, right_section=None, right_section_props=None, right_section_width=None, size=None, value=None, with_asterisk=None, **kwargs)</code>","text":"<p>Autocomplete text input with suggestions dropdown.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>data</code> <code>list[Union[str, GroupOption]]</code> <p>Options and groups.</p> required <code>auto_select_on_blur</code> <code>Optional[bool]</code> <p>Auto select highlighted option on blur.</p> <code>None</code> <code>clear_button_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for clear button.</p> <code>None</code> <code>clearable</code> <code>Optional[bool]</code> <p>Enable clear button.</p> <code>None</code> <code>combobox_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for combobox.</p> <code>None</code> <code>default_drowndown_open</code> <code>Optional[bool]</code> <p>Open dropdown by default.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable interaction.</p> <code>None</code> <code>dropdown_opened</code> <code>Optional[bool]</code> <p>Control dropdown visibility.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>left_section</code> <code>Optional[RouteLitElement]</code> <p>Left adornment.</p> <code>None</code> <code>left_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Left adornment props.</p> <code>None</code> <code>left_section_width</code> <code>Optional[str]</code> <p>Left adornment width.</p> <code>None</code> <code>limit</code> <code>Optional[int]</code> <p>Max number of options shown.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[str], None]]</code> <p>Change handler.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Corner radius.</p> <code>None</code> <code>required</code> <code>Optional[bool]</code> <p>Mark as required.</p> <code>None</code> <code>right_section</code> <code>Optional[RouteLitElement]</code> <p>Right adornment.</p> <code>None</code> <code>right_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Right adornment props.</p> <code>None</code> <code>right_section_width</code> <code>Optional[str]</code> <p>Right adornment width.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>value</code> <code>Optional[str]</code> <p>Current value.</p> <code>None</code> <code>with_asterisk</code> <code>Optional[bool]</code> <p>Show required asterisk.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: Current value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def autocomplete(\n    self,\n    label: str,\n    data: list[Union[str, GroupOption]],\n    *,\n    auto_select_on_blur: Optional[bool] = None,\n    clear_button_props: Optional[dict[str, Any]] = None,\n    clearable: Optional[bool] = None,\n    combobox_props: Optional[dict[str, Any]] = None,\n    default_drowndown_open: Optional[bool] = None,\n    description: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    dropdown_opened: Optional[bool] = None,\n    error: Optional[str] = None,\n    key: Optional[str] = None,\n    left_section: Optional[RouteLitElement] = None,\n    left_section_props: Optional[dict[str, Any]] = None,\n    left_section_width: Optional[str] = None,\n    limit: Optional[int] = None,\n    on_change: Optional[Callable[[str], None]] = None,\n    radius: Optional[Union[str, int]] = None,\n    required: Optional[bool] = None,\n    right_section: Optional[RouteLitElement] = None,\n    right_section_props: Optional[dict[str, Any]] = None,\n    right_section_width: Optional[str] = None,\n    size: Optional[str] = None,\n    value: Optional[str] = None,\n    with_asterisk: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; Optional[str]:\n    \"\"\"\n    Autocomplete text input with suggestions dropdown.\n\n    Args:\n        label (str): Field label.\n        data (list[Union[str, GroupOption]]): Options and groups.\n        auto_select_on_blur (Optional[bool]): Auto select highlighted option on blur.\n        clear_button_props (Optional[dict[str, Any]]): Props for clear button.\n        clearable (Optional[bool]): Enable clear button.\n        combobox_props (Optional[dict[str, Any]]): Props for combobox.\n        default_drowndown_open (Optional[bool]): Open dropdown by default.\n        description (Optional[str]): Helper text under the label.\n        disabled (Optional[bool]): Disable interaction.\n        dropdown_opened (Optional[bool]): Control dropdown visibility.\n        error (Optional[str]): Error message.\n        key (Optional[str]): Explicit element key.\n        left_section (Optional[RouteLitElement]): Left adornment.\n        left_section_props (Optional[dict[str, Any]]): Left adornment props.\n        left_section_width (Optional[str]): Left adornment width.\n        limit (Optional[int]): Max number of options shown.\n        on_change (Optional[Callable[[str], None]]): Change handler.\n        radius (Optional[Union[str, int]]): Corner radius.\n        required (Optional[bool]): Mark as required.\n        right_section (Optional[RouteLitElement]): Right adornment.\n        right_section_props (Optional[dict[str, Any]]): Right adornment props.\n        right_section_width (Optional[str]): Right adornment width.\n        size (Optional[str]): Control size.\n        value (Optional[str]): Current value.\n        with_asterisk (Optional[bool]): Show required asterisk.\n        kwargs: Additional props to set.\n\n    Returns:\n        Optional[str]: Current value.\n    \"\"\"\n    return self._x_input(\n        \"autocomplete\",\n        key or self._new_widget_id(\"autocomplete\", label),\n        autoSelectOnBlur=auto_select_on_blur,\n        clearButtonProps=clear_button_props,\n        clearable=clearable,\n        comboboxProps=combobox_props,\n        data=data,\n        defaultDropdownOpen=default_drowndown_open,\n        description=description,\n        disabled=disabled,\n        dropdownOpened=dropdown_opened,\n        error=error,\n        label=label,\n        leftSection=left_section,\n        leftSectionProps=left_section_props,\n        leftSectionWidth=left_section_width,\n        limit=limit,\n        on_change=on_change,\n        radius=radius,\n        required=required,\n        rightSection=right_section,\n        rightSectionProps=right_section_props,\n        rightSectionWidth=right_section_width,\n        size=size,\n        value=value,\n        withAsterisk=with_asterisk,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.bar_chart","title":"<code>bar_chart(data, data_key, series, *, bar_chart_props=None, bar_label_color=None, bar_props=None, cursor_fill=None, fill_opacity=None, get_bar_color=None, grid_axis=None, grid_color=None, grid_props=None, key=None, legend_props=None, max_bar_width=None, min_bar_size=None, orientation=None, reference_lines=None, right_y_axis_label=None, right_y_axis_props=None, stroke_dasharray=None, text_color=None, tick_line=None, tooltip_animation_duration=None, tooltip_props=None, type=None, unit=None, value_label_props=None, with_bar_value_label=None, with_legend=None, with_right_y_axis=None, with_tooltip=None, with_x_axis=None, with_y_axis=None, x_axis_label=None, x_axis_props=None, y_axis_label=None, y_axis_props=None, **kwargs)</code>","text":"<p>Bar chart for categorical or time series data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list</code> <p>Dataset.</p> required <code>data_key</code> <code>str</code> <p>X-axis data key.</p> required <code>series</code> <code>list[dict[str, Any]]</code> <p>Series configuration.</p> required <code>bar_chart_props</code> <code>Optional[dict[str, Any]]</code> <p>Chart container props.</p> <code>None</code> <code>bar_label_color</code> <code>Optional[str]</code> <p>Value label color.</p> <code>None</code> <code>bar_props</code> <code>Optional[dict[str, Any]]</code> <p>Bar props.</p> <code>None</code> <code>cursor_fill</code> <code>Optional[str]</code> <p>Cursor overlay color.</p> <code>None</code> <code>fill_opacity</code> <code>Optional[float]</code> <p>Bar fill opacity.</p> <code>None</code> <code>get_bar_color</code> <code>Optional[Callable[[float, dict[str, Any]], str]]</code> <p>Dynamic color callback.</p> <code>None</code> <code>grid_axis</code> <code>Optional[Literal['none', 'x', 'y', 'xy']]</code> <p>Grid axis.</p> <code>None</code> <code>grid_color</code> <code>Optional[str]</code> <p>Grid color.</p> <code>None</code> <code>grid_props</code> <code>Optional[dict[str, Any]]</code> <p>Grid props.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>legend_props</code> <code>Optional[dict[str, Any]]</code> <p>Legend props.</p> <code>None</code> <code>max_bar_width</code> <code>Optional[int]</code> <p>Max bar width.</p> <code>None</code> <code>min_bar_size</code> <code>Optional[int]</code> <p>Min bar size.</p> <code>None</code> <code>orientation</code> <code>Optional[Literal['horizontal', 'vertical']]</code> <p>Orientation.</p> <code>None</code> <code>reference_lines</code> <code>Optional[list[dict[str, Any]]]</code> <p>Reference lines.</p> <code>None</code> <code>right_y_axis_label</code> <code>Optional[str]</code> <p>Secondary Y axis label.</p> <code>None</code> <code>right_y_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>Secondary Y axis props.</p> <code>None</code> <code>stroke_dasharray</code> <code>Optional[Union[str, int]]</code> <p>Border dash pattern.</p> <code>None</code> <code>text_color</code> <code>Optional[str]</code> <p>Text color.</p> <code>None</code> <code>tick_line</code> <code>Optional[Literal['none', 'x', 'y', 'xy']]</code> <p>Tick line display.</p> <code>None</code> <code>tooltip_animation_duration</code> <code>Optional[int]</code> <p>Tooltip animation duration.</p> <code>None</code> <code>tooltip_props</code> <code>Optional[dict[str, Any]]</code> <p>Tooltip props.</p> <code>None</code> <code>type</code> <code>Optional[str]</code> <p>Chart type variant.</p> <code>None</code> <code>unit</code> <code>Optional[str]</code> <p>Unit suffix.</p> <code>None</code> <code>value_label_props</code> <code>Optional[dict[str, Any]]</code> <p>Value label props.</p> <code>None</code> <code>with_bar_value_label</code> <code>Optional[bool]</code> <p>Show value labels above bars.</p> <code>None</code> <code>with_legend</code> <code>Optional[bool]</code> <p>Show legend.</p> <code>None</code> <code>with_right_y_axis</code> <code>Optional[bool]</code> <p>Enable right Y axis.</p> <code>None</code> <code>with_tooltip</code> <code>Optional[bool]</code> <p>Show tooltip.</p> <code>None</code> <code>with_x_axis</code> <code>Optional[bool]</code> <p>Show X axis.</p> <code>None</code> <code>with_y_axis</code> <code>Optional[bool]</code> <p>Show Y axis.</p> <code>None</code> <code>x_axis_label</code> <code>Optional[str]</code> <p>X axis label.</p> <code>None</code> <code>x_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>X axis props.</p> <code>None</code> <code>y_axis_label</code> <code>Optional[str]</code> <p>Y axis label.</p> <code>None</code> <code>y_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>Y axis props.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the bar chart element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def bar_chart(\n    self,\n    data: list,\n    data_key: str,\n    series: list[dict[str, Any]],\n    *,\n    bar_chart_props: Optional[dict[str, Any]] = None,\n    bar_label_color: Optional[str] = None,\n    bar_props: Optional[dict[str, Any]] = None,\n    cursor_fill: Optional[str] = None,\n    fill_opacity: Optional[float] = None,\n    get_bar_color: Optional[Callable[[float, dict[str, Any]], str]] = None,\n    grid_axis: Optional[Literal[\"none\", \"x\", \"y\", \"xy\"]] = None,\n    grid_color: Optional[str] = None,\n    grid_props: Optional[dict[str, Any]] = None,\n    key: Optional[str] = None,\n    legend_props: Optional[dict[str, Any]] = None,\n    max_bar_width: Optional[int] = None,\n    min_bar_size: Optional[int] = None,\n    orientation: Optional[Literal[\"horizontal\", \"vertical\"]] = None,\n    reference_lines: Optional[list[dict[str, Any]]] = None,\n    right_y_axis_label: Optional[str] = None,\n    right_y_axis_props: Optional[dict[str, Any]] = None,\n    stroke_dasharray: Optional[Union[str, int]] = None,\n    text_color: Optional[str] = None,\n    tick_line: Optional[Literal[\"none\", \"x\", \"y\", \"xy\"]] = None,\n    tooltip_animation_duration: Optional[int] = None,\n    tooltip_props: Optional[dict[str, Any]] = None,\n    type: Optional[str] = None,  # noqa: A002\n    unit: Optional[str] = None,\n    value_label_props: Optional[dict[str, Any]] = None,\n    with_bar_value_label: Optional[bool] = None,\n    with_legend: Optional[bool] = None,\n    with_right_y_axis: Optional[bool] = None,\n    with_tooltip: Optional[bool] = None,\n    with_x_axis: Optional[bool] = None,\n    with_y_axis: Optional[bool] = None,\n    x_axis_label: Optional[str] = None,\n    x_axis_props: Optional[dict[str, Any]] = None,\n    y_axis_label: Optional[str] = None,\n    y_axis_props: Optional[dict[str, Any]] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Bar chart for categorical or time series data.\n\n    Args:\n        data (list): Dataset.\n        data_key (str): X-axis data key.\n        series (list[dict[str, Any]]): Series configuration.\n        bar_chart_props (Optional[dict[str, Any]]): Chart container props.\n        bar_label_color (Optional[str]): Value label color.\n        bar_props (Optional[dict[str, Any]]): Bar props.\n        cursor_fill (Optional[str]): Cursor overlay color.\n        fill_opacity (Optional[float]): Bar fill opacity.\n        get_bar_color (Optional[Callable[[float, dict[str, Any]], str]]): Dynamic color callback.\n        grid_axis (Optional[Literal[\"none\",\"x\",\"y\",\"xy\"]]): Grid axis.\n        grid_color (Optional[str]): Grid color.\n        grid_props (Optional[dict[str, Any]]): Grid props.\n        key (Optional[str]): Explicit element key.\n        legend_props (Optional[dict[str, Any]]): Legend props.\n        max_bar_width (Optional[int]): Max bar width.\n        min_bar_size (Optional[int]): Min bar size.\n        orientation (Optional[Literal[\"horizontal\",\"vertical\"]]): Orientation.\n        reference_lines (Optional[list[dict[str, Any]]]): Reference lines.\n        right_y_axis_label (Optional[str]): Secondary Y axis label.\n        right_y_axis_props (Optional[dict[str, Any]]): Secondary Y axis props.\n        stroke_dasharray (Optional[Union[str, int]]): Border dash pattern.\n        text_color (Optional[str]): Text color.\n        tick_line (Optional[Literal[\"none\",\"x\",\"y\",\"xy\"]]): Tick line display.\n        tooltip_animation_duration (Optional[int]): Tooltip animation duration.\n        tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n        type (Optional[str]): Chart type variant.\n        unit (Optional[str]): Unit suffix.\n        value_label_props (Optional[dict[str, Any]]): Value label props.\n        with_bar_value_label (Optional[bool]): Show value labels above bars.\n        with_legend (Optional[bool]): Show legend.\n        with_right_y_axis (Optional[bool]): Enable right Y axis.\n        with_tooltip (Optional[bool]): Show tooltip.\n        with_x_axis (Optional[bool]): Show X axis.\n        with_y_axis (Optional[bool]): Show Y axis.\n        x_axis_label (Optional[str]): X axis label.\n        x_axis_props (Optional[dict[str, Any]]): X axis props.\n        y_axis_label (Optional[str]): Y axis label.\n        y_axis_props (Optional[dict[str, Any]]): Y axis props.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the bar chart element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"barchart\",\n        key=key or self._new_text_id(\"barchart\"),\n        props={\n            \"data\": data,\n            \"dataKey\": data_key,\n            \"series\": series,\n            \"barChartProps\": bar_chart_props,\n            \"barLabelColor\": bar_label_color,\n            \"barProps\": bar_props,\n            \"cursorFill\": cursor_fill,\n            \"fillOpacity\": fill_opacity,\n            \"getBarColor\": get_bar_color,\n            \"gridAxis\": grid_axis,\n            \"gridColor\": grid_color,\n            \"gridProps\": grid_props,\n            \"legendProps\": legend_props,\n            \"maxBarWidth\": max_bar_width,\n            \"minBarSize\": min_bar_size,\n            \"orientation\": orientation,\n            \"referenceLines\": reference_lines,\n            \"rightYAxisLabel\": right_y_axis_label,\n            \"rightYAxisProps\": right_y_axis_props,\n            \"strokeDasharray\": stroke_dasharray,\n            \"textColor\": text_color,\n            \"tickLine\": tick_line,\n            \"tooltipAnimationDuration\": tooltip_animation_duration,\n            \"tooltipProps\": tooltip_props,\n            \"type\": type,\n            \"unit\": unit,\n            \"valueLabelProps\": value_label_props,\n            \"withBarValueLabel\": with_bar_value_label,\n            \"withLegend\": with_legend,\n            \"withRightYAxis\": with_right_y_axis,\n            \"withTooltip\": with_tooltip,\n            \"withXAxis\": with_x_axis,\n            \"withYAxis\": with_y_axis,\n            \"xAxisLabel\": x_axis_label,\n            \"xAxisProps\": x_axis_props,\n            \"yAxisLabel\": y_axis_label,\n            \"yAxisProps\": y_axis_props,\n            **kwargs,\n        },\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.box","title":"<code>box(key=None, **kwargs)</code>","text":"<p>Generic layout container.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the box element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def box(\n    self,\n    key: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Generic layout container.\n\n    Args:\n        key (Optional[str]): Explicit element key.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the box element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"box\",\n        key=key or self._new_text_id(\"box\"),\n        props=kwargs,\n        virtual=True,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.bubble_chart","title":"<code>bubble_chart(data, data_key, range, *, color=None, grid_color=None, key=None, label=None, scatter_props=None, text_color=None, tooltip_props=None, with_tooltip=None, x_axis_props=None, y_axis_props=None, z_axis_props=None, **kwargs)</code>","text":"<p>Bubble chart for three-dimensional data (x, y, z-size).</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list[dict[str, Any]]</code> <p>Dataset with x, y, z.</p> required <code>data_key</code> <code>dict[str, str]</code> <p>Mapping for x/y/z keys.</p> required <code>range</code> <code>tuple[int, int]</code> <p>Bubble size range.</p> required <code>color</code> <code>Optional[str]</code> <p>Bubble color.</p> <code>None</code> <code>grid_color</code> <code>Optional[str]</code> <p>Grid color.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>label</code> <code>Optional[str]</code> <p>Series label.</p> <code>None</code> <code>scatter_props</code> <code>Optional[dict[str, Any]]</code> <p>Scatter props.</p> <code>None</code> <code>text_color</code> <code>Optional[str]</code> <p>Text color.</p> <code>None</code> <code>tooltip_props</code> <code>Optional[dict[str, Any]]</code> <p>Tooltip props.</p> <code>None</code> <code>with_tooltip</code> <code>Optional[bool]</code> <p>Show tooltip.</p> <code>None</code> <code>x_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>X axis props.</p> <code>None</code> <code>y_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>Y axis props.</p> <code>None</code> <code>z_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>Z axis props.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the bubble chart element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def bubble_chart(\n    self,\n    data: list[dict[str, Any]],\n    data_key: dict[str, str],\n    range: tuple[int, int],  # noqa: A002\n    *,\n    color: Optional[str] = None,\n    grid_color: Optional[str] = None,\n    key: Optional[str] = None,\n    label: Optional[str] = None,\n    scatter_props: Optional[dict[str, Any]] = None,\n    text_color: Optional[str] = None,\n    tooltip_props: Optional[dict[str, Any]] = None,\n    with_tooltip: Optional[bool] = None,\n    x_axis_props: Optional[dict[str, Any]] = None,\n    y_axis_props: Optional[dict[str, Any]] = None,\n    z_axis_props: Optional[dict[str, Any]] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Bubble chart for three-dimensional data (x, y, z-size).\n\n    Args:\n        data (list[dict[str, Any]]): Dataset with x, y, z.\n        data_key (dict[str, str]): Mapping for x/y/z keys.\n        range (tuple[int, int]): Bubble size range.\n        color (Optional[str]): Bubble color.\n        grid_color (Optional[str]): Grid color.\n        key (Optional[str]): Explicit element key.\n        label (Optional[str]): Series label.\n        scatter_props (Optional[dict[str, Any]]): Scatter props.\n        text_color (Optional[str]): Text color.\n        tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n        with_tooltip (Optional[bool]): Show tooltip.\n        x_axis_props (Optional[dict[str, Any]]): X axis props.\n        y_axis_props (Optional[dict[str, Any]]): Y axis props.\n        z_axis_props (Optional[dict[str, Any]]): Z axis props.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the bubble chart element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"bubblechart\",\n        key=key or self._new_text_id(\"bubblechart\"),\n        props={\n            \"data\": data,\n            \"dataKey\": data_key,\n            \"range\": range,\n            \"color\": color,\n            \"gridColor\": grid_color,\n            \"label\": label,\n            \"scatterProps\": scatter_props,\n            \"textColor\": text_color,\n            \"tooltipProps\": tooltip_props,\n            \"withTooltip\": with_tooltip,\n            \"xAxisProps\": x_axis_props,\n            \"yAxisProps\": y_axis_props,\n            \"zAxisProps\": z_axis_props,\n            **kwargs,\n        },\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.button","title":"<code>button(text, *, color=None, disabled=None, full_width=None, gradient=None, justify=None, left_section=None, left_section_props=None, left_section_width=None, loading=None, key=None, on_click=None, radius=None, right_section=None, right_section_props=None, right_section_width=None, rl_virtual=None, size=None, variant=None, **kwargs)</code>","text":"<p>Standard button component.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Button text.</p> required <code>color</code> <code>Optional[str]</code> <p>Accent color or variant color.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable interaction.</p> <code>None</code> <code>full_width</code> <code>Optional[bool]</code> <p>Make button take full width.</p> <code>None</code> <code>gradient</code> <code>Optional[dict[str, Any]]</code> <p>Gradient configuration for variant.</p> <code>None</code> <code>justify</code> <code>Optional[str]</code> <p>Content justification.</p> <code>None</code> <code>left_section</code> <code>Optional[RouteLitElement]</code> <p>Left adornment.</p> <code>None</code> <code>left_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Left adornment props.</p> <code>None</code> <code>left_section_width</code> <code>Optional[str]</code> <p>Left adornment width.</p> <code>None</code> <code>loading</code> <code>Optional[bool]</code> <p>Show loading state.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>on_click</code> <code>Optional[Callable[[], None]]</code> <p>Click handler.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Corner radius.</p> <code>None</code> <code>right_section</code> <code>Optional[RouteLitElement]</code> <p>Right adornment.</p> <code>None</code> <code>right_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Right adornment props.</p> <code>None</code> <code>right_section_width</code> <code>Optional[str]</code> <p>Right adornment width.</p> <code>None</code> <code>rl_virtual</code> <code>Optional[bool]</code> <p>Whether the element is virtual.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>variant</code> <code>Optional[str]</code> <p>Visual variant.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Click result flag.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def button(\n    self,\n    text: str,\n    *,\n    color: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    full_width: Optional[bool] = None,\n    gradient: Optional[dict[str, Any]] = None,\n    justify: Optional[str] = None,\n    left_section: Optional[RouteLitElement] = None,\n    left_section_props: Optional[dict[str, Any]] = None,\n    left_section_width: Optional[str] = None,\n    loading: Optional[bool] = None,\n    key: Optional[str] = None,\n    on_click: Optional[Callable[[], None]] = None,\n    radius: Optional[Union[str, int]] = None,\n    right_section: Optional[RouteLitElement] = None,\n    right_section_props: Optional[dict[str, Any]] = None,\n    right_section_width: Optional[str] = None,\n    rl_virtual: Optional[bool] = None,\n    size: Optional[str] = None,\n    variant: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; bool:\n    \"\"\"\n    Standard button component.\n\n    Args:\n        text (str): Button text.\n        color (Optional[str]): Accent color or variant color.\n        disabled (Optional[bool]): Disable interaction.\n        full_width (Optional[bool]): Make button take full width.\n        gradient (Optional[dict[str, Any]]): Gradient configuration for variant.\n        justify (Optional[str]): Content justification.\n        left_section (Optional[RouteLitElement]): Left adornment.\n        left_section_props (Optional[dict[str, Any]]): Left adornment props.\n        left_section_width (Optional[str]): Left adornment width.\n        loading (Optional[bool]): Show loading state.\n        key (Optional[str]): Explicit element key.\n        on_click (Optional[Callable[[], None]]): Click handler.\n        radius (Optional[Union[str, int]]): Corner radius.\n        right_section (Optional[RouteLitElement]): Right adornment.\n        right_section_props (Optional[dict[str, Any]]): Right adornment props.\n        right_section_width (Optional[str]): Right adornment width.\n        rl_virtual (Optional[bool]): Whether the element is virtual.\n        size (Optional[str]): Control size.\n        variant (Optional[str]): Visual variant.\n        kwargs: Additional props to set.\n\n    Returns:\n        bool: Click result flag.\n    \"\"\"\n    return self._x_button(\n        \"button\",\n        text,\n        on_click=on_click,\n        rl_virtual=rl_virtual,\n        color=color,\n        disabled=disabled,\n        fullWidth=full_width,\n        gradient=gradient,\n        justify=justify,\n        key=key or self._new_widget_id(\"button\", text),\n        leftSection=left_section,\n        leftSectionProps=left_section_props,\n        leftSectionWidth=left_section_width,\n        loading=loading,\n        radius=radius,\n        rightSection=right_section,\n        rightSectionProps=right_section_props,\n        rightSectionWidth=right_section_width,\n        size=size,\n        variant=variant,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.checkbox","title":"<code>checkbox(label, *, auto_contrast=None, checked=False, color=None, description=None, disabled=None, error=None, icon_color=None, key=None, label_position=None, name=None, on_change=None, radius=None, size=None, **kwargs)</code>","text":"<p>Boolean input rendered as a single checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Checkbox label.</p> required <code>auto_contrast</code> <code>Optional[bool]</code> <p>Improve contrast automatically.</p> <code>None</code> <code>checked</code> <code>bool</code> <p>Initial checked state.</p> <code>False</code> <code>color</code> <code>Optional[str]</code> <p>Accent color.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable input interaction.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>icon_color</code> <code>Optional[str]</code> <p>Color of the check icon.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>label_position</code> <code>Optional[Literal['left', 'right']]</code> <p>Label position.</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>Input name.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[bool], None]]</code> <p>Change handler.</p> <code>None</code> <code>radius</code> <code>Optional[Union[Literal['xs', 'sm', 'md', 'lg', 'xl'], int]]</code> <p>Corner radius.</p> <code>None</code> <code>size</code> <code>Optional[Literal['xs', 'sm', 'md', 'lg', 'xl']]</code> <p>Control size.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Current value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def checkbox(\n    self,\n    label: str,\n    *,\n    auto_contrast: Optional[bool] = None,\n    checked: bool = False,\n    color: Optional[str] = None,\n    description: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    error: Optional[str] = None,\n    icon_color: Optional[str] = None,\n    key: Optional[str] = None,\n    label_position: Optional[Literal[\"left\", \"right\"]] = None,\n    name: Optional[str] = None,\n    on_change: Optional[Callable[[bool], None]] = None,\n    radius: Optional[Union[Literal[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"], int]] = None,\n    size: Optional[Literal[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]] = None,\n    **kwargs: Any,\n) -&gt; bool:\n    \"\"\"\n    Boolean input rendered as a single checkbox.\n\n    Args:\n        label (str): Checkbox label.\n        auto_contrast (Optional[bool]): Improve contrast automatically.\n        checked (bool): Initial checked state.\n        color (Optional[str]): Accent color.\n        description (Optional[str]): Helper text under the label.\n        disabled (Optional[bool]): Disable input interaction.\n        error (Optional[str]): Error message.\n        icon_color (Optional[str]): Color of the check icon.\n        key (Optional[str]): Explicit element key.\n        label_position (Optional[Literal[\"left\", \"right\"]]): Label position.\n        name (Optional[str]): Input name.\n        on_change (Optional[Callable[[bool], None]]): Change handler.\n        radius (Optional[Union[Literal[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"], int]]): Corner radius.\n        size (Optional[Literal[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]]): Control size.\n        kwargs: Additional props to set.\n\n    Returns:\n        bool: Current value.\n    \"\"\"\n    return self._x_checkbox(\n        \"checkbox\",\n        key or self._new_widget_id(\"checkbox\", label),\n        autoContrast=auto_contrast,\n        checked=checked,\n        color=color,\n        description=description,\n        disabled=disabled,\n        error=error,\n        iconColor=icon_color,\n        label=label,\n        labelPosition=label_position,\n        name=name,\n        on_change=on_change,\n        radius=radius,\n        size=size,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.checkbox_group","title":"<code>checkbox_group(label, options, *, description=None, error=None, format_func=None, group_props=None, key=None, on_change=None, radius=None, read_only=None, required=None, size=None, value=None, with_asterisk=None, **kwargs)</code>","text":"<p>Multiple selection using a group of checkboxes.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Group label.</p> required <code>options</code> <code>list[Union[RLOption, str]]</code> <p>Available options.</p> required <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>format_func</code> <code>Optional[Callable[[Any], str]]</code> <p>Map option value to label.</p> <code>None</code> <code>group_props</code> <code>Optional[dict[str, Any]]</code> <p>Extra props for the group container.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[list[str]], None]]</code> <p>Change handler.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Corner radius.</p> <code>None</code> <code>read_only</code> <code>Optional[bool]</code> <p>Read-only state.</p> <code>None</code> <code>required</code> <code>Optional[bool]</code> <p>Mark as required.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>value</code> <code>Optional[list[str]]</code> <p>Selected values.</p> <code>None</code> <code>with_asterisk</code> <code>Optional[bool]</code> <p>Show required asterisk.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: Selected values.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def checkbox_group(  # type: ignore[override]\n    self,\n    label: str,\n    options: list[Union[RLOption, str]],\n    *,\n    description: Optional[str] = None,\n    error: Optional[str] = None,\n    format_func: Optional[Callable[[Any], str]] = None,\n    group_props: Optional[dict[str, Any]] = None,\n    key: Optional[str] = None,\n    on_change: Optional[Callable[[list[str]], None]] = None,\n    radius: Optional[Union[str, int]] = None,\n    read_only: Optional[bool] = None,\n    required: Optional[bool] = None,\n    size: Optional[str] = None,\n    value: Optional[list[str]] = None,\n    with_asterisk: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; list[str]:\n    \"\"\"\n    Multiple selection using a group of checkboxes.\n\n    Args:\n        label (str): Group label.\n        options (list[Union[RLOption, str]]): Available options.\n        description (Optional[str]): Helper text under the label.\n        error (Optional[str]): Error message.\n        format_func (Optional[Callable[[Any], str]]): Map option value to label.\n        group_props (Optional[dict[str, Any]]): Extra props for the group container.\n        key (Optional[str]): Explicit element key.\n        on_change (Optional[Callable[[list[str]], None]]): Change handler.\n        radius (Optional[Union[str, int]]): Corner radius.\n        read_only (Optional[bool]): Read-only state.\n        required (Optional[bool]): Mark as required.\n        size (Optional[str]): Control size.\n        value (Optional[list[str]]): Selected values.\n        with_asterisk (Optional[bool]): Show required asterisk.\n        kwargs: Additional props to set.\n\n    Returns:\n        list[str]: Selected values.\n    \"\"\"\n    return self._x_checkbox_group(\n        \"checkboxgroup\",\n        key or self._new_widget_id(\"checkbox-group\", label),\n        description=description,\n        error=error,\n        format_func=format_func,\n        groupProps=group_props,\n        label=label,\n        on_change=on_change,\n        options=options,  # type: ignore[arg-type]\n        radius=radius,\n        readOnly=read_only,\n        required=required,\n        size=size,\n        value=value,\n        withAsterisk=with_asterisk,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.chip","title":"<code>chip(label, *, auto_contrast=None, checked=False, color=None, disabled=None, icon=None, input_type=None, key=None, on_change=None, radius=None, size=None, **kwargs)</code>","text":"<p>Toggleable chip, can behave as checkbox or radio.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Chip label.</p> required <code>auto_contrast</code> <code>Optional[bool]</code> <p>Improve contrast automatically.</p> <code>None</code> <code>checked</code> <code>bool</code> <p>Initial checked state.</p> <code>False</code> <code>color</code> <code>Optional[str]</code> <p>Accent color.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable interaction.</p> <code>None</code> <code>icon</code> <code>Optional[RouteLitElement]</code> <p>Left section icon.</p> <code>None</code> <code>input_type</code> <code>Optional[Literal['checkbox', 'radio']]</code> <p>Behavior of the chip.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[bool], None]]</code> <p>Change handler.</p> <code>None</code> <code>radius</code> <code>Optional[Union[Literal['xs', 'sm', 'md', 'lg', 'xl'], int]]</code> <p>Corner radius.</p> <code>None</code> <code>size</code> <code>Optional[Literal['xs', 'sm', 'md', 'lg', 'xl']]</code> <p>Control size.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Current value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def chip(\n    self,\n    label: str,\n    *,\n    auto_contrast: Optional[bool] = None,\n    checked: bool = False,\n    color: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    icon: Optional[RouteLitElement] = None,\n    input_type: Optional[Literal[\"checkbox\", \"radio\"]] = None,\n    key: Optional[str] = None,\n    on_change: Optional[Callable[[bool], None]] = None,\n    radius: Optional[Union[Literal[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"], int]] = None,\n    size: Optional[Literal[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]] = None,\n    **kwargs: Any,\n) -&gt; bool:\n    \"\"\"\n    Toggleable chip, can behave as checkbox or radio.\n\n    Args:\n        label (str): Chip label.\n        auto_contrast (Optional[bool]): Improve contrast automatically.\n        checked (bool): Initial checked state.\n        color (Optional[str]): Accent color.\n        disabled (Optional[bool]): Disable interaction.\n        icon (Optional[RouteLitElement]): Left section icon.\n        input_type (Optional[Literal[\"checkbox\", \"radio\"]]): Behavior of the chip.\n        key (Optional[str]): Explicit element key.\n        on_change (Optional[Callable[[bool], None]]): Change handler.\n        radius (Optional[Union[Literal[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"], int]]): Corner radius.\n        size (Optional[Literal[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]]): Control size.\n        kwargs: Additional props to set.\n\n    Returns:\n        bool: Current value.\n    \"\"\"\n    return self._x_checkbox(\n        \"chip\",\n        key or self._new_widget_id(\"chip\", label),\n        autoContrast=auto_contrast,\n        checked=checked,\n        children=label,\n        color=color,\n        disabled=disabled,\n        icon=icon,\n        on_change=on_change,\n        radius=radius,\n        size=size,\n        type=input_type,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.chip_group","title":"<code>chip_group(key, options, *, format_func=None, group_props=None, multiple=False, on_change=None, value=None, **kwargs)</code>","text":"<p>Single or multiple selection using chip components.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Explicit element key.</p> required <code>options</code> <code>list[Union[RLOption, str]]</code> <p>Available options.</p> required <code>format_func</code> <code>Optional[Callable[[Any], str]]</code> <p>Map option value to label.</p> <code>None</code> <code>group_props</code> <code>Optional[dict[str, Any]]</code> <p>Extra props for the group container.</p> <code>None</code> <code>multiple</code> <code>bool</code> <p>Enable multiple selection.</p> <code>False</code> <code>on_change</code> <code>Optional[Callable[[Union[str, list[str]]], None]]</code> <p>Change handler.</p> <code>None</code> <code>value</code> <code>Optional[Union[str, list[str]]]</code> <p>Selected value(s).</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Union[str, list[str]]</code> <p>Union[str, list[str]]: Selected value(s).</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def chip_group(\n    self,\n    key: str,\n    options: list[Union[RLOption, str]],\n    *,\n    format_func: Optional[Callable[[Any], str]] = None,\n    group_props: Optional[dict[str, Any]] = None,\n    multiple: bool = False,\n    on_change: Optional[Callable[[Union[str, list[str]]], None]] = None,\n    value: Optional[Union[str, list[str]]] = None,\n    **kwargs: Any,\n) -&gt; Union[str, list[str]]:\n    \"\"\"\n    Single or multiple selection using chip components.\n\n    Args:\n        key (str): Explicit element key.\n        options (list[Union[RLOption, str]]): Available options.\n        format_func (Optional[Callable[[Any], str]]): Map option value to label.\n        group_props (Optional[dict[str, Any]]): Extra props for the group container.\n        multiple (bool): Enable multiple selection.\n        on_change (Optional[Callable[[Union[str, list[str]]], None]]): Change handler.\n        value (Optional[Union[str, list[str]]]): Selected value(s).\n        kwargs: Additional props to set.\n\n    Returns:\n        Union[str, list[str]]: Selected value(s).\n    \"\"\"\n    if multiple:\n        return self._x_checkbox_group(\n            \"chipgroup\",\n            key,\n            format_func=format_func,\n            groupProps=group_props,\n            multiple=True,\n            on_change=on_change,\n            options=options,  # type: ignore[arg-type]\n            value=value,  # type: ignore[arg-type]\n            **kwargs,\n        )\n    return self._x_radio_select(  # type: ignore[no-any-return]\n        \"chipgroup\",\n        key,\n        format_func=format_func,\n        groupProps=group_props,\n        multiple=False,\n        on_change=on_change,\n        options=options,  # type: ignore[arg-type]\n        value=value,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.color_input","title":"<code>color_input(label, *, description=None, disabled=None, error=None, fix_on_blur=None, input_size=None, key=None, on_change=None, radius=None, required=None, size=None, swatches=None, value=None, with_asterisk=None, with_picker=None, with_preview=None, **kwargs)</code>","text":"<p>Text input specialized for color values with a color picker.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable input interaction.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>fix_on_blur</code> <code>Optional[bool]</code> <p>Normalize value on blur.</p> <code>None</code> <code>input_size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[str], None]]</code> <p>Change handler.</p> <code>None</code> <code>radius</code> <code>Optional[str]</code> <p>Corner radius.</p> <code>None</code> <code>required</code> <code>Optional[bool]</code> <p>Mark as required.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>swatches</code> <code>Optional[list[str]]</code> <p>Preset color swatches.</p> <code>None</code> <code>value</code> <code>Optional[str]</code> <p>Current value.</p> <code>None</code> <code>with_asterisk</code> <code>Optional[bool]</code> <p>Show required asterisk.</p> <code>None</code> <code>with_picker</code> <code>Optional[bool]</code> <p>Show color picker.</p> <code>None</code> <code>with_preview</code> <code>Optional[bool]</code> <p>Show color preview chip.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Current value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def color_input(\n    self,\n    label: str,\n    *,\n    description: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    error: Optional[str] = None,\n    fix_on_blur: Optional[bool] = None,\n    input_size: Optional[str] = None,\n    key: Optional[str] = None,\n    on_change: Optional[Callable[[str], None]] = None,\n    radius: Optional[str] = None,\n    required: Optional[bool] = None,\n    size: Optional[str] = None,\n    swatches: Optional[list[str]] = None,\n    value: Optional[str] = None,\n    with_asterisk: Optional[bool] = None,\n    with_picker: Optional[bool] = None,\n    with_preview: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; str:\n    \"\"\"\n    Text input specialized for color values with a color picker.\n\n    Args:\n        label (str): Field label.\n        description (Optional[str]): Helper text under the label.\n        disabled (Optional[bool]): Disable input interaction.\n        error (Optional[str]): Error message.\n        fix_on_blur (Optional[bool]): Normalize value on blur.\n        input_size (Optional[str]): Control size.\n        key (Optional[str]): Explicit element key.\n        on_change (Optional[Callable[[str], None]]): Change handler.\n        radius (Optional[str]): Corner radius.\n        required (Optional[bool]): Mark as required.\n        size (Optional[str]): Control size.\n        swatches (Optional[list[str]]): Preset color swatches.\n        value (Optional[str]): Current value.\n        with_asterisk (Optional[bool]): Show required asterisk.\n        with_picker (Optional[bool]): Show color picker.\n        with_preview (Optional[bool]): Show color preview chip.\n        kwargs: Additional props to set.\n\n    Returns:\n        str: Current value.\n    \"\"\"\n    return self._x_input(  # type: ignore[return-value]\n        \"colorinput\",\n        key or self._new_widget_id(\"colorinput\", label),\n        description=description,\n        disabled=disabled,\n        error=error,\n        fixOnBlur=fix_on_blur,\n        inputSize=input_size,\n        label=label,\n        on_change=on_change,\n        radius=radius,\n        required=required,\n        size=size,\n        swatches=swatches,\n        value=value,\n        withAsterisk=with_asterisk,\n        withPicker=with_picker,\n        withPreview=with_preview,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.composite_chart","title":"<code>composite_chart(data, data_key, series, *, key=None, active_dot_props=None, area_props=None, bar_props=None, children=None, composed_chart_props=None, connect_nulls=None, curve_type=None, dot_props=None, grid_axis=None, grid_color=None, grid_props=None, legend_props=None, line_props=None, max_bar_width=None, min_bar_size=None, reference_lines=None, right_y_axis_label=None, right_y_axis_props=None, stroke_dasharray=None, stroke_width=None, text_color=None, tick_line=None, tooltip_animation_duration=None, tooltip_props=None, unit=None, with_bar_value_label=None, with_dots=None, with_legend=None, with_point_labels=None, with_right_y_axis=None, with_tooltip=None, with_x_axis=None, with_y_axis=None, x_axis_label=None, x_axis_props=None, y_axis_label=None, y_axis_props=None, **kwargs)</code>","text":"<p>Composite chart that can combine bars, lines, and areas.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list</code> <p>Dataset.</p> required <code>data_key</code> <code>str</code> <p>X-axis data key.</p> required <code>series</code> <code>list[dict[str, Any]]</code> <p>Series configuration.</p> required <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>active_dot_props</code> <code>Optional[dict[str, Any]]</code> <p>Active dot props.</p> <code>None</code> <code>area_props</code> <code>Optional[dict[str, Any]]</code> <p>Area props.</p> <code>None</code> <code>bar_props</code> <code>Optional[dict[str, Any]]</code> <p>Bar props.</p> <code>None</code> <code>children</code> <code>Optional[Any]</code> <p>Extra child elements.</p> <code>None</code> <code>composed_chart_props</code> <code>Optional[dict[str, Any]]</code> <p>Chart container props.</p> <code>None</code> <code>connect_nulls</code> <code>Optional[bool]</code> <p>Connect across null values.</p> <code>None</code> <code>curve_type</code> <code>Optional[str]</code> <p>Curve interpolation type.</p> <code>None</code> <code>dot_props</code> <code>Optional[dict[str, Any]]</code> <p>Dot props.</p> <code>None</code> <code>grid_axis</code> <code>Optional[str]</code> <p>Grid axis.</p> <code>None</code> <code>grid_color</code> <code>Optional[str]</code> <p>Grid color.</p> <code>None</code> <code>grid_props</code> <code>Optional[dict[str, Any]]</code> <p>Grid props.</p> <code>None</code> <code>legend_props</code> <code>Optional[dict[str, Any]]</code> <p>Legend props.</p> <code>None</code> <code>line_props</code> <code>Optional[dict[str, Any]]</code> <p>Line props.</p> <code>None</code> <code>max_bar_width</code> <code>Optional[int]</code> <p>Max bar width.</p> <code>None</code> <code>min_bar_size</code> <code>Optional[int]</code> <p>Min bar size.</p> <code>None</code> <code>reference_lines</code> <code>Optional[list[dict[str, Any]]]</code> <p>Reference lines.</p> <code>None</code> <code>right_y_axis_label</code> <code>Optional[str]</code> <p>Secondary Y axis label.</p> <code>None</code> <code>right_y_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>Secondary Y axis props.</p> <code>None</code> <code>stroke_dasharray</code> <code>Optional[str]</code> <p>Stroke dash pattern.</p> <code>None</code> <code>stroke_width</code> <code>Optional[int]</code> <p>Line width.</p> <code>None</code> <code>text_color</code> <code>Optional[str]</code> <p>Text color.</p> <code>None</code> <code>tick_line</code> <code>Optional[str]</code> <p>Tick line display.</p> <code>None</code> <code>tooltip_animation_duration</code> <code>Optional[int]</code> <p>Tooltip animation duration.</p> <code>None</code> <code>tooltip_props</code> <code>Optional[dict[str, Any]]</code> <p>Tooltip props.</p> <code>None</code> <code>unit</code> <code>Optional[str]</code> <p>Unit suffix.</p> <code>None</code> <code>with_bar_value_label</code> <code>Optional[bool]</code> <p>Show value labels on bars.</p> <code>None</code> <code>with_dots</code> <code>Optional[bool]</code> <p>Show dots on lines.</p> <code>None</code> <code>with_legend</code> <code>Optional[bool]</code> <p>Show legend.</p> <code>None</code> <code>with_point_labels</code> <code>Optional[bool]</code> <p>Show point labels on lines.</p> <code>None</code> <code>with_right_y_axis</code> <code>Optional[bool]</code> <p>Enable right Y axis.</p> <code>None</code> <code>with_tooltip</code> <code>Optional[bool]</code> <p>Show tooltip.</p> <code>None</code> <code>with_x_axis</code> <code>Optional[bool]</code> <p>Show X axis.</p> <code>None</code> <code>with_y_axis</code> <code>Optional[bool]</code> <p>Show Y axis.</p> <code>None</code> <code>x_axis_label</code> <code>Optional[str]</code> <p>X axis label.</p> <code>None</code> <code>x_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>X axis props.</p> <code>None</code> <code>y_axis_label</code> <code>Optional[str]</code> <p>Y axis label.</p> <code>None</code> <code>y_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>Y axis props.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the composite chart element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def composite_chart(\n    self,\n    data: list,\n    data_key: str,\n    series: list[dict[str, Any]],\n    *,\n    key: Optional[str] = None,\n    active_dot_props: Optional[dict[str, Any]] = None,\n    area_props: Optional[dict[str, Any]] = None,\n    bar_props: Optional[dict[str, Any]] = None,\n    children: Optional[Any] = None,\n    composed_chart_props: Optional[dict[str, Any]] = None,\n    connect_nulls: Optional[bool] = None,\n    curve_type: Optional[str] = None,\n    dot_props: Optional[dict[str, Any]] = None,\n    grid_axis: Optional[str] = None,\n    grid_color: Optional[str] = None,\n    grid_props: Optional[dict[str, Any]] = None,\n    legend_props: Optional[dict[str, Any]] = None,\n    line_props: Optional[dict[str, Any]] = None,\n    max_bar_width: Optional[int] = None,\n    min_bar_size: Optional[int] = None,\n    reference_lines: Optional[list[dict[str, Any]]] = None,\n    right_y_axis_label: Optional[str] = None,\n    right_y_axis_props: Optional[dict[str, Any]] = None,\n    stroke_dasharray: Optional[str] = None,\n    stroke_width: Optional[int] = None,\n    text_color: Optional[str] = None,\n    tick_line: Optional[str] = None,\n    tooltip_animation_duration: Optional[int] = None,\n    tooltip_props: Optional[dict[str, Any]] = None,\n    unit: Optional[str] = None,\n    with_bar_value_label: Optional[bool] = None,\n    with_dots: Optional[bool] = None,\n    with_legend: Optional[bool] = None,\n    with_point_labels: Optional[bool] = None,\n    with_right_y_axis: Optional[bool] = None,\n    with_tooltip: Optional[bool] = None,\n    with_x_axis: Optional[bool] = None,\n    with_y_axis: Optional[bool] = None,\n    x_axis_label: Optional[str] = None,\n    x_axis_props: Optional[dict[str, Any]] = None,\n    y_axis_label: Optional[str] = None,\n    y_axis_props: Optional[dict[str, Any]] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Composite chart that can combine bars, lines, and areas.\n\n    Args:\n        data (list): Dataset.\n        data_key (str): X-axis data key.\n        series (list[dict[str, Any]]): Series configuration.\n        key (Optional[str]): Explicit element key.\n        active_dot_props (Optional[dict[str, Any]]): Active dot props.\n        area_props (Optional[dict[str, Any]]): Area props.\n        bar_props (Optional[dict[str, Any]]): Bar props.\n        children (Optional[Any]): Extra child elements.\n        composed_chart_props (Optional[dict[str, Any]]): Chart container props.\n        connect_nulls (Optional[bool]): Connect across null values.\n        curve_type (Optional[str]): Curve interpolation type.\n        dot_props (Optional[dict[str, Any]]): Dot props.\n        grid_axis (Optional[str]): Grid axis.\n        grid_color (Optional[str]): Grid color.\n        grid_props (Optional[dict[str, Any]]): Grid props.\n        legend_props (Optional[dict[str, Any]]): Legend props.\n        line_props (Optional[dict[str, Any]]): Line props.\n        max_bar_width (Optional[int]): Max bar width.\n        min_bar_size (Optional[int]): Min bar size.\n        reference_lines (Optional[list[dict[str, Any]]]): Reference lines.\n        right_y_axis_label (Optional[str]): Secondary Y axis label.\n        right_y_axis_props (Optional[dict[str, Any]]): Secondary Y axis props.\n        stroke_dasharray (Optional[str]): Stroke dash pattern.\n        stroke_width (Optional[int]): Line width.\n        text_color (Optional[str]): Text color.\n        tick_line (Optional[str]): Tick line display.\n        tooltip_animation_duration (Optional[int]): Tooltip animation duration.\n        tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n        unit (Optional[str]): Unit suffix.\n        with_bar_value_label (Optional[bool]): Show value labels on bars.\n        with_dots (Optional[bool]): Show dots on lines.\n        with_legend (Optional[bool]): Show legend.\n        with_point_labels (Optional[bool]): Show point labels on lines.\n        with_right_y_axis (Optional[bool]): Enable right Y axis.\n        with_tooltip (Optional[bool]): Show tooltip.\n        with_x_axis (Optional[bool]): Show X axis.\n        with_y_axis (Optional[bool]): Show Y axis.\n        x_axis_label (Optional[str]): X axis label.\n        x_axis_props (Optional[dict[str, Any]]): X axis props.\n        y_axis_label (Optional[str]): Y axis label.\n        y_axis_props (Optional[dict[str, Any]]): Y axis props.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the composite chart element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"compositechart\",\n        key=key or self._new_text_id(\"compositechart\"),\n        props={\n            \"data\": data,\n            \"dataKey\": data_key,\n            \"series\": series,\n            \"activeDotProps\": active_dot_props,\n            \"areaProps\": area_props,\n            \"barProps\": bar_props,\n            \"children\": children,\n            \"composedChartProps\": composed_chart_props,\n            \"connectNulls\": connect_nulls,\n            \"curveType\": curve_type,\n            \"dotProps\": dot_props,\n            \"gridAxis\": grid_axis,\n            \"gridColor\": grid_color,\n            \"gridProps\": grid_props,\n            \"legendProps\": legend_props,\n            \"lineProps\": line_props,\n            \"maxBarWidth\": max_bar_width,\n            \"minBarSize\": min_bar_size,\n            \"referenceLines\": reference_lines,\n            \"rightYAxisLabel\": right_y_axis_label,\n            \"rightYAxisProps\": right_y_axis_props,\n            \"strokeDasharray\": stroke_dasharray,\n            \"strokeWidth\": stroke_width,\n            \"textColor\": text_color,\n            \"tickLine\": tick_line,\n            \"tooltipAnimationDuration\": tooltip_animation_duration,\n            \"tooltipProps\": tooltip_props,\n            \"unit\": unit,\n            \"withBarValueLabel\": with_bar_value_label,\n            \"withDots\": with_dots,\n            \"withLegend\": with_legend,\n            \"withPointLabels\": with_point_labels,\n            \"withRightYAxis\": with_right_y_axis,\n            \"withTooltip\": with_tooltip,\n            \"withXAxis\": with_x_axis,\n            \"withYAxis\": with_y_axis,\n            \"xAxisLabel\": x_axis_label,\n            \"xAxisProps\": x_axis_props,\n            \"yAxisLabel\": y_axis_label,\n            \"yAxisProps\": y_axis_props,\n            **kwargs,\n        },\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.container","title":"<code>container(*, fluid=False, key=None, size=None, **kwargs)</code>","text":"<p>Create a container.</p> <p>Parameters:</p> Name Type Description Default <code>fluid</code> <code>bool</code> <p>Whether the container is fluid.</p> <code>False</code> <code>key</code> <code>Optional[str]</code> <p>The key of the container.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>The size of the container.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>The container builder.</p> <p>Example: ```python with ui.container(fluid=True, size=\"xl\", bg=\"var(--mantine-color-blue-light)\"):     ui.text(\"Hello World\")</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def container(  # type: ignore[override]\n    self,\n    *,\n    fluid: bool = False,\n    key: Optional[str] = None,\n    size: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Create a container.\n\n    Args:\n        fluid (bool): Whether the container is fluid.\n        key (Optional[str]): The key of the container.\n        size (Optional[str]): The size of the container.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: The container builder.\n\n    Example:\n    ```python\n    with ui.container(fluid=True, size=\"xl\", bg=\"var(--mantine-color-blue-light)\"):\n        ui.text(\"Hello World\")\n    \"\"\"\n    new_element = self._create_element(\n        key=key or self._new_text_id(\"container\"),\n        name=\"container\",\n        props={\"fluid\": fluid, \"size\": size, **kwargs},\n    )\n    return cast(RLBuilder, self._build_nested_builder(new_element))\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.date_picker","title":"<code>date_picker(label, value=None, *, allow_deselect=None, allow_single_date_in_range=None, aria_labels=None, columns_to_scroll=None, decade_label_format=None, default_level=None, description=None, enable_keyboard_navigation=None, first_day_of_week=None, header_controls_order=None, hide_outside_dates=None, hide_weekdays=None, highlight_today=None, key=None, level=None, locale=None, max_date=None, max_level=None, min_date=None, month_label_format=None, months_list_format=None, next_icon=None, next_label=None, number_of_columns=None, on_change=None, presets=None, previous_icon=None, previous_label=None, size=None, type=None, weekday_format=None, weekend_days=None, with_cell_spacing=None, with_week_numbers=None, year_label_format=None, years_list_format=None, **kwargs)</code>","text":"<p>Calendar date picker supporting single, range, and multiple modes.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>value</code> <code>Optional[...]</code> <p>Current value in the selected mode.</p> <code>None</code> <code>allow_deselect</code> <code>Optional[bool]</code> <p>Allow clearing selection.</p> <code>None</code> <code>allow_single_date_in_range</code> <code>Optional[bool]</code> <p>Allow single date in range mode.</p> <code>None</code> <code>aria_labels</code> <code>Optional[dict]</code> <p>ARIA labels.</p> <code>None</code> <code>columns_to_scroll</code> <code>Optional[int]</code> <p>Months to scroll.</p> <code>None</code> <code>decade_label_format</code> <code>Optional[str]</code> <p>Decade label format.</p> <code>None</code> <code>default_level</code> <code>Optional[Literal['month', 'year', 'decade']]</code> <p>Initial calendar level.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>enable_keyboard_navigation</code> <code>Optional[bool]</code> <p>Enable keyboard navigation.</p> <code>None</code> <code>first_day_of_week</code> <code>Optional[Literal[0, 1, 2, 3, 4, 5, 6]]</code> <p>First day of week.</p> <code>None</code> <code>header_controls_order</code> <code>Optional[list[...]]</code> <p>Header controls order.</p> <code>None</code> <code>hide_outside_dates</code> <code>Optional[bool]</code> <p>Hide outside month dates.</p> <code>None</code> <code>hide_weekdays</code> <code>Optional[bool]</code> <p>Hide weekday labels.</p> <code>None</code> <code>highlight_today</code> <code>Optional[bool]</code> <p>Highlight current date.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>level</code> <code>Optional[str]</code> <p>Current level.</p> <code>None</code> <code>locale</code> <code>Optional[str]</code> <p>Locale code.</p> <code>None</code> <code>max_date</code> <code>Optional[Union[str, date]]</code> <p>Max date.</p> <code>None</code> <code>max_level</code> <code>Optional[str]</code> <p>Max level.</p> <code>None</code> <code>min_date</code> <code>Optional[Union[str, date]]</code> <p>Min date.</p> <code>None</code> <code>month_label_format</code> <code>Optional[str]</code> <p>Month label format.</p> <code>None</code> <code>months_list_format</code> <code>Optional[str]</code> <p>Months list format.</p> <code>None</code> <code>next_icon</code> <code>Optional[RouteLitElement]</code> <p>Next button icon.</p> <code>None</code> <code>next_label</code> <code>Optional[str]</code> <p>Next button label.</p> <code>None</code> <code>number_of_columns</code> <code>Optional[int]</code> <p>Months displayed.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[...], None]]</code> <p>Change handler.</p> <code>None</code> <code>presets</code> <code>Optional[list]</code> <p>Preset ranges.</p> <code>None</code> <code>previous_icon</code> <code>Optional[RouteLitElement]</code> <p>Previous button icon.</p> <code>None</code> <code>previous_label</code> <code>Optional[str]</code> <p>Previous button label.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>type</code> <code>Optional[Literal['default', 'range', 'multiple']]</code> <p>Picker mode.</p> <code>None</code> <code>weekday_format</code> <code>Optional[str]</code> <p>Weekday label format.</p> <code>None</code> <code>weekend_days</code> <code>Optional[list[...]]</code> <p>Weekend days indices.</p> <code>None</code> <code>with_cell_spacing</code> <code>Optional[bool]</code> <p>Add spacing between cells.</p> <code>None</code> <code>with_week_numbers</code> <code>Optional[bool]</code> <p>Show week numbers.</p> <code>None</code> <code>year_label_format</code> <code>Optional[str]</code> <p>Year label format.</p> <code>None</code> <code>years_list_format</code> <code>Optional[str]</code> <p>Years list format.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Optional[Union[date, list[date], tuple[date, date]]]</code> <p>Optional[Union[datetime.date, list[datetime.date], tuple[datetime.date, datetime.date]]]: Current value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def date_picker(\n    self,\n    label: str,\n    value: Optional[\n        Union[\n            datetime.date,\n            str,\n            list[str],\n            list[datetime.date],\n            tuple[str, str],\n            tuple[datetime.date, datetime.date],\n        ]\n    ] = None,\n    *,\n    allow_deselect: Optional[bool] = None,\n    allow_single_date_in_range: Optional[bool] = None,\n    aria_labels: Optional[dict] = None,\n    columns_to_scroll: Optional[int] = None,\n    decade_label_format: Optional[str] = None,\n    default_level: Optional[Literal[\"month\", \"year\", \"decade\"]] = None,\n    description: Optional[str] = None,\n    enable_keyboard_navigation: Optional[bool] = None,\n    first_day_of_week: Optional[Literal[0, 1, 2, 3, 4, 5, 6]] = None,\n    header_controls_order: Optional[list[Literal[\"level\", \"next\", \"previous\"]]] = None,\n    hide_outside_dates: Optional[bool] = None,\n    hide_weekdays: Optional[bool] = None,\n    highlight_today: Optional[bool] = None,\n    key: Optional[str] = None,\n    level: Optional[str] = None,\n    locale: Optional[str] = None,\n    max_date: Optional[Union[str, datetime.date]] = None,\n    max_level: Optional[str] = None,\n    min_date: Optional[Union[str, datetime.date]] = None,\n    month_label_format: Optional[str] = None,\n    months_list_format: Optional[str] = None,\n    next_icon: Optional[RouteLitElement] = None,\n    next_label: Optional[str] = None,\n    number_of_columns: Optional[int] = None,\n    on_change: Optional[\n        Callable[\n            [\n                Union[\n                    datetime.date,\n                    list[datetime.date],\n                    tuple[datetime.date, datetime.date],\n                ]\n            ],\n            None,\n        ]\n    ] = None,\n    presets: Optional[list] = None,\n    previous_icon: Optional[RouteLitElement] = None,\n    previous_label: Optional[str] = None,\n    size: Optional[str] = None,\n    type: Optional[Literal[\"default\", \"range\", \"multiple\"]] = None,  # noqa: A002\n    weekday_format: Optional[str] = None,\n    weekend_days: Optional[list[Literal[0, 1, 2, 3, 4, 5, 6]]] = None,\n    with_cell_spacing: Optional[bool] = None,\n    with_week_numbers: Optional[bool] = None,\n    year_label_format: Optional[str] = None,\n    years_list_format: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; Optional[Union[datetime.date, list[datetime.date], tuple[datetime.date, datetime.date]]]:\n    \"\"\"\n    Calendar date picker supporting single, range, and multiple modes.\n\n    Args:\n        label (str): Field label.\n        value (Optional[...]): Current value in the selected mode.\n        allow_deselect (Optional[bool]): Allow clearing selection.\n        allow_single_date_in_range (Optional[bool]): Allow single date in range mode.\n        aria_labels (Optional[dict]): ARIA labels.\n        columns_to_scroll (Optional[int]): Months to scroll.\n        decade_label_format (Optional[str]): Decade label format.\n        default_level (Optional[Literal[\"month\", \"year\", \"decade\"]]): Initial calendar level.\n        description (Optional[str]): Helper text under the label.\n        enable_keyboard_navigation (Optional[bool]): Enable keyboard navigation.\n        first_day_of_week (Optional[Literal[0,1,2,3,4,5,6]]): First day of week.\n        header_controls_order (Optional[list[...]]): Header controls order.\n        hide_outside_dates (Optional[bool]): Hide outside month dates.\n        hide_weekdays (Optional[bool]): Hide weekday labels.\n        highlight_today (Optional[bool]): Highlight current date.\n        key (Optional[str]): Explicit element key.\n        level (Optional[str]): Current level.\n        locale (Optional[str]): Locale code.\n        max_date (Optional[Union[str, datetime.date]]): Max date.\n        max_level (Optional[str]): Max level.\n        min_date (Optional[Union[str, datetime.date]]): Min date.\n        month_label_format (Optional[str]): Month label format.\n        months_list_format (Optional[str]): Months list format.\n        next_icon (Optional[RouteLitElement]): Next button icon.\n        next_label (Optional[str]): Next button label.\n        number_of_columns (Optional[int]): Months displayed.\n        on_change (Optional[Callable[[...], None]]): Change handler.\n        presets (Optional[list]): Preset ranges.\n        previous_icon (Optional[RouteLitElement]): Previous button icon.\n        previous_label (Optional[str]): Previous button label.\n        size (Optional[str]): Control size.\n        type (Optional[Literal[\"default\", \"range\", \"multiple\"]]): Picker mode.\n        weekday_format (Optional[str]): Weekday label format.\n        weekend_days (Optional[list[...]]): Weekend days indices.\n        with_cell_spacing (Optional[bool]): Add spacing between cells.\n        with_week_numbers (Optional[bool]): Show week numbers.\n        year_label_format (Optional[str]): Year label format.\n        years_list_format (Optional[str]): Years list format.\n        kwargs: Additional props to set.\n\n    Returns:\n        Optional[Union[datetime.date, list[datetime.date], tuple[datetime.date, datetime.date]]]: Current value.\n    \"\"\"\n    return cast(\n        Optional[\n            Union[\n                datetime.date,\n                list[datetime.date],\n                tuple[datetime.date, datetime.date],\n            ]\n        ],\n        self._x_input(\n            \"datepicker\",\n            key or self._new_widget_id(\"datepicker\", label),\n            label=label,\n            description=description,\n            value=value,\n            allowDeselect=allow_deselect,\n            allowSingleDateInRange=allow_single_date_in_range,\n            ariaLabels=aria_labels,\n            columnsToScroll=columns_to_scroll,\n            decadeLabelFormat=decade_label_format,\n            defaultLevel=default_level,\n            enableKeyboardNavigation=enable_keyboard_navigation,\n            firstDayOfWeek=first_day_of_week,\n            headerControlsOrder=header_controls_order,\n            hideOutsideDates=hide_outside_dates,\n            hideWeekdays=hide_weekdays,\n            highlightToday=highlight_today,\n            level=level,\n            locale=locale,\n            maxDate=max_date,\n            maxLevel=max_level,\n            minDate=min_date,\n            monthLabelFormat=month_label_format,\n            monthsListFormat=months_list_format,\n            nextIcon=next_icon,\n            nextLabel=next_label,\n            numberOfColumns=number_of_columns,\n            onChange=on_change,\n            presets=presets,\n            previousIcon=previous_icon,\n            previousLabel=previous_label,\n            size=size,\n            type=type,\n            weekdayFormat=weekday_format,\n            weekendDays=weekend_days,\n            withCellSpacing=with_cell_spacing,\n            withWeekNumbers=with_week_numbers,\n            yearLabelFormat=year_label_format,\n            yearsListFormat=years_list_format,\n            rl_format_func=self._format_date_picker,\n            **kwargs,\n        ),\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.date_picker_input","title":"<code>date_picker_input(label, value=None, *, key=None, description=None, on_change=None, allow_deselect=None, allow_single_date_in_range=None, aria_labels=None, clear_button_props=None, clearable=None, close_on_change=None, columns_to_scroll=None, decade_label_format=None, default_level=None, description_props=None, disabled=None, dropdown_type=None, enable_keyboard_navigation=None, error=None, error_props=None, first_day_of_week=None, header_controls_order=None, hide_outside_dates=None, hide_weekdays=None, highlight_today=None, input_size=None, input_wrapper_order=None, label_props=None, label_separator=None, left_section=None, left_section_pointer_events=None, left_section_props=None, left_section_width=None, level=None, locale=None, max_date=None, max_level=None, min_date=None, modal_props=None, month_label_format=None, months_list_format=None, next_icon=None, next_label=None, number_of_columns=None, placeholder=None, pointer=None, popover_props=None, presets=None, previous_icon=None, previous_label=None, radius=None, read_only=None, required=None, right_section=None, right_section_pointer_events=None, right_section_props=None, right_section_width=None, size=None, sort_dates=None, type=None, value_format=None, weekday_format=None, weekend_days=None, with_asterisk=None, with_cell_spacing=None, with_error_styles=None, with_week_numbers=None, wrapper_props=None, year_label_format=None, years_list_format=None, **kwargs)</code>","text":"<p>Text input with integrated date picker dropdown.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>value</code> <code>Optional[...]</code> <p>Current value in the selected mode.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>Helper text.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[Any], None]]</code> <p>Change handler.</p> <code>None</code> <code>allow_deselect</code> <code>Optional[bool]</code> <p>Allow clearing selection.</p> <code>None</code> <code>allow_single_date_in_range</code> <code>Optional[bool]</code> <p>Allow single date in range mode.</p> <code>None</code> <code>aria_labels</code> <code>Optional[dict]</code> <p>ARIA labels.</p> <code>None</code> <code>clear_button_props</code> <code>Optional[dict]</code> <p>Clear button props.</p> <code>None</code> <code>clearable</code> <code>Optional[bool]</code> <p>Enable clear button.</p> <code>None</code> <code>close_on_change</code> <code>Optional[bool]</code> <p>Close dropdown on change.</p> <code>None</code> <code>columns_to_scroll</code> <code>Optional[int]</code> <p>Months to scroll.</p> <code>None</code> <code>decade_label_format</code> <code>Optional[str]</code> <p>Decade label format.</p> <code>None</code> <code>default_level</code> <code>Optional[Literal['month', 'year', 'decade']]</code> <p>Initial calendar level.</p> <code>None</code> <code>description_props</code> <code>Optional[dict]</code> <p>Description props.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable interaction.</p> <code>None</code> <code>dropdown_type</code> <code>Optional[Literal['modal', 'popover']]</code> <p>Dropdown type.</p> <code>None</code> <code>enable_keyboard_navigation</code> <code>Optional[bool]</code> <p>Enable keyboard navigation.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>error_props</code> <code>Optional[dict]</code> <p>Error props.</p> <code>None</code> <code>first_day_of_week</code> <code>Optional[Literal[0, 1, 2, 3, 4, 5, 6]]</code> <p>First day of week.</p> <code>None</code> <code>header_controls_order</code> <code>Optional[list[...]]</code> <p>Header controls order.</p> <code>None</code> <code>hide_outside_dates</code> <code>Optional[bool]</code> <p>Hide outside month dates.</p> <code>None</code> <code>hide_weekdays</code> <code>Optional[bool]</code> <p>Hide weekday labels.</p> <code>None</code> <code>highlight_today</code> <code>Optional[bool]</code> <p>Highlight current date.</p> <code>None</code> <code>input_size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>input_wrapper_order</code> <code>Optional[list[Literal['input', 'label', 'description', 'error']]]</code> <p>Wrapper parts order.</p> <code>None</code> <code>label_props</code> <code>Optional[dict]</code> <p>Label props.</p> <code>None</code> <code>label_separator</code> <code>Optional[str]</code> <p>Separator for range values.</p> <code>None</code> <code>left_section</code> <code>Optional[RouteLitElement]</code> <p>Left adornment.</p> <code>None</code> <code>left_section_pointer_events</code> <code>Optional[str]</code> <p>Pointer events for left section.</p> <code>None</code> <code>left_section_props</code> <code>Optional[dict]</code> <p>Left adornment props.</p> <code>None</code> <code>left_section_width</code> <code>Optional[str]</code> <p>Left adornment width.</p> <code>None</code> <code>level</code> <code>Optional[Literal['month', 'year', 'decade']]</code> <p>Initial calendar level.</p> <code>None</code> <code>locale</code> <code>Optional[str]</code> <p>Locale code.</p> <code>None</code> <code>max_date</code> <code>Optional[Union[str, date]]</code> <p>Max date.</p> <code>None</code> <code>max_level</code> <code>Optional[Literal['month', 'year', 'decade']]</code> <p>Max calendar level.</p> <code>None</code> <code>min_date</code> <code>Optional[Union[str, date]]</code> <p>Min date.</p> <code>None</code> <code>modal_props</code> <code>Optional[dict]</code> <p>Modal props.</p> <code>None</code> <code>month_label_format</code> <code>Optional[str]</code> <p>Month label format.</p> <code>None</code> <code>months_list_format</code> <code>Optional[str]</code> <p>Months list format.</p> <code>None</code> <code>next_icon</code> <code>Optional[RouteLitElement]</code> <p>Next button icon.</p> <code>None</code> <code>next_label</code> <code>Optional[str]</code> <p>Next button label.</p> <code>None</code> <code>number_of_columns</code> <code>Optional[int]</code> <p>Months displayed.</p> <code>None</code> <code>placeholder</code> <code>Optional[str]</code> <p>Input placeholder.</p> <code>None</code> <code>pointer</code> <code>Optional[bool]</code> <p>Use pointer cursor.</p> <code>None</code> <code>popover_props</code> <code>Optional[dict]</code> <p>Popover props.</p> <code>None</code> <code>presets</code> <code>Optional[list]</code> <p>Preset ranges.</p> <code>None</code> <code>previous_icon</code> <code>Optional[RouteLitElement]</code> <p>Previous button icon.</p> <code>None</code> <code>previous_label</code> <code>Optional[str]</code> <p>Previous button label.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Corner radius.</p> <code>None</code> <code>read_only</code> <code>Optional[bool]</code> <p>Read-only state.</p> <code>None</code> <code>required</code> <code>Optional[bool]</code> <p>Mark as required.</p> <code>None</code> <code>right_section</code> <code>Optional[RouteLitElement]</code> <p>Right adornment.</p> <code>None</code> <code>right_section_pointer_events</code> <code>Optional[str]</code> <p>Pointer events for right section.</p> <code>None</code> <code>right_section_props</code> <code>Optional[dict]</code> <p>Right adornment props.</p> <code>None</code> <code>right_section_width</code> <code>Optional[str]</code> <p>Right adornment width.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>sort_dates</code> <code>Optional[bool]</code> <p>Sort selected dates.</p> <code>None</code> <code>type</code> <code>Optional[str]</code> <p>Picker mode.</p> <code>None</code> <code>value_format</code> <code>Optional[str]</code> <p>Output value format.</p> <code>None</code> <code>weekday_format</code> <code>Optional[str]</code> <p>Weekday label format.</p> <code>None</code> <code>weekend_days</code> <code>Optional[list]</code> <p>Weekend days indices.</p> <code>None</code> <code>with_asterisk</code> <code>Optional[bool]</code> <p>Show required asterisk.</p> <code>None</code> <code>with_cell_spacing</code> <code>Optional[bool]</code> <p>Add spacing between cells.</p> <code>None</code> <code>with_error_styles</code> <code>Optional[bool]</code> <p>Apply error styles.</p> <code>None</code> <code>with_week_numbers</code> <code>Optional[bool]</code> <p>Show week numbers.</p> <code>None</code> <code>wrapper_props</code> <code>Optional[dict]</code> <p>Wrapper props.</p> <code>None</code> <code>year_label_format</code> <code>Optional[str]</code> <p>Year label format.</p> <code>None</code> <code>years_list_format</code> <code>Optional[str]</code> <p>Years list format.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Optional[Union[date, list[date], tuple[date, date]]]</code> <p>Optional[Union[datetime.date, list[datetime.date], tuple[datetime.date, datetime.date]]]: Current value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def date_picker_input(\n    self,\n    label: str,\n    value: Optional[\n        Union[\n            datetime.date,\n            str,\n            list[str],\n            list[datetime.date],\n            tuple[str, str],\n            tuple[datetime.date, datetime.date],\n        ]\n    ] = None,\n    *,\n    key: Optional[str] = None,\n    description: Optional[str] = None,\n    on_change: Optional[Callable[[Any], None]] = None,\n    allow_deselect: Optional[bool] = None,\n    allow_single_date_in_range: Optional[bool] = None,\n    aria_labels: Optional[dict] = None,\n    clear_button_props: Optional[dict] = None,\n    clearable: Optional[bool] = None,\n    close_on_change: Optional[bool] = None,\n    columns_to_scroll: Optional[int] = None,\n    decade_label_format: Optional[str] = None,\n    default_level: Optional[Literal[\"month\", \"year\", \"decade\"]] = None,\n    description_props: Optional[dict] = None,\n    disabled: Optional[bool] = None,\n    dropdown_type: Optional[Literal[\"modal\", \"popover\"]] = None,\n    enable_keyboard_navigation: Optional[bool] = None,\n    error: Optional[str] = None,\n    error_props: Optional[dict] = None,\n    first_day_of_week: Optional[Literal[0, 1, 2, 3, 4, 5, 6]] = None,\n    header_controls_order: Optional[list[Literal[\"level\", \"next\", \"previous\"]]] = None,\n    hide_outside_dates: Optional[bool] = None,\n    hide_weekdays: Optional[bool] = None,\n    highlight_today: Optional[bool] = None,\n    input_size: Optional[str] = None,\n    input_wrapper_order: Optional[list[Literal[\"input\", \"label\", \"description\", \"error\"]]] = None,\n    label_props: Optional[dict] = None,\n    label_separator: Optional[str] = None,\n    left_section: Optional[RouteLitElement] = None,\n    left_section_pointer_events: Optional[str] = None,\n    left_section_props: Optional[dict] = None,\n    left_section_width: Optional[str] = None,\n    level: Optional[Literal[\"month\", \"year\", \"decade\"]] = None,\n    locale: Optional[str] = None,\n    max_date: Optional[Union[str, datetime.date]] = None,\n    max_level: Optional[Literal[\"month\", \"year\", \"decade\"]] = None,\n    min_date: Optional[Union[str, datetime.date]] = None,\n    modal_props: Optional[dict] = None,\n    month_label_format: Optional[str] = None,\n    months_list_format: Optional[str] = None,\n    next_icon: Optional[RouteLitElement] = None,\n    next_label: Optional[str] = None,\n    number_of_columns: Optional[int] = None,\n    placeholder: Optional[str] = None,\n    pointer: Optional[bool] = None,\n    popover_props: Optional[dict] = None,\n    presets: Optional[list] = None,\n    previous_icon: Optional[RouteLitElement] = None,\n    previous_label: Optional[str] = None,\n    radius: Optional[Union[str, int]] = None,\n    read_only: Optional[bool] = None,\n    required: Optional[bool] = None,\n    right_section: Optional[RouteLitElement] = None,\n    right_section_pointer_events: Optional[str] = None,\n    right_section_props: Optional[dict] = None,\n    right_section_width: Optional[str] = None,\n    size: Optional[str] = None,\n    sort_dates: Optional[bool] = None,\n    type: Optional[str] = None,  # noqa: A002\n    value_format: Optional[str] = None,\n    weekday_format: Optional[str] = None,\n    weekend_days: Optional[list] = None,\n    with_asterisk: Optional[bool] = None,\n    with_cell_spacing: Optional[bool] = None,\n    with_error_styles: Optional[bool] = None,\n    with_week_numbers: Optional[bool] = None,\n    wrapper_props: Optional[dict] = None,\n    year_label_format: Optional[str] = None,\n    years_list_format: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; Optional[Union[datetime.date, list[datetime.date], tuple[datetime.date, datetime.date]]]:\n    \"\"\"\n    Text input with integrated date picker dropdown.\n\n    Args:\n        label (str): Field label.\n        value (Optional[...]): Current value in the selected mode.\n        key (Optional[str]): Explicit element key.\n        description (Optional[str]): Helper text.\n        on_change (Optional[Callable[[Any], None]]): Change handler.\n        allow_deselect (Optional[bool]): Allow clearing selection.\n        allow_single_date_in_range (Optional[bool]): Allow single date in range mode.\n        aria_labels (Optional[dict]): ARIA labels.\n        clear_button_props (Optional[dict]): Clear button props.\n        clearable (Optional[bool]): Enable clear button.\n        close_on_change (Optional[bool]): Close dropdown on change.\n        columns_to_scroll (Optional[int]): Months to scroll.\n        decade_label_format (Optional[str]): Decade label format.\n        default_level (Optional[Literal[\"month\", \"year\", \"decade\"]]): Initial calendar level.\n        description_props (Optional[dict]): Description props.\n        disabled (Optional[bool]): Disable interaction.\n        dropdown_type (Optional[Literal[\"modal\", \"popover\"]]): Dropdown type.\n        enable_keyboard_navigation (Optional[bool]): Enable keyboard navigation.\n        error (Optional[str]): Error message.\n        error_props (Optional[dict]): Error props.\n        first_day_of_week (Optional[Literal[0,1,2,3,4,5,6]]): First day of week.\n        header_controls_order (Optional[list[...]]): Header controls order.\n        hide_outside_dates (Optional[bool]): Hide outside month dates.\n        hide_weekdays (Optional[bool]): Hide weekday labels.\n        highlight_today (Optional[bool]): Highlight current date.\n        input_size (Optional[str]): Control size.\n        input_wrapper_order (Optional[list[Literal[\"input\",\"label\",\"description\",\"error\"]]]): Wrapper parts order.\n        label_props (Optional[dict]): Label props.\n        label_separator (Optional[str]): Separator for range values.\n        left_section (Optional[RouteLitElement]): Left adornment.\n        left_section_pointer_events (Optional[str]): Pointer events for left section.\n        left_section_props (Optional[dict]): Left adornment props.\n        left_section_width (Optional[str]): Left adornment width.\n        level (Optional[Literal[\"month\", \"year\", \"decade\"]]): Initial calendar level.\n        locale (Optional[str]): Locale code.\n        max_date (Optional[Union[str, datetime.date]]): Max date.\n        max_level (Optional[Literal[\"month\", \"year\", \"decade\"]]): Max calendar level.\n        min_date (Optional[Union[str, datetime.date]]): Min date.\n        modal_props (Optional[dict]): Modal props.\n        month_label_format (Optional[str]): Month label format.\n        months_list_format (Optional[str]): Months list format.\n        next_icon (Optional[RouteLitElement]): Next button icon.\n        next_label (Optional[str]): Next button label.\n        number_of_columns (Optional[int]): Months displayed.\n        placeholder (Optional[str]): Input placeholder.\n        pointer (Optional[bool]): Use pointer cursor.\n        popover_props (Optional[dict]): Popover props.\n        presets (Optional[list]): Preset ranges.\n        previous_icon (Optional[RouteLitElement]): Previous button icon.\n        previous_label (Optional[str]): Previous button label.\n        radius (Optional[Union[str, int]]): Corner radius.\n        read_only (Optional[bool]): Read-only state.\n        required (Optional[bool]): Mark as required.\n        right_section (Optional[RouteLitElement]): Right adornment.\n        right_section_pointer_events (Optional[str]): Pointer events for right section.\n        right_section_props (Optional[dict]): Right adornment props.\n        right_section_width (Optional[str]): Right adornment width.\n        size (Optional[str]): Control size.\n        sort_dates (Optional[bool]): Sort selected dates.\n        type (Optional[str]): Picker mode.\n        value_format (Optional[str]): Output value format.\n        weekday_format (Optional[str]): Weekday label format.\n        weekend_days (Optional[list]): Weekend days indices.\n        with_asterisk (Optional[bool]): Show required asterisk.\n        with_cell_spacing (Optional[bool]): Add spacing between cells.\n        with_error_styles (Optional[bool]): Apply error styles.\n        with_week_numbers (Optional[bool]): Show week numbers.\n        wrapper_props (Optional[dict]): Wrapper props.\n        year_label_format (Optional[str]): Year label format.\n        years_list_format (Optional[str]): Years list format.\n        kwargs: Additional props to set.\n\n    Returns:\n        Optional[Union[datetime.date, list[datetime.date], tuple[datetime.date, datetime.date]]]: Current value.\n    \"\"\"\n    return cast(\n        Optional[\n            Union[\n                datetime.date,\n                list[datetime.date],\n                tuple[datetime.date, datetime.date],\n            ]\n        ],\n        self._x_input(\n            \"datepickerinput\",\n            key or self._new_widget_id(\"datepickerinput\", label),\n            label=label,\n            description=description,\n            value=value,\n            allowDeselect=allow_deselect,\n            allowSingleDateInRange=allow_single_date_in_range,\n            ariaLabels=aria_labels,\n            clearButtonProps=clear_button_props,\n            clearable=clearable,\n            closeOnChange=close_on_change,\n            columnsToScroll=columns_to_scroll,\n            decadeLabelFormat=decade_label_format,\n            defaultLevel=default_level,\n            descriptionProps=description_props,\n            disabled=disabled,\n            dropdownType=dropdown_type,\n            enableKeyboardNavigation=enable_keyboard_navigation,\n            error=error,\n            errorProps=error_props,\n            firstDayOfWeek=first_day_of_week,\n            headerControlsOrder=header_controls_order,\n            hideOutsideDates=hide_outside_dates,\n            hideWeekdays=hide_weekdays,\n            highlightToday=highlight_today,\n            inputSize=input_size,\n            inputWrapperOrder=input_wrapper_order,\n            labelProps=label_props,\n            labelSeparator=label_separator,\n            leftSection=left_section,\n            leftSectionPointerEvents=left_section_pointer_events,\n            leftSectionProps=left_section_props,\n            leftSectionWidth=left_section_width,\n            level=level,\n            locale=locale,\n            maxDate=max_date,\n            maxLevel=max_level,\n            minDate=min_date,\n            modalProps=modal_props,\n            monthLabelFormat=month_label_format,\n            monthsListFormat=months_list_format,\n            nextIcon=next_icon,\n            nextLabel=next_label,\n            numberOfColumns=number_of_columns,\n            on_change=on_change,\n            placeholder=placeholder,\n            pointer=pointer,\n            popoverProps=popover_props,\n            presets=presets,\n            previousIcon=previous_icon,\n            previousLabel=previous_label,\n            radius=radius,\n            readOnly=read_only,\n            required=required,\n            rightSection=right_section,\n            rightSectionPointerEvents=right_section_pointer_events,\n            rightSectionProps=right_section_props,\n            rightSectionWidth=right_section_width,\n            size=size,\n            sortDates=sort_dates,\n            type=type,\n            valueFormat=value_format,\n            weekdayFormat=weekday_format,\n            weekendDays=weekend_days,\n            withAsterisk=with_asterisk,\n            withCellSpacing=with_cell_spacing,\n            withErrorStyles=with_error_styles,\n            withWeekNumbers=with_week_numbers,\n            wrapperProps=wrapper_props,\n            yearLabelFormat=year_label_format,\n            yearsListFormat=years_list_format,\n            rl_format_func=self._format_date_picker,\n            **kwargs,\n        ),\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.date_time_picker","title":"<code>date_time_picker(label, value=None, *, clearable=None, columns_to_scroll=None, description=None, disabled=None, dropdown_type=None, error=None, first_day_of_week=None, header_controls_order=None, hide_outside_dates=None, hide_weekdays=None, highlight_today=None, input_size=None, input_wrapper_order=None, label_props=None, label_separator=None, left_section=None, left_section_props=None, left_section_width=None, level=None, locale=None, max_date=None, max_level=None, min_date=None, months_list_format=None, number_of_columns=None, next_label=None, next_icon=None, on_change=None, popover_props=None, presets=None, previous_icon=None, previous_label=None, placeholder=None, radius=None, read_only=None, required=None, right_section=None, right_section_pointer_events=None, right_section_props=None, right_section_width=None, size=None, sort_dates=None, submit_button_props=None, time_picker_props=None, value_format=None, weekday_format=None, weekend_days=None, with_asterisk=None, with_cell_spacing=None, with_error_styles=None, with_seconds=None, with_week_numbers=None, wrapper_props=None, year_label_format=None, years_list_format=None, pointer=None, key=None, **kwargs)</code>","text":"<p>Date-time picker input with calendar and time selection.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>value</code> <code>Optional[Union[datetime, str]]</code> <p>Current value.</p> <code>None</code> <code>clearable</code> <code>Optional[bool]</code> <p>Show clear button.</p> <code>None</code> <code>columns_to_scroll</code> <code>Optional[int]</code> <p>Number of months to scroll.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable interaction.</p> <code>None</code> <code>dropdown_type</code> <code>Optional[Literal['modal', 'popover']]</code> <p>Dropdown type.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>first_day_of_week</code> <code>Optional[Literal[0, 1, 2, 3, 4, 5, 6]]</code> <p>First day of week.</p> <code>None</code> <code>header_controls_order</code> <code>Optional[list[Literal['level', 'next', 'previous']]]</code> <p>Header controls order.</p> <code>None</code> <code>hide_outside_dates</code> <code>Optional[bool]</code> <p>Hide outside month dates.</p> <code>None</code> <code>hide_weekdays</code> <code>Optional[bool]</code> <p>Hide weekday labels.</p> <code>None</code> <code>highlight_today</code> <code>Optional[bool]</code> <p>Highlight current date.</p> <code>None</code> <code>input_size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>input_wrapper_order</code> <code>Optional[list[str]]</code> <p>Input wrapper parts order.</p> <code>None</code> <code>label_props</code> <code>Optional[dict[str, Any]]</code> <p>Label props.</p> <code>None</code> <code>label_separator</code> <code>Optional[str]</code> <p>Separator between date and time.</p> <code>None</code> <code>left_section</code> <code>Optional[RouteLitElement]</code> <p>Left adornment.</p> <code>None</code> <code>left_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Left adornment props.</p> <code>None</code> <code>left_section_width</code> <code>Optional[str]</code> <p>Left adornment width.</p> <code>None</code> <code>level</code> <code>Optional[Literal['month', 'year', 'decade']]</code> <p>Initial calendar level.</p> <code>None</code> <code>locale</code> <code>Optional[str]</code> <p>Locale code.</p> <code>None</code> <code>max_date</code> <code>Optional[Union[datetime, str]]</code> <p>Max date.</p> <code>None</code> <code>max_level</code> <code>Optional[Literal['month', 'year', 'decade']]</code> <p>Max calendar level.</p> <code>None</code> <code>min_date</code> <code>Optional[Union[datetime, str]]</code> <p>Min date.</p> <code>None</code> <code>months_list_format</code> <code>Optional[str]</code> <p>Months list format.</p> <code>None</code> <code>number_of_columns</code> <code>Optional[int]</code> <p>Number of months displayed.</p> <code>None</code> <code>next_label</code> <code>Optional[str]</code> <p>Next button label.</p> <code>None</code> <code>next_icon</code> <code>Optional[RouteLitElement]</code> <p>Next button icon.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[datetime], None]]</code> <p>Change handler.</p> <code>None</code> <code>popover_props</code> <code>Optional[dict[str, Any]]</code> <p>Popover props.</p> <code>None</code> <code>presets</code> <code>Optional[list[dict[str, Any]]]</code> <p>Presets configuration.</p> <code>None</code> <code>previous_icon</code> <code>Optional[RouteLitElement]</code> <p>Previous button icon.</p> <code>None</code> <code>previous_label</code> <code>Optional[str]</code> <p>Previous button label.</p> <code>None</code> <code>placeholder</code> <code>Optional[str]</code> <p>Input placeholder.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Corner radius.</p> <code>None</code> <code>read_only</code> <code>Optional[bool]</code> <p>Read-only state.</p> <code>None</code> <code>required</code> <code>Optional[bool]</code> <p>Mark as required.</p> <code>None</code> <code>right_section</code> <code>Optional[RouteLitElement]</code> <p>Right adornment.</p> <code>None</code> <code>right_section_pointer_events</code> <code>Optional[str]</code> <p>Pointer events for right section.</p> <code>None</code> <code>right_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Right adornment props.</p> <code>None</code> <code>right_section_width</code> <code>Optional[str]</code> <p>Right adornment width.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>sort_dates</code> <code>Optional[bool]</code> <p>Sort selected dates.</p> <code>None</code> <code>submit_button_props</code> <code>Optional[dict[str, Any]]</code> <p>Submit button props.</p> <code>None</code> <code>time_picker_props</code> <code>Optional[dict[str, Any]]</code> <p>Time picker props.</p> <code>None</code> <code>value_format</code> <code>Optional[str]</code> <p>Output value format.</p> <code>None</code> <code>weekday_format</code> <code>Optional[str]</code> <p>Weekday label format.</p> <code>None</code> <code>weekend_days</code> <code>Optional[list[Literal[0, 1, 2, 3, 4, 5, 6]]]</code> <p>Weekend days indices.</p> <code>None</code> <code>with_asterisk</code> <code>Optional[bool]</code> <p>Show required asterisk.</p> <code>None</code> <code>with_cell_spacing</code> <code>Optional[bool]</code> <p>Add spacing between cells.</p> <code>None</code> <code>with_error_styles</code> <code>Optional[bool]</code> <p>Apply error styles.</p> <code>None</code> <code>with_seconds</code> <code>Optional[bool]</code> <p>Include seconds selector.</p> <code>None</code> <code>with_week_numbers</code> <code>Optional[bool]</code> <p>Show week numbers.</p> <code>None</code> <code>wrapper_props</code> <code>Optional[dict[str, Any]]</code> <p>Wrapper props.</p> <code>None</code> <code>year_label_format</code> <code>Optional[str]</code> <p>Year label format.</p> <code>None</code> <code>years_list_format</code> <code>Optional[str]</code> <p>Years list format.</p> <code>None</code> <code>pointer</code> <code>Optional[bool]</code> <p>Use pointer cursor.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Optional[datetime]</code> <p>Optional[datetime.datetime]: Current value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def date_time_picker(\n    self,\n    label: str,\n    value: Optional[Union[datetime.datetime, str]] = None,\n    *,\n    clearable: Optional[bool] = None,\n    columns_to_scroll: Optional[int] = None,\n    description: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    dropdown_type: Optional[Literal[\"modal\", \"popover\"]] = None,\n    error: Optional[str] = None,\n    first_day_of_week: Optional[Literal[0, 1, 2, 3, 4, 5, 6]] = None,\n    header_controls_order: Optional[list[Literal[\"level\", \"next\", \"previous\"]]] = None,\n    hide_outside_dates: Optional[bool] = None,\n    hide_weekdays: Optional[bool] = None,\n    highlight_today: Optional[bool] = None,\n    input_size: Optional[str] = None,\n    input_wrapper_order: Optional[list[str]] = None,\n    label_props: Optional[dict[str, Any]] = None,\n    label_separator: Optional[str] = None,\n    left_section: Optional[RouteLitElement] = None,\n    left_section_props: Optional[dict[str, Any]] = None,\n    left_section_width: Optional[str] = None,\n    level: Optional[Literal[\"month\", \"year\", \"decade\"]] = None,\n    locale: Optional[str] = None,\n    max_date: Optional[Union[datetime.datetime, str]] = None,\n    max_level: Optional[Literal[\"month\", \"year\", \"decade\"]] = None,\n    min_date: Optional[Union[datetime.datetime, str]] = None,\n    months_list_format: Optional[str] = None,\n    number_of_columns: Optional[int] = None,\n    next_label: Optional[str] = None,\n    next_icon: Optional[RouteLitElement] = None,\n    on_change: Optional[Callable[[datetime.datetime], None]] = None,\n    popover_props: Optional[dict[str, Any]] = None,\n    presets: Optional[list[dict[str, Any]]] = None,\n    previous_icon: Optional[RouteLitElement] = None,\n    previous_label: Optional[str] = None,\n    placeholder: Optional[str] = None,\n    radius: Optional[Union[str, int]] = None,\n    read_only: Optional[bool] = None,\n    required: Optional[bool] = None,\n    right_section: Optional[RouteLitElement] = None,\n    right_section_pointer_events: Optional[str] = None,\n    right_section_props: Optional[dict[str, Any]] = None,\n    right_section_width: Optional[str] = None,\n    size: Optional[str] = None,\n    sort_dates: Optional[bool] = None,\n    submit_button_props: Optional[dict[str, Any]] = None,\n    time_picker_props: Optional[dict[str, Any]] = None,\n    value_format: Optional[str] = None,\n    weekday_format: Optional[str] = None,\n    weekend_days: Optional[list[Literal[0, 1, 2, 3, 4, 5, 6]]] = None,\n    with_asterisk: Optional[bool] = None,\n    with_cell_spacing: Optional[bool] = None,\n    with_error_styles: Optional[bool] = None,\n    with_seconds: Optional[bool] = None,\n    with_week_numbers: Optional[bool] = None,\n    wrapper_props: Optional[dict[str, Any]] = None,\n    year_label_format: Optional[str] = None,\n    years_list_format: Optional[str] = None,\n    pointer: Optional[bool] = None,\n    key: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; Optional[datetime.datetime]:\n    \"\"\"\n    Date-time picker input with calendar and time selection.\n\n    Args:\n        label (str): Field label.\n        value (Optional[Union[datetime.datetime, str]]): Current value.\n        clearable (Optional[bool]): Show clear button.\n        columns_to_scroll (Optional[int]): Number of months to scroll.\n        description (Optional[str]): Helper text under the label.\n        disabled (Optional[bool]): Disable interaction.\n        dropdown_type (Optional[Literal[\"modal\", \"popover\"]]): Dropdown type.\n        error (Optional[str]): Error message.\n        first_day_of_week (Optional[Literal[0,1,2,3,4,5,6]]): First day of week.\n        header_controls_order (Optional[list[Literal[\"level\", \"next\", \"previous\"]]]): Header controls order.\n        hide_outside_dates (Optional[bool]): Hide outside month dates.\n        hide_weekdays (Optional[bool]): Hide weekday labels.\n        highlight_today (Optional[bool]): Highlight current date.\n        input_size (Optional[str]): Control size.\n        input_wrapper_order (Optional[list[str]]): Input wrapper parts order.\n        label_props (Optional[dict[str, Any]]): Label props.\n        label_separator (Optional[str]): Separator between date and time.\n        left_section (Optional[RouteLitElement]): Left adornment.\n        left_section_props (Optional[dict[str, Any]]): Left adornment props.\n        left_section_width (Optional[str]): Left adornment width.\n        level (Optional[Literal[\"month\", \"year\", \"decade\"]]): Initial calendar level.\n        locale (Optional[str]): Locale code.\n        max_date (Optional[Union[datetime.datetime, str]]): Max date.\n        max_level (Optional[Literal[\"month\", \"year\", \"decade\"]]): Max calendar level.\n        min_date (Optional[Union[datetime.datetime, str]]): Min date.\n        months_list_format (Optional[str]): Months list format.\n        number_of_columns (Optional[int]): Number of months displayed.\n        next_label (Optional[str]): Next button label.\n        next_icon (Optional[RouteLitElement]): Next button icon.\n        on_change (Optional[Callable[[datetime.datetime], None]]): Change handler.\n        popover_props (Optional[dict[str, Any]]): Popover props.\n        presets (Optional[list[dict[str, Any]]]): Presets configuration.\n        previous_icon (Optional[RouteLitElement]): Previous button icon.\n        previous_label (Optional[str]): Previous button label.\n        placeholder (Optional[str]): Input placeholder.\n        radius (Optional[Union[str, int]]): Corner radius.\n        read_only (Optional[bool]): Read-only state.\n        required (Optional[bool]): Mark as required.\n        right_section (Optional[RouteLitElement]): Right adornment.\n        right_section_pointer_events (Optional[str]): Pointer events for right section.\n        right_section_props (Optional[dict[str, Any]]): Right adornment props.\n        right_section_width (Optional[str]): Right adornment width.\n        size (Optional[str]): Control size.\n        sort_dates (Optional[bool]): Sort selected dates.\n        submit_button_props (Optional[dict[str, Any]]): Submit button props.\n        time_picker_props (Optional[dict[str, Any]]): Time picker props.\n        value_format (Optional[str]): Output value format.\n        weekday_format (Optional[str]): Weekday label format.\n        weekend_days (Optional[list[Literal[0,1,2,3,4,5,6]]]): Weekend days indices.\n        with_asterisk (Optional[bool]): Show required asterisk.\n        with_cell_spacing (Optional[bool]): Add spacing between cells.\n        with_error_styles (Optional[bool]): Apply error styles.\n        with_seconds (Optional[bool]): Include seconds selector.\n        with_week_numbers (Optional[bool]): Show week numbers.\n        wrapper_props (Optional[dict[str, Any]]): Wrapper props.\n        year_label_format (Optional[str]): Year label format.\n        years_list_format (Optional[str]): Years list format.\n        pointer (Optional[bool]): Use pointer cursor.\n        key (Optional[str]): Explicit element key.\n        kwargs: Additional props to set.\n\n    Returns:\n        Optional[datetime.datetime]: Current value.\n    \"\"\"\n    return cast(\n        Optional[datetime.datetime],\n        self._x_input(\n            \"datetimepicker\",\n            key or self._new_widget_id(\"datetimepicker\", label),\n            clearable=clearable,\n            columnsToScroll=columns_to_scroll,\n            description=description,\n            disabled=disabled,\n            dropdownType=dropdown_type,\n            error=error,\n            firstDayOfWeek=first_day_of_week,\n            headerControlsOrder=header_controls_order,\n            hideOutsideDates=hide_outside_dates,\n            hideWeekdays=hide_weekdays,\n            highlightToday=highlight_today,\n            inputSize=input_size,\n            inputWrapperOrder=input_wrapper_order,\n            label=label,\n            labelProps=label_props,\n            labelSeparator=label_separator,\n            value=value,\n            leftSection=left_section,\n            leftSectionProps=left_section_props,\n            leftSectionWidth=left_section_width,\n            level=level,\n            locale=locale,\n            maxDate=max_date,\n            maxLevel=max_level,\n            minDate=min_date,\n            monthsListFormat=months_list_format,\n            nextIcon=next_icon,\n            nextLabel=next_label,\n            numberOfColumns=number_of_columns,\n            on_change=on_change,\n            popoverProps=popover_props,\n            presets=presets,\n            previousIcon=previous_icon,\n            previousLabel=previous_label,\n            placeholder=placeholder,\n            radius=radius,\n            readOnly=read_only,\n            required=required,\n            rightSection=right_section,\n            rightSectionPointerEvents=right_section_pointer_events,\n            rightSectionProps=right_section_props,\n            rightSectionWidth=right_section_width,\n            rl_format_func=self._format_datetime,\n            size=size,\n            sortDates=sort_dates,\n            submitButtonProps=submit_button_props,\n            timePickerProps=time_picker_props,\n            valueFormat=value_format,\n            weekdayFormat=weekday_format,\n            weekendDays=weekend_days,\n            withAsterisk=with_asterisk,\n            withCellSpacing=with_cell_spacing,\n            withErrorStyles=with_error_styles,\n            withSeconds=with_seconds,\n            withWeekNumbers=with_week_numbers,\n            wrapperProps=wrapper_props,\n            yearLabelFormat=year_label_format,\n            yearsListFormat=years_list_format,\n            pointer=pointer,\n            **kwargs,\n        ),\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.dialog","title":"<code>dialog(key=None, *, with_close_button=None, **kwargs)</code>","text":"<p>Open a dialog container for arbitrary content.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>with_close_button</code> <code>Optional[bool]</code> <p>Show close button.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the dialog element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def dialog(\n    self,\n    key: Optional[str] = None,\n    *,\n    with_close_button: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Open a dialog container for arbitrary content.\n\n    Args:\n        key (Optional[str]): Explicit element key.\n        with_close_button (Optional[bool]): Show close button.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the dialog element.\n    \"\"\"\n    return super()._x_dialog(  # type: ignore[return-value]\n        \"dialog\",\n        key or self._new_text_id(\"dialog\"),\n        opened=True,\n        withCloseButton=with_close_button,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.donut_chart","title":"<code>donut_chart(data, *, chart_label=None, end_angle=None, key=None, label_color=None, labels_type=None, padding_angle=None, pie_chart_props=None, pie_props=None, size=None, start_angle=None, stroke_color=None, stroke_width=None, thickness=None, tooltip_animation_duration=None, tooltip_data_source=None, tooltip_props=None, with_labels=None, with_labels_line=None, with_tooltip=None, **kwargs)</code>","text":"<p>Donut chart to visualize parts of a whole.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list</code> <p>Dataset.</p> required <code>chart_label</code> <code>Optional[Union[str, int]]</code> <p>Center label.</p> <code>None</code> <code>end_angle</code> <code>Optional[int]</code> <p>End angle.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>label_color</code> <code>Optional[str]</code> <p>Label color.</p> <code>None</code> <code>labels_type</code> <code>Optional[str]</code> <p>Label content type.</p> <code>None</code> <code>padding_angle</code> <code>Optional[int]</code> <p>Angle between segments.</p> <code>None</code> <code>pie_chart_props</code> <code>Optional[dict[str, Any]]</code> <p>Chart container props.</p> <code>None</code> <code>pie_props</code> <code>Optional[dict[str, Any]]</code> <p>Pie props.</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>Chart size.</p> <code>None</code> <code>start_angle</code> <code>Optional[int]</code> <p>Start angle.</p> <code>None</code> <code>stroke_color</code> <code>Optional[str]</code> <p>Segment border color.</p> <code>None</code> <code>stroke_width</code> <code>Optional[int]</code> <p>Segment border width.</p> <code>None</code> <code>thickness</code> <code>Optional[int]</code> <p>Ring thickness.</p> <code>None</code> <code>tooltip_animation_duration</code> <code>Optional[int]</code> <p>Tooltip animation duration.</p> <code>None</code> <code>tooltip_data_source</code> <code>Optional[Literal['all', 'segment']]</code> <p>Tooltip data source.</p> <code>None</code> <code>tooltip_props</code> <code>Optional[dict[str, Any]]</code> <p>Tooltip props.</p> <code>None</code> <code>with_labels</code> <code>Optional[bool]</code> <p>Show labels.</p> <code>None</code> <code>with_labels_line</code> <code>Optional[bool]</code> <p>Show label connector lines.</p> <code>None</code> <code>with_tooltip</code> <code>Optional[bool]</code> <p>Show tooltip.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the donut chart element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def donut_chart(\n    self,\n    data: list,\n    *,\n    chart_label: Optional[Union[str, int]] = None,\n    end_angle: Optional[int] = None,\n    key: Optional[str] = None,\n    label_color: Optional[str] = None,\n    labels_type: Optional[str] = None,\n    padding_angle: Optional[int] = None,\n    pie_chart_props: Optional[dict[str, Any]] = None,\n    pie_props: Optional[dict[str, Any]] = None,\n    size: Optional[int] = None,\n    start_angle: Optional[int] = None,\n    stroke_color: Optional[str] = None,\n    stroke_width: Optional[int] = None,\n    thickness: Optional[int] = None,\n    tooltip_animation_duration: Optional[int] = None,\n    tooltip_data_source: Optional[Literal[\"all\", \"segment\"]] = None,\n    tooltip_props: Optional[dict[str, Any]] = None,\n    with_labels: Optional[bool] = None,\n    with_labels_line: Optional[bool] = None,\n    with_tooltip: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Donut chart to visualize parts of a whole.\n\n    Args:\n        data (list): Dataset.\n        chart_label (Optional[Union[str, int]]): Center label.\n        end_angle (Optional[int]): End angle.\n        key (Optional[str]): Explicit element key.\n        label_color (Optional[str]): Label color.\n        labels_type (Optional[str]): Label content type.\n        padding_angle (Optional[int]): Angle between segments.\n        pie_chart_props (Optional[dict[str, Any]]): Chart container props.\n        pie_props (Optional[dict[str, Any]]): Pie props.\n        size (Optional[int]): Chart size.\n        start_angle (Optional[int]): Start angle.\n        stroke_color (Optional[str]): Segment border color.\n        stroke_width (Optional[int]): Segment border width.\n        thickness (Optional[int]): Ring thickness.\n        tooltip_animation_duration (Optional[int]): Tooltip animation duration.\n        tooltip_data_source (Optional[Literal[\"all\",\"segment\"]]): Tooltip data source.\n        tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n        with_labels (Optional[bool]): Show labels.\n        with_labels_line (Optional[bool]): Show label connector lines.\n        with_tooltip (Optional[bool]): Show tooltip.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the donut chart element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"donutchart\",\n        key=key or self._new_text_id(\"donutchart\"),\n        props={\n            \"data\": data,\n            \"chartLabel\": chart_label,\n            \"endAngle\": end_angle,\n            \"labelColor\": label_color,\n            \"labelsType\": labels_type,\n            \"paddingAngle\": padding_angle,\n            \"pieChartProps\": pie_chart_props,\n            \"pieProps\": pie_props,\n            \"size\": size,\n            \"startAngle\": start_angle,\n            \"strokeColor\": stroke_color,\n            \"strokeWidth\": stroke_width,\n            \"thickness\": thickness,\n            \"tooltipAnimationDuration\": tooltip_animation_duration,\n            \"tooltipDataSource\": tooltip_data_source,\n            \"tooltipProps\": tooltip_props,\n            \"withLabels\": with_labels,\n            \"withLabelsLine\": with_labels_line,\n            \"withTooltip\": with_tooltip,\n            **kwargs,\n        },\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.drawer","title":"<code>drawer(key=None, *, close_button_props=None, close_on_click_outside=None, close_on_escape=None, on_close=None, keep_mounted=None, lock_scroll=None, offset=None, overlay_props=None, padding=None, portal_props=None, position=None, radius=None, remove_scroll_props=None, return_focus=None, scroll_area_component=None, shadow=None, size=None, stack_id=None, title=None, transition_props=None, trap_focus=None, with_close_button=None, with_overlay=None, within_portal=None, z_index=None, **kwargs)</code>","text":"<p>Drawer component that slides from screen edges.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>close_button_props</code> <code>Optional[dict]</code> <p>Close button props.</p> <code>None</code> <code>close_on_click_outside</code> <code>Optional[bool]</code> <p>Close when clicking outside.</p> <code>None</code> <code>close_on_escape</code> <code>Optional[bool]</code> <p>Close on Escape key.</p> <code>None</code> <code>on_close</code> <code>Optional[Callable[[], bool]]</code> <p>Close handler.</p> <code>None</code> <code>keep_mounted</code> <code>Optional[bool]</code> <p>Keep in DOM when closed.</p> <code>None</code> <code>lock_scroll</code> <code>Optional[bool]</code> <p>Lock document scroll when opened.</p> <code>None</code> <code>offset</code> <code>Optional[Union[str, int]]</code> <p>Offset from viewport edges.</p> <code>None</code> <code>overlay_props</code> <code>Optional[dict]</code> <p>Overlay props.</p> <code>None</code> <code>padding</code> <code>Optional[Union[str, int]]</code> <p>Content padding.</p> <code>None</code> <code>portal_props</code> <code>Optional[dict]</code> <p>Portal props.</p> <code>None</code> <code>position</code> <code>Optional[str]</code> <p>Edge position.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Corner radius.</p> <code>None</code> <code>remove_scroll_props</code> <code>Optional[dict]</code> <p>Remove scroll props.</p> <code>None</code> <code>return_focus</code> <code>Optional[bool]</code> <p>Return focus to trigger on close.</p> <code>None</code> <code>scroll_area_component</code> <code>Optional[str]</code> <p>Custom scroll area component.</p> <code>None</code> <code>shadow</code> <code>Optional[str]</code> <p>Shadow preset.</p> <code>None</code> <code>size</code> <code>Optional[Union[str, int]]</code> <p>Drawer size.</p> <code>None</code> <code>stack_id</code> <code>Optional[str]</code> <p>Stack identifier.</p> <code>None</code> <code>title</code> <code>Optional[str]</code> <p>Header title.</p> <code>None</code> <code>transition_props</code> <code>Optional[dict]</code> <p>Transition props.</p> <code>None</code> <code>trap_focus</code> <code>Optional[bool]</code> <p>Trap focus inside drawer.</p> <code>None</code> <code>with_close_button</code> <code>Optional[bool]</code> <p>Show close button.</p> <code>None</code> <code>with_overlay</code> <code>Optional[bool]</code> <p>Show overlay.</p> <code>None</code> <code>within_portal</code> <code>Optional[bool]</code> <p>Render within portal.</p> <code>None</code> <code>z_index</code> <code>Optional[Union[str, int]]</code> <p>CSS z-index.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the drawer element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def drawer(\n    self,\n    key: Optional[str] = None,\n    *,\n    close_button_props: Optional[dict] = None,\n    close_on_click_outside: Optional[bool] = None,\n    close_on_escape: Optional[bool] = None,\n    on_close: Optional[Callable[[], bool]] = None,\n    keep_mounted: Optional[bool] = None,\n    lock_scroll: Optional[bool] = None,\n    offset: Optional[Union[str, int]] = None,\n    overlay_props: Optional[dict] = None,\n    padding: Optional[Union[str, int]] = None,\n    portal_props: Optional[dict] = None,\n    position: Optional[str] = None,\n    radius: Optional[Union[str, int]] = None,\n    remove_scroll_props: Optional[dict] = None,\n    return_focus: Optional[bool] = None,\n    scroll_area_component: Optional[str] = None,\n    shadow: Optional[str] = None,\n    size: Optional[Union[str, int]] = None,\n    stack_id: Optional[str] = None,\n    title: Optional[str] = None,\n    transition_props: Optional[dict] = None,\n    trap_focus: Optional[bool] = None,\n    with_close_button: Optional[bool] = None,\n    with_overlay: Optional[bool] = None,\n    within_portal: Optional[bool] = None,\n    z_index: Optional[Union[str, int]] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Drawer component that slides from screen edges.\n\n    Args:\n        key (Optional[str]): Explicit element key.\n        close_button_props (Optional[dict]): Close button props.\n        close_on_click_outside (Optional[bool]): Close when clicking outside.\n        close_on_escape (Optional[bool]): Close on Escape key.\n        on_close (Optional[Callable[[], bool]]): Close handler.\n        keep_mounted (Optional[bool]): Keep in DOM when closed.\n        lock_scroll (Optional[bool]): Lock document scroll when opened.\n        offset (Optional[Union[str, int]]): Offset from viewport edges.\n        overlay_props (Optional[dict]): Overlay props.\n        padding (Optional[Union[str, int]]): Content padding.\n        portal_props (Optional[dict]): Portal props.\n        position (Optional[str]): Edge position.\n        radius (Optional[Union[str, int]]): Corner radius.\n        remove_scroll_props (Optional[dict]): Remove scroll props.\n        return_focus (Optional[bool]): Return focus to trigger on close.\n        scroll_area_component (Optional[str]): Custom scroll area component.\n        shadow (Optional[str]): Shadow preset.\n        size (Optional[Union[str, int]]): Drawer size.\n        stack_id (Optional[str]): Stack identifier.\n        title (Optional[str]): Header title.\n        transition_props (Optional[dict]): Transition props.\n        trap_focus (Optional[bool]): Trap focus inside drawer.\n        with_close_button (Optional[bool]): Show close button.\n        with_overlay (Optional[bool]): Show overlay.\n        within_portal (Optional[bool]): Render within portal.\n        z_index (Optional[Union[str, int]]): CSS z-index.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the drawer element.\n    \"\"\"\n    return super()._x_dialog(  # type: ignore[return-value]\n        \"drawer\",\n        key or self._new_text_id(\"drawer\"),\n        opened=True,\n        closeButtonProps=close_button_props,\n        closeOnClickOutside=close_on_click_outside,\n        closeOnEscape=close_on_escape,\n        keepMounted=keep_mounted,\n        lockScroll=lock_scroll,\n        offset=offset,\n        on_close=on_close,\n        overlayProps=overlay_props,\n        padding=padding,\n        portalProps=portal_props,\n        position=position,\n        radius=radius,\n        removeScrollProps=remove_scroll_props,\n        returnFocus=return_focus,\n        scrollAreaComponent=scroll_area_component,\n        shadow=shadow,\n        size=size,\n        stackId=stack_id,\n        title=title,\n        transitionProps=transition_props,\n        trapFocus=trap_focus,\n        withCloseButton=with_close_button,\n        withOverlay=with_overlay,\n        withinPortal=within_portal,\n        zIndex=z_index,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.expander","title":"<code>expander(title, *, is_open=None, key=None, chevron=None, chevron_icon_size=None, chevron_position=None, chevron_size=None, disabled=None, disable_chevron_rotation=None, icon=None, radius=None, transition_duration=None, variant=None, **kwargs)</code>","text":"<p>Expander component. This is a wrapper around the accordion component.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>Title text shown in the expander header</p> required <code>is_open</code> <code>Optional[bool]</code> <p>Whether the expander is initially expanded</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Unique key for the component</p> <code>None</code> <code>chevron</code> <code>Optional[Any]</code> <p>Custom chevron element</p> <code>None</code> <code>chevron_icon_size</code> <code>Optional[Union[str, int]]</code> <p>Size of the chevron icon</p> <code>None</code> <code>chevron_position</code> <code>Optional[str]</code> <p>Position of the chevron icon</p> <code>None</code> <code>chevron_size</code> <code>Optional[Union[str, int]]</code> <p>Size of the chevron container</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Whether the expander is disabled</p> <code>None</code> <code>disable_chevron_rotation</code> <code>Optional[bool]</code> <p>Whether to disable chevron rotation animation</p> <code>None</code> <code>icon</code> <code>Optional[RouteLitElement]</code> <p>Icon element shown before the title</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Border radius</p> <code>None</code> <code>transition_duration</code> <code>Optional[int]</code> <p>Duration of expand/collapse animation in ms</p> <code>None</code> <code>variant</code> <code>Optional[Literal['default', 'filled', 'separated', 'contained', 'unstyled']]</code> <p>Visual variant</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to pass to the accordion component</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>Builder for the expander content</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def expander(\n    self,\n    title: str,\n    *,\n    is_open: Optional[bool] = None,\n    key: Optional[str] = None,\n    chevron: Optional[Any] = None,\n    chevron_icon_size: Optional[Union[str, int]] = None,\n    chevron_position: Optional[str] = None,\n    chevron_size: Optional[Union[str, int]] = None,\n    disabled: Optional[bool] = None,\n    disable_chevron_rotation: Optional[bool] = None,\n    icon: Optional[RouteLitElement] = None,\n    radius: Optional[Union[str, int]] = None,\n    transition_duration: Optional[int] = None,\n    variant: Optional[Literal[\"default\", \"filled\", \"separated\", \"contained\", \"unstyled\"]] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Expander component.\n    This is a wrapper around the accordion component.\n\n    Args:\n        title (str): Title text shown in the expander header\n        is_open (Optional[bool]): Whether the expander is initially expanded\n        key (Optional[str]): Unique key for the component\n        chevron (Optional[Any]): Custom chevron element\n        chevron_icon_size (Optional[Union[str, int]]): Size of the chevron icon\n        chevron_position (Optional[str]): Position of the chevron icon\n        chevron_size (Optional[Union[str, int]]): Size of the chevron container\n        disabled (Optional[bool]): Whether the expander is disabled\n        disable_chevron_rotation (Optional[bool]): Whether to disable chevron rotation animation\n        icon (Optional[RouteLitElement]): Icon element shown before the title\n        radius (Optional[Union[str, int]]): Border radius\n        transition_duration (Optional[int]): Duration of expand/collapse animation in ms\n        variant (Optional[Literal[\"default\", \"filled\", \"separated\", \"contained\", \"unstyled\"]]): Visual variant\n        kwargs (Any): Additional props to pass to the accordion component\n\n    Returns:\n        RLBuilder: Builder for the expander content\n    \"\"\"\n    value = self._new_widget_id(\"accordionitem\", title) if key is None else key\n    accordion = self.accordion(\n        key=key,\n        chevron=chevron,\n        chevron_icon_size=chevron_icon_size,\n        chevron_position=chevron_position,\n        chevron_size=chevron_size,\n        disable_chevron_rotation=disable_chevron_rotation,\n        radius=radius,\n        transition_duration=transition_duration,\n        variant=variant,\n        value=value if is_open else None,\n        **kwargs,\n    )\n    with accordion:\n        item = self.accordion_item(\n            label=title,\n            key=value,\n            disabled=disabled,\n            icon=icon,\n        )\n        return item\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.fieldset","title":"<code>fieldset(legend, *, disabled=None, key=None, radius=None, **kwargs)</code>","text":"<p>Group a set of related form fields under a legend.</p> <p>Parameters:</p> Name Type Description Default <code>legend</code> <code>str</code> <p>Legend text.</p> required <code>disabled</code> <code>Optional[bool]</code> <p>Disable all nested inputs.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>radius</code> <code>Optional[str]</code> <p>Corner radius.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the fieldset element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def fieldset(\n    self,\n    legend: str,\n    *,\n    disabled: Optional[bool] = None,\n    key: Optional[str] = None,\n    radius: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Group a set of related form fields under a legend.\n\n    Args:\n        legend (str): Legend text.\n        disabled (Optional[bool]): Disable all nested inputs.\n        key (Optional[str]): Explicit element key.\n        radius (Optional[str]): Corner radius.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the fieldset element.\n    \"\"\"\n    element = self._create_element(\n        key=key or self._new_widget_id(\"fieldset\", legend),\n        name=\"fieldset\",\n        props={\n            \"disabled\": disabled,\n            \"legend\": legend,\n            \"radius\": radius,\n            **kwargs,\n        },\n    )\n    return cast(RLBuilder, self._build_nested_builder(element))\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.flex","title":"<code>flex(*, align=None, column_gap=None, direction=None, gap=None, justify=None, key=None, row_gap=None, wrap=None, **kwargs)</code>","text":"<p>Create a flex.</p> <p>Parameters:</p> Name Type Description Default <code>align</code> <code>Optional[str]</code> <p>The alignment of the flex.</p> <code>None</code> <code>column_gap</code> <code>Optional[str]</code> <p>The gap between columns.</p> <code>None</code> <code>direction</code> <code>Optional[str]</code> <p>The direction of the flex.</p> <code>None</code> <code>gap</code> <code>Optional[str]</code> <p>The gap between items.</p> <code>None</code> <code>justify</code> <code>Optional[str]</code> <p>The justification of the flex.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>The key of the flex.</p> <code>None</code> <code>row_gap</code> <code>Optional[str]</code> <p>The gap between rows.</p> <code>None</code> <code>wrap</code> <code>Optional[str]</code> <p>The wrapping of the flex.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>The flex builder.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def flex(  # type: ignore[override]\n    self,\n    *,\n    align: Optional[str] = None,\n    column_gap: Optional[str] = None,\n    direction: Optional[str] = None,\n    gap: Optional[str] = None,\n    justify: Optional[str] = None,\n    key: Optional[str] = None,\n    row_gap: Optional[str] = None,\n    wrap: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Create a flex.\n\n    Args:\n        align (Optional[str]): The alignment of the flex.\n        column_gap (Optional[str]): The gap between columns.\n        direction (Optional[str]): The direction of the flex.\n        gap (Optional[str]): The gap between items.\n        justify (Optional[str]): The justification of the flex.\n        key (Optional[str]): The key of the flex.\n        row_gap (Optional[str]): The gap between rows.\n        wrap (Optional[str]): The wrapping of the flex.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: The flex builder.\n    \"\"\"\n    new_element = self._create_element(\n        key=key or self._new_text_id(\"flex\"),\n        name=\"flex\",\n        props={\n            \"align\": align,\n            \"columnGap\": column_gap,\n            \"direction\": direction,\n            \"gap\": gap,\n            \"justify\": justify,\n            \"rowGap\": row_gap,\n            \"wrap\": wrap,\n            **kwargs,\n        },\n    )\n    return cast(RLBuilder, self._build_nested_builder(new_element))\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.funnel_chart","title":"<code>funnel_chart(data, *, funnel_chart_props=None, funnel_props=None, key=None, label_color=None, labels_position=None, size=None, stroke_color=None, stroke_width=None, tooltip_animation_duration=None, tooltip_data_source=None, tooltip_props=None, value_formatter=None, with_labels=None, with_tooltip=None, **kwargs)</code>","text":"<p>Funnel chart for conversion or pipeline visualization.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list</code> <p>Dataset.</p> required <code>funnel_chart_props</code> <code>Optional[dict[str, Any]]</code> <p>Chart container props.</p> <code>None</code> <code>funnel_props</code> <code>Optional[dict[str, Any]]</code> <p>Funnel props.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>label_color</code> <code>Optional[str]</code> <p>Label color.</p> <code>None</code> <code>labels_position</code> <code>Optional[Literal['left', 'right', 'inside']]</code> <p>Labels position.</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>Chart size.</p> <code>None</code> <code>stroke_color</code> <code>Optional[str]</code> <p>Border color.</p> <code>None</code> <code>stroke_width</code> <code>Optional[int]</code> <p>Border width.</p> <code>None</code> <code>tooltip_animation_duration</code> <code>Optional[int]</code> <p>Tooltip animation duration.</p> <code>None</code> <code>tooltip_data_source</code> <code>Optional[Literal['all', 'segment']]</code> <p>Tooltip data source.</p> <code>None</code> <code>tooltip_props</code> <code>Optional[dict[str, Any]]</code> <p>Tooltip props.</p> <code>None</code> <code>value_formatter</code> <code>Optional[Any]</code> <p>Value formatter.</p> <code>None</code> <code>with_labels</code> <code>Optional[bool]</code> <p>Show labels.</p> <code>None</code> <code>with_tooltip</code> <code>Optional[bool]</code> <p>Show tooltip.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the funnel chart element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def funnel_chart(\n    self,\n    data: list,\n    *,\n    funnel_chart_props: Optional[dict[str, Any]] = None,\n    funnel_props: Optional[dict[str, Any]] = None,\n    key: Optional[str] = None,\n    label_color: Optional[str] = None,\n    labels_position: Optional[Literal[\"left\", \"right\", \"inside\"]] = None,\n    size: Optional[int] = None,\n    stroke_color: Optional[str] = None,\n    stroke_width: Optional[int] = None,\n    tooltip_animation_duration: Optional[int] = None,\n    tooltip_data_source: Optional[Literal[\"all\", \"segment\"]] = None,\n    tooltip_props: Optional[dict[str, Any]] = None,\n    value_formatter: Optional[Any] = None,\n    with_labels: Optional[bool] = None,\n    with_tooltip: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Funnel chart for conversion or pipeline visualization.\n\n    Args:\n        data (list): Dataset.\n        funnel_chart_props (Optional[dict[str, Any]]): Chart container props.\n        funnel_props (Optional[dict[str, Any]]): Funnel props.\n        key (Optional[str]): Explicit element key.\n        label_color (Optional[str]): Label color.\n        labels_position (Optional[Literal[\"left\",\"right\",\"inside\"]]): Labels position.\n        size (Optional[int]): Chart size.\n        stroke_color (Optional[str]): Border color.\n        stroke_width (Optional[int]): Border width.\n        tooltip_animation_duration (Optional[int]): Tooltip animation duration.\n        tooltip_data_source (Optional[Literal[\"all\",\"segment\"]]): Tooltip data source.\n        tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n        value_formatter (Optional[Any]): Value formatter.\n        with_labels (Optional[bool]): Show labels.\n        with_tooltip (Optional[bool]): Show tooltip.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the funnel chart element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"funnelchart\",\n        key=key or self._new_text_id(\"funnelchart\"),\n        props={\n            \"data\": data,\n            \"funnelChartProps\": funnel_chart_props,\n            \"funnelProps\": funnel_props,\n            \"labelColor\": label_color,\n            \"labelsPosition\": labels_position,\n            \"size\": size,\n            \"strokeColor\": stroke_color,\n            \"strokeWidth\": stroke_width,\n            \"tooltipAnimationDuration\": tooltip_animation_duration,\n            \"tooltipDataSource\": tooltip_data_source,\n            \"tooltipProps\": tooltip_props,\n            \"valueFormatter\": value_formatter,\n            \"withLabels\": with_labels,\n            \"withTooltip\": with_tooltip,\n            **kwargs,\n        },\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.grid","title":"<code>grid(*, align=None, breakpoints=None, columns=None, grow=None, gutter=None, justify=None, key=None, overflow=None, query_type=None, **kwargs)</code>","text":"<p>Create a responsive grid container.</p> <p>Parameters:</p> Name Type Description Default <code>align</code> <code>Optional[str]</code> <p>Vertical alignment of grid content.</p> <code>None</code> <code>breakpoints</code> <code>Optional[dict]</code> <p>Responsive column settings per breakpoint.</p> <code>None</code> <code>columns</code> <code>Optional[int]</code> <p>Number of columns.</p> <code>None</code> <code>grow</code> <code>Optional[bool]</code> <p>Whether columns should grow to fill available space.</p> <code>None</code> <code>gutter</code> <code>Optional[dict]</code> <p>Spacing configuration between columns/rows.</p> <code>None</code> <code>justify</code> <code>Optional[str]</code> <p>Horizontal justification of grid content.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>overflow</code> <code>Optional[str]</code> <p>Overflow behavior.</p> <code>None</code> <code>query_type</code> <code>Optional[Literal['media', 'container']]</code> <p>Type of responsive query to use.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the created grid element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def grid(\n    self,\n    *,\n    align: Optional[str] = None,\n    breakpoints: Optional[dict] = None,\n    columns: Optional[int] = None,\n    grow: Optional[bool] = None,\n    gutter: Optional[dict] = None,\n    justify: Optional[str] = None,\n    key: Optional[str] = None,\n    overflow: Optional[str] = None,\n    query_type: Optional[Literal[\"media\", \"container\"]] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Create a responsive grid container.\n\n    Args:\n        align (Optional[str]): Vertical alignment of grid content.\n        breakpoints (Optional[dict]): Responsive column settings per breakpoint.\n        columns (Optional[int]): Number of columns.\n        grow (Optional[bool]): Whether columns should grow to fill available space.\n        gutter (Optional[dict]): Spacing configuration between columns/rows.\n        justify (Optional[str]): Horizontal justification of grid content.\n        key (Optional[str]): Explicit element key.\n        overflow (Optional[str]): Overflow behavior.\n        query_type (Optional[Literal[\"media\", \"container\"]]): Type of responsive query to use.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the created grid element.\n    \"\"\"\n    new_element = self._create_element(\n        key=key or self._new_text_id(\"grid\"),\n        name=\"grid\",\n        props={\n            \"align\": align,\n            \"breakpoints\": breakpoints,\n            \"columns\": columns,\n            \"grow\": grow,\n            \"gutter\": gutter,\n            \"justify\": justify,\n            \"overflow\": overflow,\n            \"type\": query_type,\n            **kwargs,\n        },\n    )\n    return cast(RLBuilder, self._build_nested_builder(new_element))\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.grid_col","title":"<code>grid_col(*, key=None, offset=None, order=None, span=None, **kwargs)</code>","text":"<p>Add a grid column inside the nearest grid.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>offset</code> <code>Optional[int]</code> <p>Column offset.</p> <code>None</code> <code>order</code> <code>Optional[int]</code> <p>Column order.</p> <code>None</code> <code>span</code> <code>Optional[int]</code> <p>How many columns the item spans.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the grid column element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def grid_col(\n    self,\n    *,\n    key: Optional[str] = None,\n    offset: Optional[int] = None,\n    order: Optional[int] = None,\n    span: Optional[int] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Add a grid column inside the nearest grid.\n\n    Args:\n        key (Optional[str]): Explicit element key.\n        offset (Optional[int]): Column offset.\n        order (Optional[int]): Column order.\n        span (Optional[int]): How many columns the item spans.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the grid column element.\n    \"\"\"\n    new_element = self._create_element(\n        key=key or self._new_text_id(\"gridcol\"),\n        name=\"gridcol\",\n        props={\n            \"offset\": offset,\n            \"order\": order,\n            \"span\": span,\n            **kwargs,\n        },\n    )\n    return cast(RLBuilder, self._build_nested_builder(new_element))\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.group","title":"<code>group(*, align=None, gap=None, grow=None, justify=None, key=None, prevent_grow_overflow=None, wrap=None, **kwargs)</code>","text":"<p>Arrange children horizontally with spacing and alignment.</p> <p>Parameters:</p> Name Type Description Default <code>align</code> <code>Optional[str]</code> <p>Vertical alignment of items.</p> <code>None</code> <code>gap</code> <code>Optional[str]</code> <p>Spacing between items.</p> <code>None</code> <code>grow</code> <code>Optional[bool]</code> <p>Allow items to grow to fill the row.</p> <code>None</code> <code>justify</code> <code>Optional[str]</code> <p>Horizontal alignment of items.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>prevent_grow_overflow</code> <code>Optional[bool]</code> <p>Prevent overflow when items grow.</p> <code>None</code> <code>wrap</code> <code>Optional[str]</code> <p>Wrapping behavior.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the group element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def group(\n    self,\n    *,\n    align: Optional[str] = None,\n    gap: Optional[str] = None,\n    grow: Optional[bool] = None,\n    justify: Optional[str] = None,\n    key: Optional[str] = None,\n    prevent_grow_overflow: Optional[bool] = None,\n    wrap: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Arrange children horizontally with spacing and alignment.\n\n    Args:\n        align (Optional[str]): Vertical alignment of items.\n        gap (Optional[str]): Spacing between items.\n        grow (Optional[bool]): Allow items to grow to fill the row.\n        justify (Optional[str]): Horizontal alignment of items.\n        key (Optional[str]): Explicit element key.\n        prevent_grow_overflow (Optional[bool]): Prevent overflow when items grow.\n        wrap (Optional[str]): Wrapping behavior.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the group element.\n    \"\"\"\n    new_element = self._create_element(\n        key=key or self._new_text_id(\"group\"),\n        name=\"group\",\n        props={\n            \"align\": align,\n            \"gap\": gap,\n            \"grow\": grow,\n            \"justify\": justify,\n            \"preventGrowOverflow\": prevent_grow_overflow,\n            \"wrap\": wrap,\n            **kwargs,\n        },\n    )\n    return cast(RLBuilder, self._build_nested_builder(new_element))\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.heatmap","title":"<code>heatmap(data, *, colors=None, domain=None, end_date=None, first_day_of_week=None, font_size=None, gap=None, get_rect_props=None, get_tooltip_label=None, key=None, month_labels=None, months_labels_height=None, rect_radius=None, rect_size=None, start_date=None, tooltip_props=None, weekday_labels=None, weekdays_labels_width=None, with_month_labels=None, with_outside_dates=None, with_tooltip=None, with_weekday_labels=None, **kwargs)</code>","text":"<p>Calendar heatmap for visualizing value intensity over dates.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Union[int, float]]</code> <p>Mapping of ISO date -&gt; value.</p> required <code>colors</code> <code>Optional[list[str]]</code> <p>Color scale.</p> <code>None</code> <code>domain</code> <code>Optional[tuple[Union[int, float], Union[int, float]]]</code> <p>Min/max domain.</p> <code>None</code> <code>end_date</code> <code>Optional[Union[str, Any]]</code> <p>End date.</p> <code>None</code> <code>first_day_of_week</code> <code>Optional[int]</code> <p>First day of the week.</p> <code>None</code> <code>font_size</code> <code>Optional[int]</code> <p>Font size for labels.</p> <code>None</code> <code>gap</code> <code>Optional[int]</code> <p>Gap between cells.</p> <code>None</code> <code>get_rect_props</code> <code>Optional[Any]</code> <p>Custom rect props callback.</p> <code>None</code> <code>get_tooltip_label</code> <code>Optional[Any]</code> <p>Tooltip label callback.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>month_labels</code> <code>Optional[list[str]]</code> <p>Month labels.</p> <code>None</code> <code>months_labels_height</code> <code>Optional[int]</code> <p>Month labels height.</p> <code>None</code> <code>rect_radius</code> <code>Optional[int]</code> <p>Cell border radius.</p> <code>None</code> <code>rect_size</code> <code>Optional[int]</code> <p>Cell size.</p> <code>None</code> <code>start_date</code> <code>Optional[Union[str, Any]]</code> <p>Start date.</p> <code>None</code> <code>tooltip_props</code> <code>Optional[dict[str, Any]]</code> <p>Tooltip props.</p> <code>None</code> <code>weekday_labels</code> <code>Optional[list[str]]</code> <p>Weekday labels.</p> <code>None</code> <code>weekdays_labels_width</code> <code>Optional[int]</code> <p>Weekday labels width.</p> <code>None</code> <code>with_month_labels</code> <code>Optional[bool]</code> <p>Show month labels.</p> <code>None</code> <code>with_outside_dates</code> <code>Optional[bool]</code> <p>Show dates outside range.</p> <code>None</code> <code>with_tooltip</code> <code>Optional[bool]</code> <p>Show tooltip.</p> <code>None</code> <code>with_weekday_labels</code> <code>Optional[bool]</code> <p>Show weekday labels.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the heatmap element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def heatmap(\n    self,\n    data: dict[str, Union[int, float]],\n    *,\n    colors: Optional[list[str]] = None,\n    domain: Optional[tuple[Union[int, float], Union[int, float]]] = None,\n    end_date: Optional[Union[str, Any]] = None,\n    first_day_of_week: Optional[int] = None,\n    font_size: Optional[int] = None,\n    gap: Optional[int] = None,\n    get_rect_props: Optional[Any] = None,\n    get_tooltip_label: Optional[Any] = None,\n    key: Optional[str] = None,\n    month_labels: Optional[list[str]] = None,\n    months_labels_height: Optional[int] = None,\n    rect_radius: Optional[int] = None,\n    rect_size: Optional[int] = None,\n    start_date: Optional[Union[str, Any]] = None,\n    tooltip_props: Optional[dict[str, Any]] = None,\n    weekday_labels: Optional[list[str]] = None,\n    weekdays_labels_width: Optional[int] = None,\n    with_month_labels: Optional[bool] = None,\n    with_outside_dates: Optional[bool] = None,\n    with_tooltip: Optional[bool] = None,\n    with_weekday_labels: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Calendar heatmap for visualizing value intensity over dates.\n\n    Args:\n        data (dict[str, Union[int, float]]): Mapping of ISO date -&gt; value.\n        colors (Optional[list[str]]): Color scale.\n        domain (Optional[tuple[Union[int, float], Union[int, float]]]): Min/max domain.\n        end_date (Optional[Union[str, Any]]): End date.\n        first_day_of_week (Optional[int]): First day of the week.\n        font_size (Optional[int]): Font size for labels.\n        gap (Optional[int]): Gap between cells.\n        get_rect_props (Optional[Any]): Custom rect props callback.\n        get_tooltip_label (Optional[Any]): Tooltip label callback.\n        key (Optional[str]): Explicit element key.\n        month_labels (Optional[list[str]]): Month labels.\n        months_labels_height (Optional[int]): Month labels height.\n        rect_radius (Optional[int]): Cell border radius.\n        rect_size (Optional[int]): Cell size.\n        start_date (Optional[Union[str, Any]]): Start date.\n        tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n        weekday_labels (Optional[list[str]]): Weekday labels.\n        weekdays_labels_width (Optional[int]): Weekday labels width.\n        with_month_labels (Optional[bool]): Show month labels.\n        with_outside_dates (Optional[bool]): Show dates outside range.\n        with_tooltip (Optional[bool]): Show tooltip.\n        with_weekday_labels (Optional[bool]): Show weekday labels.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the heatmap element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"heatmap\",\n        key=key or self._new_text_id(\"heatmap\"),\n        props={\n            \"data\": data,\n            \"colors\": colors,\n            \"domain\": domain,\n            \"endDate\": end_date,\n            \"firstDayOfWeek\": first_day_of_week,\n            \"fontSize\": font_size,\n            \"gap\": gap,\n            \"getRectProps\": get_rect_props,\n            \"getTooltipLabel\": get_tooltip_label,\n            \"monthLabels\": month_labels,\n            \"monthsLabelsHeight\": months_labels_height,\n            \"rectRadius\": rect_radius,\n            \"rectSize\": rect_size,\n            \"startDate\": start_date,\n            \"tooltipProps\": tooltip_props,\n            \"weekdayLabels\": weekday_labels,\n            \"weekdaysLabelsWidth\": weekdays_labels_width,\n            \"withMonthLabels\": with_month_labels,\n            \"withOutsideDates\": with_outside_dates,\n            \"withTooltip\": with_tooltip,\n            \"withWeekdayLabels\": with_weekday_labels,\n            **kwargs,\n        },\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.icon","title":"<code>icon(name, **kwargs)</code>  <code>staticmethod</code>","text":"<p>Create an icon element to be used as an adornment.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Icon name.</p> required <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RouteLitElement</code> <code>RouteLitElement</code> <p>Virtual icon element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>@staticmethod\ndef icon(name: str, **kwargs: Any) -&gt; RouteLitElement:\n    \"\"\"\n    Create an icon element to be used as an adornment.\n\n    Args:\n        name (str): Icon name.\n        kwargs: Additional props to set.\n\n    Returns:\n        RouteLitElement: Virtual icon element.\n    \"\"\"\n    return RouteLitElement(\n        name=\"icon\",\n        key=\"\",\n        props={\n            \"name\": name,\n            **kwargs,\n        },\n        virtual=True,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.image","title":"<code>image(src, *, key=None, **kwargs)</code>","text":"<p>Display an image.</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <code>str</code> <p>Image source URL.</p> required <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def image(\n    self,\n    src: str,\n    *,\n    key: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"\n    Display an image.\n\n    Args:\n        src (str): Image source URL.\n        key (Optional[str]): Explicit element key.\n        kwargs: Additional props to set.\n    \"\"\"\n    self._create_element(\n        name=\"image\",\n        key=key or self._new_widget_id(\"image\", src),\n        props={\"src\": src, **kwargs},\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.line_chart","title":"<code>line_chart(data, data_key, series, *, key=None, active_dot_props=None, connect_nulls=None, curve_type=None, dot_props=None, fill_opacity=None, gradient_stops=None, grid_axis=None, grid_color=None, grid_props=None, legend_props=None, line_chart_props=None, line_props=None, orientation=None, reference_lines=None, right_y_axis_label=None, right_y_axis_props=None, stroke_dasharray=None, stroke_width=None, text_color=None, tick_line=None, tooltip_animation_duration=None, tooltip_props=None, type=None, unit=None, with_dots=None, with_legend=None, with_point_labels=None, with_right_y_axis=None, with_tooltip=None, with_x_axis=None, with_y_axis=None, x_axis_label=None, x_axis_props=None, y_axis_label=None, y_axis_props=None, **kwargs)</code>","text":"<p>Line chart for continuous data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list</code> <p>Dataset.</p> required <code>data_key</code> <code>str</code> <p>X-axis data key.</p> required <code>series</code> <code>list[dict[str, Any]]</code> <p>Series configuration.</p> required <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>active_dot_props</code> <code>Optional[dict[str, Any]]</code> <p>Active dot props.</p> <code>None</code> <code>connect_nulls</code> <code>Optional[bool]</code> <p>Connect across null values.</p> <code>None</code> <code>curve_type</code> <code>Optional[str]</code> <p>Curve interpolation type.</p> <code>None</code> <code>dot_props</code> <code>Optional[dict[str, Any]]</code> <p>Dot props.</p> <code>None</code> <code>fill_opacity</code> <code>Optional[float]</code> <p>Area fill opacity for gradients.</p> <code>None</code> <code>gradient_stops</code> <code>Optional[list[dict[str, Any]]]</code> <p>Gradient configuration.</p> <code>None</code> <code>grid_axis</code> <code>Optional[str]</code> <p>Grid axis.</p> <code>None</code> <code>grid_color</code> <code>Optional[str]</code> <p>Grid color.</p> <code>None</code> <code>grid_props</code> <code>Optional[dict[str, Any]]</code> <p>Grid props.</p> <code>None</code> <code>legend_props</code> <code>Optional[dict[str, Any]]</code> <p>Legend props.</p> <code>None</code> <code>line_chart_props</code> <code>Optional[dict[str, Any]]</code> <p>Chart container props.</p> <code>None</code> <code>line_props</code> <code>Optional[dict[str, Any]]</code> <p>Line props.</p> <code>None</code> <code>orientation</code> <code>Optional[str]</code> <p>Chart orientation.</p> <code>None</code> <code>reference_lines</code> <code>Optional[list[dict[str, Any]]]</code> <p>Reference lines.</p> <code>None</code> <code>right_y_axis_label</code> <code>Optional[str]</code> <p>Secondary Y axis label.</p> <code>None</code> <code>right_y_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>Secondary Y axis props.</p> <code>None</code> <code>stroke_dasharray</code> <code>Optional[str]</code> <p>Line dash pattern.</p> <code>None</code> <code>stroke_width</code> <code>Optional[float]</code> <p>Line width.</p> <code>None</code> <code>text_color</code> <code>Optional[str]</code> <p>Text color.</p> <code>None</code> <code>tick_line</code> <code>Optional[str]</code> <p>Tick line display.</p> <code>None</code> <code>tooltip_animation_duration</code> <code>Optional[int]</code> <p>Tooltip animation duration.</p> <code>None</code> <code>tooltip_props</code> <code>Optional[dict[str, Any]]</code> <p>Tooltip props.</p> <code>None</code> <code>type</code> <code>Optional[str]</code> <p>Chart type variant.</p> <code>None</code> <code>unit</code> <code>Optional[str]</code> <p>Unit suffix.</p> <code>None</code> <code>with_dots</code> <code>Optional[bool]</code> <p>Show dots.</p> <code>None</code> <code>with_legend</code> <code>Optional[bool]</code> <p>Show legend.</p> <code>None</code> <code>with_point_labels</code> <code>Optional[bool]</code> <p>Show point labels.</p> <code>None</code> <code>with_right_y_axis</code> <code>Optional[bool]</code> <p>Enable right Y axis.</p> <code>None</code> <code>with_tooltip</code> <code>Optional[bool]</code> <p>Show tooltip.</p> <code>None</code> <code>with_x_axis</code> <code>Optional[bool]</code> <p>Show X axis.</p> <code>None</code> <code>with_y_axis</code> <code>Optional[bool]</code> <p>Show Y axis.</p> <code>None</code> <code>x_axis_label</code> <code>Optional[str]</code> <p>X axis label.</p> <code>None</code> <code>x_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>X axis props.</p> <code>None</code> <code>y_axis_label</code> <code>Optional[str]</code> <p>Y axis label.</p> <code>None</code> <code>y_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>Y axis props.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the line chart element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def line_chart(\n    self,\n    data: list,\n    data_key: str,\n    series: list[dict[str, Any]],\n    *,\n    key: Optional[str] = None,\n    active_dot_props: Optional[dict[str, Any]] = None,\n    connect_nulls: Optional[bool] = None,\n    curve_type: Optional[str] = None,\n    dot_props: Optional[dict[str, Any]] = None,\n    fill_opacity: Optional[float] = None,\n    gradient_stops: Optional[list[dict[str, Any]]] = None,\n    grid_axis: Optional[str] = None,\n    grid_color: Optional[str] = None,\n    grid_props: Optional[dict[str, Any]] = None,\n    legend_props: Optional[dict[str, Any]] = None,\n    line_chart_props: Optional[dict[str, Any]] = None,\n    line_props: Optional[dict[str, Any]] = None,\n    orientation: Optional[str] = None,\n    reference_lines: Optional[list[dict[str, Any]]] = None,\n    right_y_axis_label: Optional[str] = None,\n    right_y_axis_props: Optional[dict[str, Any]] = None,\n    stroke_dasharray: Optional[str] = None,\n    stroke_width: Optional[float] = None,\n    text_color: Optional[str] = None,\n    tick_line: Optional[str] = None,\n    tooltip_animation_duration: Optional[int] = None,\n    tooltip_props: Optional[dict[str, Any]] = None,\n    type: Optional[str] = None,  # noqa: A002\n    unit: Optional[str] = None,\n    with_dots: Optional[bool] = None,\n    with_legend: Optional[bool] = None,\n    with_point_labels: Optional[bool] = None,\n    with_right_y_axis: Optional[bool] = None,\n    with_tooltip: Optional[bool] = None,\n    with_x_axis: Optional[bool] = None,\n    with_y_axis: Optional[bool] = None,\n    x_axis_label: Optional[str] = None,\n    x_axis_props: Optional[dict[str, Any]] = None,\n    y_axis_label: Optional[str] = None,\n    y_axis_props: Optional[dict[str, Any]] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Line chart for continuous data.\n\n    Args:\n        data (list): Dataset.\n        data_key (str): X-axis data key.\n        series (list[dict[str, Any]]): Series configuration.\n        key (Optional[str]): Explicit element key.\n        active_dot_props (Optional[dict[str, Any]]): Active dot props.\n        connect_nulls (Optional[bool]): Connect across null values.\n        curve_type (Optional[str]): Curve interpolation type.\n        dot_props (Optional[dict[str, Any]]): Dot props.\n        fill_opacity (Optional[float]): Area fill opacity for gradients.\n        gradient_stops (Optional[list[dict[str, Any]]]): Gradient configuration.\n        grid_axis (Optional[str]): Grid axis.\n        grid_color (Optional[str]): Grid color.\n        grid_props (Optional[dict[str, Any]]): Grid props.\n        legend_props (Optional[dict[str, Any]]): Legend props.\n        line_chart_props (Optional[dict[str, Any]]): Chart container props.\n        line_props (Optional[dict[str, Any]]): Line props.\n        orientation (Optional[str]): Chart orientation.\n        reference_lines (Optional[list[dict[str, Any]]]): Reference lines.\n        right_y_axis_label (Optional[str]): Secondary Y axis label.\n        right_y_axis_props (Optional[dict[str, Any]]): Secondary Y axis props.\n        stroke_dasharray (Optional[str]): Line dash pattern.\n        stroke_width (Optional[float]): Line width.\n        text_color (Optional[str]): Text color.\n        tick_line (Optional[str]): Tick line display.\n        tooltip_animation_duration (Optional[int]): Tooltip animation duration.\n        tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n        type (Optional[str]): Chart type variant.\n        unit (Optional[str]): Unit suffix.\n        with_dots (Optional[bool]): Show dots.\n        with_legend (Optional[bool]): Show legend.\n        with_point_labels (Optional[bool]): Show point labels.\n        with_right_y_axis (Optional[bool]): Enable right Y axis.\n        with_tooltip (Optional[bool]): Show tooltip.\n        with_x_axis (Optional[bool]): Show X axis.\n        with_y_axis (Optional[bool]): Show Y axis.\n        x_axis_label (Optional[str]): X axis label.\n        x_axis_props (Optional[dict[str, Any]]): X axis props.\n        y_axis_label (Optional[str]): Y axis label.\n        y_axis_props (Optional[dict[str, Any]]): Y axis props.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the line chart element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"linechart\",\n        key=key or self._new_text_id(\"linechart\"),\n        props={\n            \"data\": data,\n            \"dataKey\": data_key,\n            \"series\": series,\n            \"activeDotProps\": active_dot_props,\n            \"connectNulls\": connect_nulls,\n            \"curveType\": curve_type,\n            \"dotProps\": dot_props,\n            \"fillOpacity\": fill_opacity,\n            \"gradientStops\": gradient_stops,\n            \"gridAxis\": grid_axis,\n            \"gridColor\": grid_color,\n            \"gridProps\": grid_props,\n            \"legendProps\": legend_props,\n            \"lineChartProps\": line_chart_props,\n            \"lineProps\": line_props,\n            \"orientation\": orientation,\n            \"referenceLines\": reference_lines,\n            \"rightYAxisLabel\": right_y_axis_label,\n            \"rightYAxisProps\": right_y_axis_props,\n            \"strokeDasharray\": stroke_dasharray,\n            \"strokeWidth\": stroke_width,\n            \"textColor\": text_color,\n            \"tickLine\": tick_line,\n            \"tooltipAnimationDuration\": tooltip_animation_duration,\n            \"tooltipProps\": tooltip_props,\n            \"type\": type,\n            \"unit\": unit,\n            \"withDots\": with_dots,\n            \"withLegend\": with_legend,\n            \"withPointLabels\": with_point_labels,\n            \"withRightYAxis\": with_right_y_axis,\n            \"withTooltip\": with_tooltip,\n            \"withXAxis\": with_x_axis,\n            \"withYAxis\": with_y_axis,\n            \"xAxisLabel\": x_axis_label,\n            \"xAxisProps\": x_axis_props,\n            \"yAxisLabel\": y_axis_label,\n            \"yAxisProps\": y_axis_props,\n            **kwargs,\n        },\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.modal","title":"<code>modal(key=None, *, title=None, with_close_button=None, **kwargs)</code>","text":"<p>Centered modal dialog.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>title</code> <code>Optional[str]</code> <p>Header title.</p> <code>None</code> <code>with_close_button</code> <code>Optional[bool]</code> <p>Show close button.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the modal element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def modal(\n    self,\n    key: Optional[str] = None,\n    *,\n    title: Optional[str] = None,\n    with_close_button: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Centered modal dialog.\n\n    Args:\n        key (Optional[str]): Explicit element key.\n        title (Optional[str]): Header title.\n        with_close_button (Optional[bool]): Show close button.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the modal element.\n    \"\"\"\n    return super()._x_dialog(  # type: ignore[return-value]\n        \"modal\",\n        key or self._new_text_id(\"modal\"),\n        opened=True,\n        title=title,\n        withCloseButton=with_close_button,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.multiselect","title":"<code>multiselect(label, data, *, check_icon_position=None, chevron_color=None, clear_button_props=None, clearable=None, combobox_props=None, default_dropdown_opened=None, default_search_value=None, description=None, disabled=None, dropdown_opened=None, error=None, error_props=None, format_func=None, hidden_input_props=None, hidden_input_values_divider=None, hide_picked_options=None, input_size=None, input_wrapper_order=None, key=None, label_props=None, left_section=None, left_section_props=None, left_section_width=None, limit=None, max_dropdown_height=None, max_values=None, nothing_found_message=None, on_change=None, radius=None, required=None, right_section=None, right_section_props=None, right_section_width=None, scroll_area_props=None, search_value=None, searchable=None, select_first_option_on_change=None, size=None, value=None, with_asterisk=None, with_check_icon=None, with_error_styles=None, with_scroll_area=None, **kwargs)</code>","text":"<p>Multi-select input with search and tags.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>data</code> <code>list[Union[RLOption, str]]</code> <p>Available options.</p> required <code>check_icon_position</code> <code>Optional[Literal['left', 'right']]</code> <p>Check icon position.</p> <code>None</code> <code>chevron_color</code> <code>Optional[str]</code> <p>Chevron color.</p> <code>None</code> <code>clear_button_props</code> <code>Optional[dict[str, Any]]</code> <p>Clear button props.</p> <code>None</code> <code>clearable</code> <code>Optional[bool]</code> <p>Enable clear button.</p> <code>None</code> <code>combobox_props</code> <code>Optional[dict[str, Any]]</code> <p>Combobox props.</p> <code>None</code> <code>default_dropdown_opened</code> <code>Optional[bool]</code> <p>Open dropdown by default.</p> <code>None</code> <code>default_search_value</code> <code>Optional[str]</code> <p>Initial search value.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable interaction.</p> <code>None</code> <code>dropdown_opened</code> <code>Optional[bool]</code> <p>Control dropdown visibility.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>error_props</code> <code>Optional[dict[str, Any]]</code> <p>Error message props.</p> <code>None</code> <code>format_func</code> <code>Optional[Callable[[Any], str]]</code> <p>Map option value to label.</p> <code>None</code> <code>hidden_input_props</code> <code>Optional[dict[str, Any]]</code> <p>Hidden input props.</p> <code>None</code> <code>hidden_input_values_divider</code> <code>Optional[str]</code> <p>Divider for hidden input.</p> <code>None</code> <code>hide_picked_options</code> <code>Optional[bool]</code> <p>Hide already selected options.</p> <code>None</code> <code>input_size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>input_wrapper_order</code> <code>Optional[list[str]]</code> <p>Order of input wrapper parts.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>label_props</code> <code>Optional[dict[str, Any]]</code> <p>Label props.</p> <code>None</code> <code>left_section</code> <code>Optional[RouteLitElement]</code> <p>Left adornment.</p> <code>None</code> <code>left_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Left adornment props.</p> <code>None</code> <code>left_section_width</code> <code>Optional[str]</code> <p>Left adornment width.</p> <code>None</code> <code>limit</code> <code>Optional[int]</code> <p>Max number of options shown.</p> <code>None</code> <code>max_dropdown_height</code> <code>Optional[Union[str, int]]</code> <p>Max dropdown height.</p> <code>None</code> <code>max_values</code> <code>Optional[int]</code> <p>Max number of selected values.</p> <code>None</code> <code>nothing_found_message</code> <code>Optional[str]</code> <p>Message when search returns no results.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[list[str]], None]]</code> <p>Change handler.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Corner radius.</p> <code>None</code> <code>required</code> <code>Optional[bool]</code> <p>Mark as required.</p> <code>None</code> <code>right_section</code> <code>Optional[RouteLitElement]</code> <p>Right adornment.</p> <code>None</code> <code>right_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Right adornment props.</p> <code>None</code> <code>right_section_width</code> <code>Optional[str]</code> <p>Right adornment width.</p> <code>None</code> <code>scroll_area_props</code> <code>Optional[dict[str, Any]]</code> <p>Scroll area props.</p> <code>None</code> <code>search_value</code> <code>Optional[str]</code> <p>Current search value.</p> <code>None</code> <code>searchable</code> <code>Optional[bool]</code> <p>Enable search.</p> <code>None</code> <code>select_first_option_on_change</code> <code>Optional[bool]</code> <p>Auto select first option when changed.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>value</code> <code>Optional[list[str]]</code> <p>Current value.</p> <code>None</code> <code>with_asterisk</code> <code>Optional[bool]</code> <p>Show required asterisk.</p> <code>None</code> <code>with_check_icon</code> <code>Optional[bool]</code> <p>Show check icon next to selected options.</p> <code>None</code> <code>with_error_styles</code> <code>Optional[bool]</code> <p>Apply error styles.</p> <code>None</code> <code>with_scroll_area</code> <code>Optional[bool]</code> <p>Wrap dropdown with scroll area.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: Selected values.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def multiselect(\n    self,\n    label: str,\n    data: list[Union[RLOption, str]],\n    *,\n    check_icon_position: Optional[Literal[\"left\", \"right\"]] = None,\n    chevron_color: Optional[str] = None,\n    clear_button_props: Optional[dict[str, Any]] = None,\n    clearable: Optional[bool] = None,\n    combobox_props: Optional[dict[str, Any]] = None,\n    default_dropdown_opened: Optional[bool] = None,\n    default_search_value: Optional[str] = None,\n    description: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    dropdown_opened: Optional[bool] = None,\n    error: Optional[str] = None,\n    error_props: Optional[dict[str, Any]] = None,\n    format_func: Optional[Callable[[Any], str]] = None,\n    hidden_input_props: Optional[dict[str, Any]] = None,\n    hidden_input_values_divider: Optional[str] = None,\n    hide_picked_options: Optional[bool] = None,\n    input_size: Optional[str] = None,\n    input_wrapper_order: Optional[list[str]] = None,\n    key: Optional[str] = None,\n    label_props: Optional[dict[str, Any]] = None,\n    left_section: Optional[RouteLitElement] = None,\n    left_section_props: Optional[dict[str, Any]] = None,\n    left_section_width: Optional[str] = None,\n    limit: Optional[int] = None,\n    max_dropdown_height: Optional[Union[str, int]] = None,\n    max_values: Optional[int] = None,\n    nothing_found_message: Optional[str] = None,\n    on_change: Optional[Callable[[list[str]], None]] = None,\n    radius: Optional[Union[str, int]] = None,\n    required: Optional[bool] = None,\n    right_section: Optional[RouteLitElement] = None,\n    right_section_props: Optional[dict[str, Any]] = None,\n    right_section_width: Optional[str] = None,\n    scroll_area_props: Optional[dict[str, Any]] = None,\n    search_value: Optional[str] = None,\n    searchable: Optional[bool] = None,\n    select_first_option_on_change: Optional[bool] = None,\n    size: Optional[str] = None,\n    value: Optional[list[str]] = None,\n    with_asterisk: Optional[bool] = None,\n    with_check_icon: Optional[bool] = None,\n    with_error_styles: Optional[bool] = None,\n    with_scroll_area: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; list[str]:\n    \"\"\"\n    Multi-select input with search and tags.\n\n    Args:\n        label (str): Field label.\n        data (list[Union[RLOption, str]]): Available options.\n        check_icon_position (Optional[Literal[\"left\", \"right\"]]): Check icon position.\n        chevron_color (Optional[str]): Chevron color.\n        clear_button_props (Optional[dict[str, Any]]): Clear button props.\n        clearable (Optional[bool]): Enable clear button.\n        combobox_props (Optional[dict[str, Any]]): Combobox props.\n        default_dropdown_opened (Optional[bool]): Open dropdown by default.\n        default_search_value (Optional[str]): Initial search value.\n        description (Optional[str]): Helper text under the label.\n        disabled (Optional[bool]): Disable interaction.\n        dropdown_opened (Optional[bool]): Control dropdown visibility.\n        error (Optional[str]): Error message.\n        error_props (Optional[dict[str, Any]]): Error message props.\n        format_func (Optional[Callable[[Any], str]]): Map option value to label.\n        hidden_input_props (Optional[dict[str, Any]]): Hidden input props.\n        hidden_input_values_divider (Optional[str]): Divider for hidden input.\n        hide_picked_options (Optional[bool]): Hide already selected options.\n        input_size (Optional[str]): Control size.\n        input_wrapper_order (Optional[list[str]]): Order of input wrapper parts.\n        key (Optional[str]): Explicit element key.\n        label_props (Optional[dict[str, Any]]): Label props.\n        left_section (Optional[RouteLitElement]): Left adornment.\n        left_section_props (Optional[dict[str, Any]]): Left adornment props.\n        left_section_width (Optional[str]): Left adornment width.\n        limit (Optional[int]): Max number of options shown.\n        max_dropdown_height (Optional[Union[str, int]]): Max dropdown height.\n        max_values (Optional[int]): Max number of selected values.\n        nothing_found_message (Optional[str]): Message when search returns no results.\n        on_change (Optional[Callable[[list[str]], None]]): Change handler.\n        radius (Optional[Union[str, int]]): Corner radius.\n        required (Optional[bool]): Mark as required.\n        right_section (Optional[RouteLitElement]): Right adornment.\n        right_section_props (Optional[dict[str, Any]]): Right adornment props.\n        right_section_width (Optional[str]): Right adornment width.\n        scroll_area_props (Optional[dict[str, Any]]): Scroll area props.\n        search_value (Optional[str]): Current search value.\n        searchable (Optional[bool]): Enable search.\n        select_first_option_on_change (Optional[bool]): Auto select first option when changed.\n        size (Optional[str]): Control size.\n        value (Optional[list[str]]): Current value.\n        with_asterisk (Optional[bool]): Show required asterisk.\n        with_check_icon (Optional[bool]): Show check icon next to selected options.\n        with_error_styles (Optional[bool]): Apply error styles.\n        with_scroll_area (Optional[bool]): Wrap dropdown with scroll area.\n        kwargs: Additional props to set.\n\n    Returns:\n        list[str]: Selected values.\n    \"\"\"\n    return self._x_checkbox_group(\n        \"multiselect\",\n        key or self._new_widget_id(\"multiselect\", label),\n        checkIconPosition=check_icon_position,\n        chevronColor=chevron_color,\n        clearButtonProps=clear_button_props,\n        clearable=clearable,\n        comboboxProps=combobox_props,\n        defaultDropdownOpened=default_dropdown_opened,\n        defaultSearchValue=default_search_value,\n        description=description,\n        disabled=disabled,\n        dropdownOpened=dropdown_opened,\n        error=error,\n        errorProps=error_props,\n        format_func=format_func,\n        hiddenInputProps=hidden_input_props,\n        hiddenInputValuesDivider=hidden_input_values_divider,\n        hidePickedOptions=hide_picked_options,\n        inputSize=input_size,\n        inputWrapperOrder=input_wrapper_order,\n        label=label,\n        labelProps=label_props,\n        leftSection=left_section,\n        leftSectionProps=left_section_props,\n        leftSectionWidth=left_section_width,\n        limit=limit,\n        maxDropdownHeight=max_dropdown_height,\n        maxValues=max_values,\n        nothingFoundMessage=nothing_found_message,\n        on_change=on_change,\n        options=data,  # type: ignore[arg-type]\n        options_attr=\"data\",\n        radius=radius,\n        required=required,\n        scrollAreaProps=scroll_area_props,\n        rightSection=right_section,\n        rightSectionProps=right_section_props,\n        rightSectionWidth=right_section_width,\n        searchValue=search_value,\n        searchable=searchable,\n        selectFirstOptionOnChange=select_first_option_on_change,\n        size=size,\n        value=value,\n        withAsterisk=with_asterisk,\n        withCheckIcon=with_check_icon,\n        withErrorStyles=with_error_styles,\n        withScrollArea=with_scroll_area,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.native_select","title":"<code>native_select(label, options, *, description=None, disabled=None, error=None, format_func=None, key=None, left_section=None, left_section_props=None, left_section_width=None, on_change=None, radius=None, required=None, right_section=None, right_section_props=None, right_section_width=None, size=None, value=None, with_asterisk=None, **kwargs)</code>","text":"<p>Native HTML select input.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>options</code> <code>list[Union[RLOption, str]]</code> <p>Available options.</p> required <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable input interaction.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>format_func</code> <code>Optional[Callable[[Any], str]]</code> <p>Map option value to label.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>left_section</code> <code>Optional[RouteLitElement]</code> <p>Left adornment.</p> <code>None</code> <code>left_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Left adornment props.</p> <code>None</code> <code>left_section_width</code> <code>Optional[str]</code> <p>Left adornment width.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[str], None]]</code> <p>Change handler.</p> <code>None</code> <code>radius</code> <code>Optional[str]</code> <p>Corner radius.</p> <code>None</code> <code>required</code> <code>Optional[bool]</code> <p>Mark as required.</p> <code>None</code> <code>right_section</code> <code>Optional[RouteLitElement]</code> <p>Right adornment.</p> <code>None</code> <code>right_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Right adornment props.</p> <code>None</code> <code>right_section_width</code> <code>Optional[str]</code> <p>Right adornment width.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>value</code> <code>Optional[str]</code> <p>Current value.</p> <code>None</code> <code>with_asterisk</code> <code>Optional[bool]</code> <p>Show required asterisk.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Current value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def native_select(\n    self,\n    label: str,\n    options: list[Union[RLOption, str]],\n    *,\n    description: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    error: Optional[str] = None,\n    format_func: Optional[Callable[[Any], str]] = None,\n    key: Optional[str] = None,\n    left_section: Optional[RouteLitElement] = None,\n    left_section_props: Optional[dict[str, Any]] = None,\n    left_section_width: Optional[str] = None,\n    on_change: Optional[Callable[[str], None]] = None,\n    radius: Optional[str] = None,\n    required: Optional[bool] = None,\n    right_section: Optional[RouteLitElement] = None,\n    right_section_props: Optional[dict[str, Any]] = None,\n    right_section_width: Optional[str] = None,\n    size: Optional[str] = None,\n    value: Optional[str] = None,\n    with_asterisk: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; str:\n    \"\"\"\n    Native HTML select input.\n\n    Args:\n        label (str): Field label.\n        options (list[Union[RLOption, str]]): Available options.\n        description (Optional[str]): Helper text under the label.\n        disabled (Optional[bool]): Disable input interaction.\n        error (Optional[str]): Error message.\n        format_func (Optional[Callable[[Any], str]]): Map option value to label.\n        key (Optional[str]): Explicit element key.\n        left_section (Optional[RouteLitElement]): Left adornment.\n        left_section_props (Optional[dict[str, Any]]): Left adornment props.\n        left_section_width (Optional[str]): Left adornment width.\n        on_change (Optional[Callable[[str], None]]): Change handler.\n        radius (Optional[str]): Corner radius.\n        required (Optional[bool]): Mark as required.\n        right_section (Optional[RouteLitElement]): Right adornment.\n        right_section_props (Optional[dict[str, Any]]): Right adornment props.\n        right_section_width (Optional[str]): Right adornment width.\n        size (Optional[str]): Control size.\n        value (Optional[str]): Current value.\n        with_asterisk (Optional[bool]): Show required asterisk.\n        kwargs: Additional props to set.\n\n    Returns:\n        str: Current value.\n    \"\"\"\n    return cast(\n        str,\n        self._x_radio_select(\n            \"nativeselect\",\n            key or self._new_widget_id(\"native-select\", label),\n            description=description,\n            disabled=disabled,\n            error=error,\n            format_func=format_func,\n            label=label,\n            leftSection=left_section,\n            leftSectionProps=left_section_props,\n            leftSectionWidth=left_section_width,\n            on_change=on_change,\n            options=options,  # type: ignore[arg-type]\n            options_attr=\"data\",\n            radius=radius,\n            required=required,\n            rightSection=right_section,\n            rightSectionProps=right_section_props,\n            rightSectionWidth=right_section_width,\n            size=size,\n            value=value,\n            withAsterisk=with_asterisk,\n            **kwargs,\n        ),\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.nav_link","title":"<code>nav_link(href, label, *, active=None, auto_contrast=None, children_offset=None, color=None, default_opened=None, description=None, disable_right_section_rotation=None, disabled=None, exact=None, is_external=False, left_section=None, no_wrap=None, right_section=None, **kwargs)</code>","text":"<p>Navigation link, typically used in sidebars or menus.</p> <p>Parameters:</p> Name Type Description Default <code>href</code> <code>str</code> <p>Destination path.</p> required <code>label</code> <code>str</code> <p>Visible label.</p> required <code>active</code> <code>Optional[bool]</code> <p>Force active state.</p> <code>None</code> <code>auto_contrast</code> <code>Optional[bool]</code> <p>Improve contrast automatically.</p> <code>None</code> <code>children_offset</code> <code>Optional[str]</code> <p>Indentation for children links.</p> <code>None</code> <code>color</code> <code>Optional[str]</code> <p>Accent color.</p> <code>None</code> <code>default_opened</code> <code>Optional[bool]</code> <p>Start expanded.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>disable_right_section_rotation</code> <code>Optional[bool]</code> <p>Disable chevron rotation.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable interaction.</p> <code>None</code> <code>exact</code> <code>Optional[bool]</code> <p>Match route exactly.</p> <code>None</code> <code>is_external</code> <code>bool</code> <p>Treat as external link.</p> <code>False</code> <code>left_section</code> <code>Optional[RouteLitElement]</code> <p>Left adornment.</p> <code>None</code> <code>no_wrap</code> <code>Optional[bool]</code> <p>Prevent label wrapping.</p> <code>None</code> <code>right_section</code> <code>Optional[RouteLitElement]</code> <p>Right adornment.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder for child links/content.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def nav_link(\n    self,\n    href: str,\n    label: str,\n    *,\n    active: Optional[bool] = None,\n    auto_contrast: Optional[bool] = None,\n    children_offset: Optional[str] = None,\n    color: Optional[str] = None,\n    default_opened: Optional[bool] = None,\n    description: Optional[str] = None,\n    disable_right_section_rotation: Optional[bool] = None,\n    disabled: Optional[bool] = None,\n    exact: Optional[bool] = None,\n    is_external: bool = False,\n    left_section: Optional[RouteLitElement] = None,\n    no_wrap: Optional[bool] = None,\n    right_section: Optional[RouteLitElement] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Navigation link, typically used in sidebars or menus.\n\n    Args:\n        href (str): Destination path.\n        label (str): Visible label.\n        active (Optional[bool]): Force active state.\n        auto_contrast (Optional[bool]): Improve contrast automatically.\n        children_offset (Optional[str]): Indentation for children links.\n        color (Optional[str]): Accent color.\n        default_opened (Optional[bool]): Start expanded.\n        description (Optional[str]): Helper text under the label.\n        disable_right_section_rotation (Optional[bool]): Disable chevron rotation.\n        disabled (Optional[bool]): Disable interaction.\n        exact (Optional[bool]): Match route exactly.\n        is_external (bool): Treat as external link.\n        left_section (Optional[RouteLitElement]): Left adornment.\n        no_wrap (Optional[bool]): Prevent label wrapping.\n        right_section (Optional[RouteLitElement]): Right adornment.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder for child links/content.\n    \"\"\"\n    element = self.link(\n        href,\n        label,\n        active=active,\n        autoContrast=auto_contrast,\n        childrenOffset=children_offset,\n        color=color,\n        defaultOpened=default_opened,\n        description=description,\n        disableRightSectionRotation=disable_right_section_rotation,\n        disabled=disabled,\n        exact=exact,\n        is_external=is_external,\n        leftSection=left_section,\n        noWrap=no_wrap,\n        rightSection=right_section,\n        rl_element_type=\"navlink\",\n        rl_text_attr=\"label\",\n        **kwargs,\n    )\n    return self._build_nested_builder(element)  # type: ignore[return-value]\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.notification","title":"<code>notification(title, *, key=None, close_button_props=None, color=None, icon=None, on_close=None, radius=None, text=None, with_border=None, with_close_button=None, **kwargs)</code>","text":"<p>Notification element for transient messages.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>Notification title.</p> required <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>close_button_props</code> <code>Optional[dict[str, Any]]</code> <p>Close button props.</p> <code>None</code> <code>color</code> <code>Optional[str]</code> <p>Color variant.</p> <code>None</code> <code>icon</code> <code>Optional[RouteLitElement]</code> <p>Leading icon.</p> <code>None</code> <code>on_close</code> <code>Optional[Callable[[], bool]]</code> <p>Close handler.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Corner radius.</p> <code>None</code> <code>text</code> <code>Optional[str]</code> <p>Notification content.</p> <code>None</code> <code>with_border</code> <code>Optional[bool]</code> <p>Show border.</p> <code>None</code> <code>with_close_button</code> <code>Optional[bool]</code> <p>Show close button.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the notification element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def notification(\n    self,\n    title: str,\n    *,\n    key: Optional[str] = None,\n    close_button_props: Optional[dict[str, Any]] = None,\n    color: Optional[str] = None,\n    icon: Optional[RouteLitElement] = None,\n    on_close: Optional[Callable[[], bool]] = None,\n    radius: Optional[Union[str, int]] = None,\n    text: Optional[str] = None,\n    with_border: Optional[bool] = None,\n    with_close_button: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Notification element for transient messages.\n\n    Args:\n        title (str): Notification title.\n        key (Optional[str]): Explicit element key.\n        close_button_props (Optional[dict[str, Any]]): Close button props.\n        color (Optional[str]): Color variant.\n        icon (Optional[RouteLitElement]): Leading icon.\n        on_close (Optional[Callable[[], bool]]): Close handler.\n        radius (Optional[Union[str, int]]): Corner radius.\n        text (Optional[str]): Notification content.\n        with_border (Optional[bool]): Show border.\n        with_close_button (Optional[bool]): Show close button.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the notification element.\n    \"\"\"\n    return self._x_dialog(  # type: ignore[return-value]\n        \"notification\",\n        key or self._new_widget_id(\"notification\", title),\n        closeButtonProps=close_button_props,\n        color=color,\n        radius=radius,\n        icon=icon,\n        title=title,\n        on_close=on_close,\n        withBorder=with_border,\n        withCloseButton=with_close_button,\n        children=text,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.number_formatter","title":"<code>number_formatter(value, *, key=None, **kwargs)</code>","text":"<p>Format and display a number according to given options.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Union[float, int, str]</code> <p>Value to format.</p> required <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def number_formatter(\n    self,\n    value: Union[float, int, str],\n    *,\n    key: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"\n    Format and display a number according to given options.\n\n    Args:\n        value (Union[float, int, str]): Value to format.\n        key (Optional[str]): Explicit element key.\n        kwargs: Additional props to set.\n    \"\"\"\n    self._create_element(\n        key=key or self._new_text_id(\"numberformatter\"),\n        name=\"numberformatter\",\n        props={\"value\": value, **kwargs},\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.number_input","title":"<code>number_input(label, *, allow_decimal=None, allow_leading_zeros=None, allow_negative=None, allowed_decimal_separators=None, decimal_scale=None, decimal_separator=None, description=None, disabled=None, error=None, hide_controls=None, key=None, left_section=None, left_section_props=None, left_section_width=None, max_value=None, min_value=None, on_change=None, parser=float, required=None, right_section=None, right_section_props=None, right_section_width=None, size=None, step=None, value=None, with_asterisk=None, **kwargs)</code>","text":"<p>Numeric input with formatting and controls.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>allow_decimal</code> <code>Optional[bool]</code> <p>Allow decimal values.</p> <code>None</code> <code>allow_leading_zeros</code> <code>Optional[bool]</code> <p>Permit leading zeros.</p> <code>None</code> <code>allow_negative</code> <code>Optional[bool]</code> <p>Permit negative values.</p> <code>None</code> <code>allowed_decimal_separators</code> <code>Optional[list[str]]</code> <p>Additional decimal separators.</p> <code>None</code> <code>decimal_scale</code> <code>Optional[int]</code> <p>Maximum number of decimal places.</p> <code>None</code> <code>decimal_separator</code> <code>Optional[str]</code> <p>Decimal separator to use.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable input interaction.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>hide_controls</code> <code>Optional[bool]</code> <p>Hide increment/decrement controls.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>left_section</code> <code>Optional[RouteLitElement]</code> <p>Left adornment.</p> <code>None</code> <code>left_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Left adornment props.</p> <code>None</code> <code>left_section_width</code> <code>Optional[str]</code> <p>Left adornment width.</p> <code>None</code> <code>max_value</code> <code>Optional[Union[float, int]]</code> <p>Maximum value.</p> <code>None</code> <code>min_value</code> <code>Optional[Union[float, int]]</code> <p>Minimum value.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[Union[float, int]], None]]</code> <p>Change handler.</p> <code>None</code> <code>parser</code> <code>Callable[[str], Union[float, int]]</code> <p>Parser for the returned value.</p> <code>float</code> <code>required</code> <code>Optional[bool]</code> <p>Mark as required.</p> <code>None</code> <code>right_section</code> <code>Optional[RouteLitElement]</code> <p>Right adornment.</p> <code>None</code> <code>right_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Right adornment props.</p> <code>None</code> <code>right_section_width</code> <code>Optional[str]</code> <p>Right adornment width.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>step</code> <code>Optional[Union[float, int]]</code> <p>Step of increment/decrement.</p> <code>None</code> <code>value</code> <code>Optional[Union[float, int]]</code> <p>Current value.</p> <code>None</code> <code>with_asterisk</code> <code>Optional[bool]</code> <p>Show required asterisk.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Union[float, int]</code> <p>Union[float, int]: Current value parsed by the provided parser.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def number_input(\n    self,\n    label: str,\n    *,\n    allow_decimal: Optional[bool] = None,\n    allow_leading_zeros: Optional[bool] = None,\n    allow_negative: Optional[bool] = None,\n    allowed_decimal_separators: Optional[list[str]] = None,\n    decimal_scale: Optional[int] = None,\n    decimal_separator: Optional[str] = None,\n    description: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    error: Optional[str] = None,\n    hide_controls: Optional[bool] = None,\n    key: Optional[str] = None,\n    left_section: Optional[RouteLitElement] = None,\n    left_section_props: Optional[dict[str, Any]] = None,\n    left_section_width: Optional[str] = None,\n    max_value: Optional[Union[float, int]] = None,\n    min_value: Optional[Union[float, int]] = None,\n    on_change: Optional[Callable[[Union[float, int]], None]] = None,\n    parser: Callable[[str], Union[float, int]] = float,\n    required: Optional[bool] = None,\n    right_section: Optional[RouteLitElement] = None,\n    right_section_props: Optional[dict[str, Any]] = None,\n    right_section_width: Optional[str] = None,\n    size: Optional[str] = None,\n    step: Optional[Union[float, int]] = None,\n    value: Optional[Union[float, int]] = None,\n    with_asterisk: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; Union[float, int]:\n    \"\"\"\n    Numeric input with formatting and controls.\n\n    Args:\n        label (str): Field label.\n        allow_decimal (Optional[bool]): Allow decimal values.\n        allow_leading_zeros (Optional[bool]): Permit leading zeros.\n        allow_negative (Optional[bool]): Permit negative values.\n        allowed_decimal_separators (Optional[list[str]]): Additional decimal separators.\n        decimal_scale (Optional[int]): Maximum number of decimal places.\n        decimal_separator (Optional[str]): Decimal separator to use.\n        description (Optional[str]): Helper text under the label.\n        disabled (Optional[bool]): Disable input interaction.\n        error (Optional[str]): Error message.\n        hide_controls (Optional[bool]): Hide increment/decrement controls.\n        key (Optional[str]): Explicit element key.\n        left_section (Optional[RouteLitElement]): Left adornment.\n        left_section_props (Optional[dict[str, Any]]): Left adornment props.\n        left_section_width (Optional[str]): Left adornment width.\n        max_value (Optional[Union[float, int]]): Maximum value.\n        min_value (Optional[Union[float, int]]): Minimum value.\n        on_change (Optional[Callable[[Union[float, int]], None]]): Change handler.\n        parser (Callable[[str], Union[float, int]]): Parser for the returned value.\n        required (Optional[bool]): Mark as required.\n        right_section (Optional[RouteLitElement]): Right adornment.\n        right_section_props (Optional[dict[str, Any]]): Right adornment props.\n        right_section_width (Optional[str]): Right adornment width.\n        size (Optional[str]): Control size.\n        step (Optional[Union[float, int]]): Step of increment/decrement.\n        value (Optional[Union[float, int]]): Current value.\n        with_asterisk (Optional[bool]): Show required asterisk.\n        kwargs: Additional props to set.\n\n    Returns:\n        Union[float, int]: Current value parsed by the provided parser.\n    \"\"\"\n    return parser(\n        cast(\n            str,\n            self._x_input(\n                \"numberinput\",\n                key or self._new_widget_id(\"numberinput\", label),\n                allowDecimal=allow_decimal,\n                allowLeadingZeros=allow_leading_zeros,\n                allowNegative=allow_negative,\n                allowedDecimalSeparators=allowed_decimal_separators,\n                decimalScale=decimal_scale,\n                decimalSeparator=decimal_separator,\n                description=description,\n                disabled=disabled,\n                error=error,\n                hideControls=hide_controls,\n                label=label,\n                leftSection=left_section,\n                leftSectionProps=left_section_props,\n                leftSectionWidth=left_section_width,\n                max=max_value,\n                min=min_value,\n                on_change=on_change,\n                required=required,\n                rightSection=right_section,\n                rightSectionProps=right_section_props,\n                rightSectionWidth=right_section_width,\n                size=size,\n                step=step,\n                value=value,\n                withAsterisk=with_asterisk,\n                **kwargs,\n            ),\n        )\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.paper","title":"<code>paper(*, key=None, radius=None, shadow=None, with_border=None, **kwargs)</code>","text":"<p>Container with background, border, and shadow.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Corner radius.</p> <code>None</code> <code>shadow</code> <code>Optional[str]</code> <p>Shadow preset.</p> <code>None</code> <code>with_border</code> <code>Optional[bool]</code> <p>Show border.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the paper element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def paper(\n    self,\n    *,\n    key: Optional[str] = None,\n    radius: Optional[Union[str, int]] = None,\n    shadow: Optional[str] = None,\n    with_border: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Container with background, border, and shadow.\n\n    Args:\n        key (Optional[str]): Explicit element key.\n        radius (Optional[Union[str, int]]): Corner radius.\n        shadow (Optional[str]): Shadow preset.\n        with_border (Optional[bool]): Show border.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the paper element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"paper\",\n        key=key or self._new_text_id(\"paper\"),\n        props={\n            \"radius\": radius,\n            \"shadow\": shadow,\n            \"withBorder\": with_border,\n            **kwargs,\n        },\n        virtual=True,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.password_input","title":"<code>password_input(label, *, description=None, disabled=None, error=None, input_size=None, key=None, on_change=None, radius=None, required=None, size=None, value=None, visible=None, with_asterisk=None, **kwargs)</code>","text":"<p>Password input with visibility toggle.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable input interaction.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>input_size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[str], None]]</code> <p>Change handler.</p> <code>None</code> <code>radius</code> <code>Optional[str]</code> <p>Corner radius.</p> <code>None</code> <code>required</code> <code>Optional[bool]</code> <p>Mark as required.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>value</code> <code>Optional[str]</code> <p>Current value.</p> <code>None</code> <code>visible</code> <code>Optional[bool]</code> <p>Force visibility of the password.</p> <code>None</code> <code>with_asterisk</code> <code>Optional[bool]</code> <p>Show required asterisk.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: Current value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def password_input(\n    self,\n    label: str,\n    *,\n    description: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    error: Optional[str] = None,\n    input_size: Optional[str] = None,\n    key: Optional[str] = None,\n    on_change: Optional[Callable[[str], None]] = None,\n    radius: Optional[str] = None,\n    required: Optional[bool] = None,\n    size: Optional[str] = None,\n    value: Optional[str] = None,\n    visible: Optional[bool] = None,\n    with_asterisk: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; Optional[str]:\n    \"\"\"\n    Password input with visibility toggle.\n\n    Args:\n        label (str): Field label.\n        description (Optional[str]): Helper text under the label.\n        disabled (Optional[bool]): Disable input interaction.\n        error (Optional[str]): Error message.\n        input_size (Optional[str]): Control size.\n        key (Optional[str]): Explicit element key.\n        on_change (Optional[Callable[[str], None]]): Change handler.\n        radius (Optional[str]): Corner radius.\n        required (Optional[bool]): Mark as required.\n        size (Optional[str]): Control size.\n        value (Optional[str]): Current value.\n        visible (Optional[bool]): Force visibility of the password.\n        with_asterisk (Optional[bool]): Show required asterisk.\n        kwargs: Additional props to set.\n\n    Returns:\n        Optional[str]: Current value.\n    \"\"\"\n    return self._x_input(\n        \"passwordinput\",\n        key or self._new_widget_id(\"passwordinput\", label),\n        description=description,\n        disabled=disabled,\n        error=error,\n        inputSize=input_size,\n        label=label,\n        on_change=on_change,\n        radius=radius,\n        required=required,\n        size=size,\n        value=value,\n        visible=visible,\n        withAsterisk=with_asterisk,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.pie_chart","title":"<code>pie_chart(data, *, end_angle=None, key=None, label_color=None, labels_position=None, labels_type=None, padding_angle=None, pie_chart_props=None, pie_props=None, size=None, start_angle=None, stroke_color=None, stroke_width=None, tooltip_animation_duration=None, tooltip_data_source=None, tooltip_props=None, with_labels=None, with_labels_line=None, with_tooltip=None, **kwargs)</code>","text":"<p>Pie chart to visualize parts of a whole.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list</code> <p>Dataset.</p> required <code>end_angle</code> <code>Optional[int]</code> <p>End angle.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>label_color</code> <code>Optional[str]</code> <p>Label color.</p> <code>None</code> <code>labels_position</code> <code>Optional[Literal['outside', 'inside']]</code> <p>Labels position.</p> <code>None</code> <code>labels_type</code> <code>Optional[Literal['value', 'percent']]</code> <p>Label content.</p> <code>None</code> <code>padding_angle</code> <code>Optional[int]</code> <p>Angle between segments.</p> <code>None</code> <code>pie_chart_props</code> <code>Optional[dict[str, Any]]</code> <p>Chart container props.</p> <code>None</code> <code>pie_props</code> <code>Optional[dict[str, Any]]</code> <p>Pie props.</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>Chart size.</p> <code>None</code> <code>start_angle</code> <code>Optional[int]</code> <p>Start angle.</p> <code>None</code> <code>stroke_color</code> <code>Optional[str]</code> <p>Border color.</p> <code>None</code> <code>stroke_width</code> <code>Optional[int]</code> <p>Border width.</p> <code>None</code> <code>tooltip_animation_duration</code> <code>Optional[int]</code> <p>Tooltip animation duration.</p> <code>None</code> <code>tooltip_data_source</code> <code>Optional[Literal['all', 'segment']]</code> <p>Tooltip data source.</p> <code>None</code> <code>tooltip_props</code> <code>Optional[dict[str, Any]]</code> <p>Tooltip props.</p> <code>None</code> <code>with_labels</code> <code>Optional[bool]</code> <p>Show labels.</p> <code>None</code> <code>with_labels_line</code> <code>Optional[bool]</code> <p>Show label connector lines.</p> <code>None</code> <code>with_tooltip</code> <code>Optional[bool]</code> <p>Show tooltip.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the pie chart element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def pie_chart(\n    self,\n    data: list,\n    *,\n    end_angle: Optional[int] = None,\n    key: Optional[str] = None,\n    label_color: Optional[str] = None,\n    labels_position: Optional[Literal[\"outside\", \"inside\"]] = None,\n    labels_type: Optional[Literal[\"value\", \"percent\"]] = None,\n    padding_angle: Optional[int] = None,\n    pie_chart_props: Optional[dict[str, Any]] = None,\n    pie_props: Optional[dict[str, Any]] = None,\n    size: Optional[int] = None,\n    start_angle: Optional[int] = None,\n    stroke_color: Optional[str] = None,\n    stroke_width: Optional[int] = None,\n    tooltip_animation_duration: Optional[int] = None,\n    tooltip_data_source: Optional[Literal[\"all\", \"segment\"]] = None,\n    tooltip_props: Optional[dict[str, Any]] = None,\n    with_labels: Optional[bool] = None,\n    with_labels_line: Optional[bool] = None,\n    with_tooltip: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Pie chart to visualize parts of a whole.\n\n    Args:\n        data (list): Dataset.\n        end_angle (Optional[int]): End angle.\n        key (Optional[str]): Explicit element key.\n        label_color (Optional[str]): Label color.\n        labels_position (Optional[Literal[\"outside\",\"inside\"]]): Labels position.\n        labels_type (Optional[Literal[\"value\",\"percent\"]]): Label content.\n        padding_angle (Optional[int]): Angle between segments.\n        pie_chart_props (Optional[dict[str, Any]]): Chart container props.\n        pie_props (Optional[dict[str, Any]]): Pie props.\n        size (Optional[int]): Chart size.\n        start_angle (Optional[int]): Start angle.\n        stroke_color (Optional[str]): Border color.\n        stroke_width (Optional[int]): Border width.\n        tooltip_animation_duration (Optional[int]): Tooltip animation duration.\n        tooltip_data_source (Optional[Literal[\"all\",\"segment\"]]): Tooltip data source.\n        tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n        with_labels (Optional[bool]): Show labels.\n        with_labels_line (Optional[bool]): Show label connector lines.\n        with_tooltip (Optional[bool]): Show tooltip.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the pie chart element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"piechart\",\n        key=key or self._new_text_id(\"piechart\"),\n        props={\n            \"data\": data,\n            \"endAngle\": end_angle,\n            \"labelColor\": label_color,\n            \"labelsPosition\": labels_position,\n            \"labelsType\": labels_type,\n            \"paddingAngle\": padding_angle,\n            \"pieChartProps\": pie_chart_props,\n            \"pieProps\": pie_props,\n            \"size\": size,\n            \"startAngle\": start_angle,\n            \"strokeColor\": stroke_color,\n            \"strokeWidth\": stroke_width,\n            \"tooltipAnimationDuration\": tooltip_animation_duration,\n            \"tooltipDataSource\": tooltip_data_source,\n            \"tooltipProps\": tooltip_props,\n            \"withLabels\": with_labels,\n            \"withLabelsLine\": with_labels_line,\n            \"withTooltip\": with_tooltip,\n            **kwargs,\n        },\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.progress","title":"<code>progress(value, *, key=None, animated=None, auto_contrast=None, color=None, radius=None, size=None, striped=None, transition_duration=None, **kwargs)</code>","text":"<p>Determinate progress bar.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>Progress value from 0 to 100.</p> required <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>animated</code> <code>Optional[bool]</code> <p>Animate stripes.</p> <code>None</code> <code>auto_contrast</code> <code>Optional[bool]</code> <p>Improve contrast automatically.</p> <code>None</code> <code>color</code> <code>Optional[str]</code> <p>Color variant.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Corner radius.</p> <code>None</code> <code>size</code> <code>Optional[Union[str, int]]</code> <p>Height of the bar.</p> <code>None</code> <code>striped</code> <code>Optional[bool]</code> <p>Show stripes.</p> <code>None</code> <code>transition_duration</code> <code>Optional[int]</code> <p>Animation duration in ms.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def progress(\n    self,\n    value: float,\n    *,\n    key: Optional[str] = None,\n    animated: Optional[bool] = None,\n    auto_contrast: Optional[bool] = None,\n    color: Optional[str] = None,\n    radius: Optional[Union[str, int]] = None,\n    size: Optional[Union[str, int]] = None,\n    striped: Optional[bool] = None,\n    transition_duration: Optional[int] = None,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"\n    Determinate progress bar.\n\n    Args:\n        value (float): Progress value from 0 to 100.\n        key (Optional[str]): Explicit element key.\n        animated (Optional[bool]): Animate stripes.\n        auto_contrast (Optional[bool]): Improve contrast automatically.\n        color (Optional[str]): Color variant.\n        radius (Optional[Union[str, int]]): Corner radius.\n        size (Optional[Union[str, int]]): Height of the bar.\n        striped (Optional[bool]): Show stripes.\n        transition_duration (Optional[int]): Animation duration in ms.\n        kwargs: Additional props to set.\n    \"\"\"\n    self._create_element(\n        key=key or self._new_text_id(\"progress\"),\n        name=\"progress\",\n        props={\n            \"value\": value,\n            \"animated\": animated,\n            \"autoContrast\": auto_contrast,\n            \"color\": color,\n            \"radius\": radius,\n            \"size\": size,\n            \"striped\": striped,\n            \"transitionDuration\": transition_duration,\n            **kwargs,\n        },\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.radar_chart","title":"<code>radar_chart(data, data_key, series, *, active_dot_props=None, dot_props=None, grid_color=None, key=None, legend_props=None, polar_angle_axis_props=None, polar_grid_props=None, polar_radius_axis_props=None, radar_chart_props=None, radar_props=None, text_color=None, tooltip_animation_duration=None, tooltip_props=None, with_dots=None, with_legend=None, with_polar_angle_axis=None, with_polar_grid=None, with_polar_radius_axis=None, with_tooltip=None, **kwargs)</code>","text":"<p>Radar chart for multi-dimensional categorical data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list</code> <p>Dataset.</p> required <code>data_key</code> <code>str</code> <p>Key for category labels.</p> required <code>series</code> <code>list[dict[str, Any]]</code> <p>Series configuration.</p> required <code>active_dot_props</code> <code>Optional[dict[str, Any]]</code> <p>Active dot props.</p> <code>None</code> <code>dot_props</code> <code>Optional[dict[str, Any]]</code> <p>Dot props.</p> <code>None</code> <code>grid_color</code> <code>Optional[str]</code> <p>Grid color.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>legend_props</code> <code>Optional[dict[str, Any]]</code> <p>Legend props.</p> <code>None</code> <code>polar_angle_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>Polar angle axis props.</p> <code>None</code> <code>polar_grid_props</code> <code>Optional[dict[str, Any]]</code> <p>Polar grid props.</p> <code>None</code> <code>polar_radius_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>Polar radius axis props.</p> <code>None</code> <code>radar_chart_props</code> <code>Optional[dict[str, Any]]</code> <p>Chart container props.</p> <code>None</code> <code>radar_props</code> <code>Optional[dict[str, Any]]</code> <p>Radar area/line props.</p> <code>None</code> <code>text_color</code> <code>Optional[str]</code> <p>Text color.</p> <code>None</code> <code>tooltip_animation_duration</code> <code>Optional[int]</code> <p>Tooltip animation duration.</p> <code>None</code> <code>tooltip_props</code> <code>Optional[dict[str, Any]]</code> <p>Tooltip props.</p> <code>None</code> <code>with_dots</code> <code>Optional[bool]</code> <p>Show dots.</p> <code>None</code> <code>with_legend</code> <code>Optional[bool]</code> <p>Show legend.</p> <code>None</code> <code>with_polar_angle_axis</code> <code>Optional[bool]</code> <p>Show angle axis.</p> <code>None</code> <code>with_polar_grid</code> <code>Optional[bool]</code> <p>Show polar grid.</p> <code>None</code> <code>with_polar_radius_axis</code> <code>Optional[bool]</code> <p>Show radius axis.</p> <code>None</code> <code>with_tooltip</code> <code>Optional[bool]</code> <p>Show tooltip.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the radar chart element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def radar_chart(\n    self,\n    data: list,\n    data_key: str,\n    series: list[dict[str, Any]],\n    *,\n    active_dot_props: Optional[dict[str, Any]] = None,\n    dot_props: Optional[dict[str, Any]] = None,\n    grid_color: Optional[str] = None,\n    key: Optional[str] = None,\n    legend_props: Optional[dict[str, Any]] = None,\n    polar_angle_axis_props: Optional[dict[str, Any]] = None,\n    polar_grid_props: Optional[dict[str, Any]] = None,\n    polar_radius_axis_props: Optional[dict[str, Any]] = None,\n    radar_chart_props: Optional[dict[str, Any]] = None,\n    radar_props: Optional[dict[str, Any]] = None,\n    text_color: Optional[str] = None,\n    tooltip_animation_duration: Optional[int] = None,\n    tooltip_props: Optional[dict[str, Any]] = None,\n    with_dots: Optional[bool] = None,\n    with_legend: Optional[bool] = None,\n    with_polar_angle_axis: Optional[bool] = None,\n    with_polar_grid: Optional[bool] = None,\n    with_polar_radius_axis: Optional[bool] = None,\n    with_tooltip: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Radar chart for multi-dimensional categorical data.\n\n    Args:\n        data (list): Dataset.\n        data_key (str): Key for category labels.\n        series (list[dict[str, Any]]): Series configuration.\n        active_dot_props (Optional[dict[str, Any]]): Active dot props.\n        dot_props (Optional[dict[str, Any]]): Dot props.\n        grid_color (Optional[str]): Grid color.\n        key (Optional[str]): Explicit element key.\n        legend_props (Optional[dict[str, Any]]): Legend props.\n        polar_angle_axis_props (Optional[dict[str, Any]]): Polar angle axis props.\n        polar_grid_props (Optional[dict[str, Any]]): Polar grid props.\n        polar_radius_axis_props (Optional[dict[str, Any]]): Polar radius axis props.\n        radar_chart_props (Optional[dict[str, Any]]): Chart container props.\n        radar_props (Optional[dict[str, Any]]): Radar area/line props.\n        text_color (Optional[str]): Text color.\n        tooltip_animation_duration (Optional[int]): Tooltip animation duration.\n        tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n        with_dots (Optional[bool]): Show dots.\n        with_legend (Optional[bool]): Show legend.\n        with_polar_angle_axis (Optional[bool]): Show angle axis.\n        with_polar_grid (Optional[bool]): Show polar grid.\n        with_polar_radius_axis (Optional[bool]): Show radius axis.\n        with_tooltip (Optional[bool]): Show tooltip.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the radar chart element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"radarchart\",\n        key=key or self._new_text_id(\"radarchart\"),\n        props={\n            \"activeDotProps\": active_dot_props,\n            \"data\": data,\n            \"dataKey\": data_key,\n            \"dotProps\": dot_props,\n            \"gridColor\": grid_color,\n            \"legendProps\": legend_props,\n            \"polarAngleAxisProps\": polar_angle_axis_props,\n            \"polarGridProps\": polar_grid_props,\n            \"polarRadiusAxisProps\": polar_radius_axis_props,\n            \"radarChartProps\": radar_chart_props,\n            \"radarProps\": radar_props,\n            \"series\": series,\n            \"textColor\": text_color,\n            \"tooltipAnimationDuration\": tooltip_animation_duration,\n            \"tooltipProps\": tooltip_props,\n            \"withDots\": with_dots,\n            \"withLegend\": with_legend,\n            \"withPolarAngleAxis\": with_polar_angle_axis,\n            \"withPolarGrid\": with_polar_grid,\n            \"withPolarRadiusAxis\": with_polar_radius_axis,\n            \"withTooltip\": with_tooltip,\n            **kwargs,\n        },\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.radial_bar_chart","title":"<code>radial_bar_chart(data, data_key, *, bar_size=None, empty_background_color=None, end_angle=None, key=None, legend_props=None, radial_bar_chart_props=None, radial_bar_props=None, start_angle=None, tooltip_props=None, with_background=None, with_labels=None, with_legend=None, with_tooltip=None, **kwargs)</code>","text":"<p>Radial bar chart for circular bar visualizations.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list[dict[str, Any]]</code> <p>Dataset.</p> required <code>data_key</code> <code>str</code> <p>Value key.</p> required <code>bar_size</code> <code>Optional[int]</code> <p>Bar thickness.</p> <code>None</code> <code>empty_background_color</code> <code>Optional[str]</code> <p>Empty background color.</p> <code>None</code> <code>end_angle</code> <code>Optional[int]</code> <p>End angle.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>legend_props</code> <code>Optional[dict[str, Any]]</code> <p>Legend props.</p> <code>None</code> <code>radial_bar_chart_props</code> <code>Optional[dict[str, Any]]</code> <p>Chart container props.</p> <code>None</code> <code>radial_bar_props</code> <code>Optional[dict[str, Any]]</code> <p>Bar props.</p> <code>None</code> <code>start_angle</code> <code>Optional[int]</code> <p>Start angle.</p> <code>None</code> <code>tooltip_props</code> <code>Optional[dict[str, Any]]</code> <p>Tooltip props.</p> <code>None</code> <code>with_background</code> <code>Optional[bool]</code> <p>Show circular background.</p> <code>None</code> <code>with_labels</code> <code>Optional[bool]</code> <p>Show labels.</p> <code>None</code> <code>with_legend</code> <code>Optional[bool]</code> <p>Show legend.</p> <code>None</code> <code>with_tooltip</code> <code>Optional[bool]</code> <p>Show tooltip.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the radial bar chart element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def radial_bar_chart(\n    self,\n    data: list[dict[str, Any]],\n    data_key: str,\n    *,\n    bar_size: Optional[int] = None,\n    empty_background_color: Optional[str] = None,\n    end_angle: Optional[int] = None,\n    key: Optional[str] = None,\n    legend_props: Optional[dict[str, Any]] = None,\n    radial_bar_chart_props: Optional[dict[str, Any]] = None,\n    radial_bar_props: Optional[dict[str, Any]] = None,\n    start_angle: Optional[int] = None,\n    tooltip_props: Optional[dict[str, Any]] = None,\n    with_background: Optional[bool] = None,\n    with_labels: Optional[bool] = None,\n    with_legend: Optional[bool] = None,\n    with_tooltip: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Radial bar chart for circular bar visualizations.\n\n    Args:\n        data (list[dict[str, Any]]): Dataset.\n        data_key (str): Value key.\n        bar_size (Optional[int]): Bar thickness.\n        empty_background_color (Optional[str]): Empty background color.\n        end_angle (Optional[int]): End angle.\n        key (Optional[str]): Explicit element key.\n        legend_props (Optional[dict[str, Any]]): Legend props.\n        radial_bar_chart_props (Optional[dict[str, Any]]): Chart container props.\n        radial_bar_props (Optional[dict[str, Any]]): Bar props.\n        start_angle (Optional[int]): Start angle.\n        tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n        with_background (Optional[bool]): Show circular background.\n        with_labels (Optional[bool]): Show labels.\n        with_legend (Optional[bool]): Show legend.\n        with_tooltip (Optional[bool]): Show tooltip.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the radial bar chart element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"radialbarchart\",\n        key=key or self._new_text_id(\"radialbarchart\"),\n        props={\n            \"data\": data,\n            \"dataKey\": data_key,\n            \"barSize\": bar_size,\n            \"emptyBackgroundColor\": empty_background_color,\n            \"endAngle\": end_angle,\n            \"legendProps\": legend_props,\n            \"radialBarChartProps\": radial_bar_chart_props,\n            \"radialBarProps\": radial_bar_props,\n            \"startAngle\": start_angle,\n            \"tooltipProps\": tooltip_props,\n            \"withBackground\": with_background,\n            \"withLabels\": with_labels,\n            \"withLegend\": with_legend,\n            \"withTooltip\": with_tooltip,\n            **kwargs,\n        },\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.radio_group","title":"<code>radio_group(label, options, *, description=None, disabled=None, error=None, format_func=None, group_props=None, input_size=None, key=None, on_change=None, read_only=None, required=None, size=None, value=None, with_asterisk=None, **kwargs)</code>","text":"<p>Single selection using radio inputs.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Group label.</p> required <code>options</code> <code>list[Union[RLOption, str]]</code> <p>Available options.</p> required <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable interaction.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>format_func</code> <code>Optional[Callable[[Any], str]]</code> <p>Map option value to label.</p> <code>None</code> <code>group_props</code> <code>Optional[dict[str, Any]]</code> <p>Extra props for the group container.</p> <code>None</code> <code>input_size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[str], None]]</code> <p>Change handler.</p> <code>None</code> <code>read_only</code> <code>Optional[bool]</code> <p>Read-only state.</p> <code>None</code> <code>required</code> <code>Optional[bool]</code> <p>Mark as required.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>value</code> <code>Optional[str]</code> <p>Selected value.</p> <code>None</code> <code>with_asterisk</code> <code>Optional[bool]</code> <p>Show required asterisk.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: Selected value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def radio_group(\n    self,\n    label: str,\n    options: list[Union[RLOption, str]],\n    *,\n    description: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    error: Optional[str] = None,\n    format_func: Optional[Callable[[Any], str]] = None,\n    group_props: Optional[dict[str, Any]] = None,\n    input_size: Optional[str] = None,\n    key: Optional[str] = None,\n    on_change: Optional[Callable[[str], None]] = None,\n    read_only: Optional[bool] = None,\n    required: Optional[bool] = None,\n    size: Optional[str] = None,\n    value: Optional[str] = None,\n    with_asterisk: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; Optional[str]:\n    \"\"\"\n    Single selection using radio inputs.\n\n    Args:\n        label (str): Group label.\n        options (list[Union[RLOption, str]]): Available options.\n        description (Optional[str]): Helper text under the label.\n        disabled (Optional[bool]): Disable interaction.\n        error (Optional[str]): Error message.\n        format_func (Optional[Callable[[Any], str]]): Map option value to label.\n        group_props (Optional[dict[str, Any]]): Extra props for the group container.\n        input_size (Optional[str]): Control size.\n        key (Optional[str]): Explicit element key.\n        on_change (Optional[Callable[[str], None]]): Change handler.\n        read_only (Optional[bool]): Read-only state.\n        required (Optional[bool]): Mark as required.\n        size (Optional[str]): Control size.\n        value (Optional[str]): Selected value.\n        with_asterisk (Optional[bool]): Show required asterisk.\n        kwargs: Additional props to set.\n\n    Returns:\n        Optional[str]: Selected value.\n    \"\"\"\n    return cast(\n        Optional[str],\n        self._x_radio_select(\n            \"radiogroup\",\n            key or self._new_widget_id(\"radio-group\", label),\n            description=description,\n            disabled=disabled,\n            error=error,\n            format_func=format_func,\n            group_props=group_props,\n            inputSize=input_size,\n            label=label,\n            on_change=on_change,\n            options=options,  # type: ignore[arg-type]\n            readOnly=read_only,\n            required=required,\n            size=size,\n            value=value,\n            withAsterisk=with_asterisk,\n            **kwargs,\n        ),\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.range_slider","title":"<code>range_slider(label, *, color=None, disabled=None, inverted=None, key=None, label_always_on=None, marks=None, max_range=None, max_value=None, min_value=None, on_change=None, precision=None, step=None, value=None, **kwargs)</code>","text":"<p>Slider that allows selecting a numeric range.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>color</code> <code>Optional[str]</code> <p>Accent color.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable interaction.</p> <code>None</code> <code>inverted</code> <code>Optional[bool]</code> <p>Invert direction.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>label_always_on</code> <code>Optional[bool]</code> <p>Always show labels above thumbs.</p> <code>None</code> <code>marks</code> <code>Optional[list[RLOption]]</code> <p>Marks along the slider.</p> <code>None</code> <code>max_range</code> <code>Optional[float]</code> <p>Max distance between thumbs.</p> <code>None</code> <code>max_value</code> <code>Optional[float]</code> <p>Maximum value.</p> <code>None</code> <code>min_value</code> <code>Optional[float]</code> <p>Minimum value.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[tuple[float, float]], None]]</code> <p>Change handler.</p> <code>None</code> <code>precision</code> <code>Optional[int]</code> <p>Decimal precision.</p> <code>None</code> <code>step</code> <code>Optional[float]</code> <p>Step size.</p> <code>None</code> <code>value</code> <code>Optional[tuple[float, float]]</code> <p>Current value.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>tuple[float, float]</code> <p>tuple[float, float]: Current range values.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def range_slider(\n    self,\n    label: str,\n    *,\n    color: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    inverted: Optional[bool] = None,\n    key: Optional[str] = None,\n    label_always_on: Optional[bool] = None,\n    marks: Optional[list[RLOption]] = None,\n    max_range: Optional[float] = None,\n    max_value: Optional[float] = None,\n    min_value: Optional[float] = None,\n    on_change: Optional[Callable[[tuple[float, float]], None]] = None,\n    precision: Optional[int] = None,\n    step: Optional[float] = None,\n    value: Optional[tuple[float, float]] = None,\n    **kwargs: Any,\n) -&gt; tuple[float, float]:\n    \"\"\"\n    Slider that allows selecting a numeric range.\n\n    Args:\n        label (str): Field label.\n        color (Optional[str]): Accent color.\n        disabled (Optional[bool]): Disable interaction.\n        inverted (Optional[bool]): Invert direction.\n        key (Optional[str]): Explicit element key.\n        label_always_on (Optional[bool]): Always show labels above thumbs.\n        marks (Optional[list[RLOption]]): Marks along the slider.\n        max_range (Optional[float]): Max distance between thumbs.\n        max_value (Optional[float]): Maximum value.\n        min_value (Optional[float]): Minimum value.\n        on_change (Optional[Callable[[tuple[float, float]], None]]): Change handler.\n        precision (Optional[int]): Decimal precision.\n        step (Optional[float]): Step size.\n        value (Optional[tuple[float, float]]): Current value.\n        kwargs: Additional props to set.\n\n    Returns:\n        tuple[float, float]: Current range values.\n    \"\"\"\n    return cast(\n        tuple[float, float],\n        self._x_input(\n            \"rangeslider\",\n            key or self._new_widget_id(\"rangeslider\", label),\n            color=color,\n            disabled=disabled,\n            inverted=inverted,\n            label=label,\n            labelAlwaysOn=label_always_on,\n            marks=marks,\n            max=max_value,\n            maxRange=max_range,\n            min=min_value,\n            on_change=on_change,\n            precision=precision,\n            step=step,\n            value=value,\n            **kwargs,\n        ),\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.rating","title":"<code>rating(key, *, color=None, count=None, fractions=None, on_change=None, read_only=None, size=None, parser=float, value=None, **kwargs)</code>","text":"<p>Star (or icon) rating input.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Explicit element key.</p> required <code>color</code> <code>Optional[str]</code> <p>Accent color.</p> <code>None</code> <code>count</code> <code>Optional[int]</code> <p>Number of icons.</p> <code>None</code> <code>fractions</code> <code>Optional[int]</code> <p>Fractional steps per icon.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[int], None]]</code> <p>Change handler.</p> <code>None</code> <code>read_only</code> <code>Optional[bool]</code> <p>Read-only state.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>parser</code> <code>Callable[[Any], Union[float, int]]</code> <p>Parser for the returned value.</p> <code>float</code> <code>value</code> <code>Optional[int]</code> <p>Current value.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Current value parsed by the provided parser.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def rating(\n    self,\n    key: str,\n    *,\n    color: Optional[str] = None,\n    count: Optional[int] = None,\n    fractions: Optional[int] = None,\n    on_change: Optional[Callable[[int], None]] = None,\n    read_only: Optional[bool] = None,\n    size: Optional[str] = None,\n    parser: Callable[[Any], Union[float, int]] = float,\n    value: Optional[int] = None,\n    **kwargs: Any,\n) -&gt; float:\n    \"\"\"\n    Star (or icon) rating input.\n\n    Args:\n        key (str): Explicit element key.\n        color (Optional[str]): Accent color.\n        count (Optional[int]): Number of icons.\n        fractions (Optional[int]): Fractional steps per icon.\n        on_change (Optional[Callable[[int], None]]): Change handler.\n        read_only (Optional[bool]): Read-only state.\n        size (Optional[str]): Control size.\n        parser (Callable[[Any], Union[float, int]]): Parser for the returned value.\n        value (Optional[int]): Current value.\n        kwargs: Additional props to set.\n\n    Returns:\n        float: Current value parsed by the provided parser.\n    \"\"\"\n    return parser(\n        self._x_input(\n            \"rating\",\n            key,\n            color=color,\n            count=count,\n            fractions=fractions,\n            on_change=on_change,\n            readOnly=read_only,\n            size=size,\n            value=value,\n            **kwargs,\n        )\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.scatter_chart","title":"<code>scatter_chart(data, data_key, *, grid_axis=None, grid_color=None, grid_props=None, labels=None, legend_props=None, orientation=None, point_labels=None, reference_lines=None, right_y_axis_label=None, right_y_axis_props=None, scatter_chart_props=None, scatter_props=None, stroke_dasharray=None, text_color=None, tick_line=None, tooltip_animation_duration=None, tooltip_props=None, unit=None, value_formatter=None, with_legend=None, with_right_y_axis=None, with_tooltip=None, with_x_axis=None, with_y_axis=None, x_axis_label=None, x_axis_props=None, y_axis_label=None, y_axis_props=None, key=None, **kwargs)</code>","text":"<p>Scatter chart for visualizing correlation between two variables.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list</code> <p>Dataset.</p> required <code>data_key</code> <code>dict[str, str]</code> <p>Mapping for x/y keys.</p> required <code>grid_axis</code> <code>Optional[str]</code> <p>Grid axis.</p> <code>None</code> <code>grid_color</code> <code>Optional[str]</code> <p>Grid color.</p> <code>None</code> <code>grid_props</code> <code>Optional[dict[str, Any]]</code> <p>Grid props.</p> <code>None</code> <code>labels</code> <code>Optional[dict[str, str]]</code> <p>Axis labels.</p> <code>None</code> <code>legend_props</code> <code>Optional[dict[str, Any]]</code> <p>Legend props.</p> <code>None</code> <code>orientation</code> <code>Optional[str]</code> <p>Orientation.</p> <code>None</code> <code>point_labels</code> <code>Optional[str]</code> <p>Point labels key.</p> <code>None</code> <code>reference_lines</code> <code>Optional[list[dict[str, Any]]]</code> <p>Reference lines.</p> <code>None</code> <code>right_y_axis_label</code> <code>Optional[str]</code> <p>Secondary Y axis label.</p> <code>None</code> <code>right_y_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>Secondary Y axis props.</p> <code>None</code> <code>scatter_chart_props</code> <code>Optional[dict[str, Any]]</code> <p>Chart container props.</p> <code>None</code> <code>scatter_props</code> <code>Optional[dict[str, Any]]</code> <p>Scatter props.</p> <code>None</code> <code>stroke_dasharray</code> <code>Optional[Union[str, int]]</code> <p>Stroke dash pattern.</p> <code>None</code> <code>text_color</code> <code>Optional[str]</code> <p>Text color.</p> <code>None</code> <code>tick_line</code> <code>Optional[str]</code> <p>Tick line display.</p> <code>None</code> <code>tooltip_animation_duration</code> <code>Optional[int]</code> <p>Tooltip animation duration.</p> <code>None</code> <code>tooltip_props</code> <code>Optional[dict[str, Any]]</code> <p>Tooltip props.</p> <code>None</code> <code>unit</code> <code>Optional[dict[str, str]]</code> <p>Axis units.</p> <code>None</code> <code>value_formatter</code> <code>Optional[Any]</code> <p>Value formatter.</p> <code>None</code> <code>with_legend</code> <code>Optional[bool]</code> <p>Show legend.</p> <code>None</code> <code>with_right_y_axis</code> <code>Optional[bool]</code> <p>Enable right Y axis.</p> <code>None</code> <code>with_tooltip</code> <code>Optional[bool]</code> <p>Show tooltip.</p> <code>None</code> <code>with_x_axis</code> <code>Optional[bool]</code> <p>Show X axis.</p> <code>None</code> <code>with_y_axis</code> <code>Optional[bool]</code> <p>Show Y axis.</p> <code>None</code> <code>x_axis_label</code> <code>Optional[str]</code> <p>X axis label.</p> <code>None</code> <code>x_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>X axis props.</p> <code>None</code> <code>y_axis_label</code> <code>Optional[str]</code> <p>Y axis label.</p> <code>None</code> <code>y_axis_props</code> <code>Optional[dict[str, Any]]</code> <p>Y axis props.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the scatter chart element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def scatter_chart(\n    self,\n    data: list,\n    data_key: dict[str, str],\n    *,\n    grid_axis: Optional[str] = None,\n    grid_color: Optional[str] = None,\n    grid_props: Optional[dict[str, Any]] = None,\n    labels: Optional[dict[str, str]] = None,\n    legend_props: Optional[dict[str, Any]] = None,\n    orientation: Optional[str] = None,\n    point_labels: Optional[str] = None,\n    reference_lines: Optional[list[dict[str, Any]]] = None,\n    right_y_axis_label: Optional[str] = None,\n    right_y_axis_props: Optional[dict[str, Any]] = None,\n    scatter_chart_props: Optional[dict[str, Any]] = None,\n    scatter_props: Optional[dict[str, Any]] = None,\n    stroke_dasharray: Optional[Union[str, int]] = None,\n    text_color: Optional[str] = None,\n    tick_line: Optional[str] = None,\n    tooltip_animation_duration: Optional[int] = None,\n    tooltip_props: Optional[dict[str, Any]] = None,\n    unit: Optional[dict[str, str]] = None,\n    value_formatter: Optional[Any] = None,\n    with_legend: Optional[bool] = None,\n    with_right_y_axis: Optional[bool] = None,\n    with_tooltip: Optional[bool] = None,\n    with_x_axis: Optional[bool] = None,\n    with_y_axis: Optional[bool] = None,\n    x_axis_label: Optional[str] = None,\n    x_axis_props: Optional[dict[str, Any]] = None,\n    y_axis_label: Optional[str] = None,\n    y_axis_props: Optional[dict[str, Any]] = None,\n    key: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Scatter chart for visualizing correlation between two variables.\n\n    Args:\n        data (list): Dataset.\n        data_key (dict[str, str]): Mapping for x/y keys.\n        grid_axis (Optional[str]): Grid axis.\n        grid_color (Optional[str]): Grid color.\n        grid_props (Optional[dict[str, Any]]): Grid props.\n        labels (Optional[dict[str, str]]): Axis labels.\n        legend_props (Optional[dict[str, Any]]): Legend props.\n        orientation (Optional[str]): Orientation.\n        point_labels (Optional[str]): Point labels key.\n        reference_lines (Optional[list[dict[str, Any]]]): Reference lines.\n        right_y_axis_label (Optional[str]): Secondary Y axis label.\n        right_y_axis_props (Optional[dict[str, Any]]): Secondary Y axis props.\n        scatter_chart_props (Optional[dict[str, Any]]): Chart container props.\n        scatter_props (Optional[dict[str, Any]]): Scatter props.\n        stroke_dasharray (Optional[Union[str, int]]): Stroke dash pattern.\n        text_color (Optional[str]): Text color.\n        tick_line (Optional[str]): Tick line display.\n        tooltip_animation_duration (Optional[int]): Tooltip animation duration.\n        tooltip_props (Optional[dict[str, Any]]): Tooltip props.\n        unit (Optional[dict[str, str]]): Axis units.\n        value_formatter (Optional[Any]): Value formatter.\n        with_legend (Optional[bool]): Show legend.\n        with_right_y_axis (Optional[bool]): Enable right Y axis.\n        with_tooltip (Optional[bool]): Show tooltip.\n        with_x_axis (Optional[bool]): Show X axis.\n        with_y_axis (Optional[bool]): Show Y axis.\n        x_axis_label (Optional[str]): X axis label.\n        x_axis_props (Optional[dict[str, Any]]): X axis props.\n        y_axis_label (Optional[str]): Y axis label.\n        y_axis_props (Optional[dict[str, Any]]): Y axis props.\n        key (Optional[str]): Explicit element key.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the scatter chart element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"scatterchart\",\n        key=key or self._new_text_id(\"scatterchart\"),\n        props={\n            \"data\": data,\n            \"dataKey\": data_key,\n            \"gridAxis\": grid_axis,\n            \"gridColor\": grid_color,\n            \"gridProps\": grid_props,\n            \"labels\": labels,\n            \"legendProps\": legend_props,\n            \"orientation\": orientation,\n            \"pointLabels\": point_labels,\n            \"referenceLines\": reference_lines,\n            \"rightYAxisLabel\": right_y_axis_label,\n            \"rightYAxisProps\": right_y_axis_props,\n            \"scatterChartProps\": scatter_chart_props,\n            \"scatterProps\": scatter_props,\n            \"strokeDasharray\": stroke_dasharray,\n            \"textColor\": text_color,\n            \"tickLine\": tick_line,\n            \"tooltipAnimationDuration\": tooltip_animation_duration,\n            \"tooltipProps\": tooltip_props,\n            \"unit\": unit,\n            \"valueFormatter\": value_formatter,\n            \"withLegend\": with_legend,\n            \"withRightYAxis\": with_right_y_axis,\n            \"withTooltip\": with_tooltip,\n            \"withXAxis\": with_x_axis,\n            \"withYAxis\": with_y_axis,\n            \"xAxisLabel\": x_axis_label,\n            \"xAxisProps\": x_axis_props,\n            \"yAxisLabel\": y_axis_label,\n            \"yAxisProps\": y_axis_props,\n            **kwargs,\n        },\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.scroll_area","title":"<code>scroll_area(*, key=None, offset_scrollbars=None, overscroll_behavior=None, scroll_hide_delay=None, scrollbar_size=None, scrollbars=None, type=None, viewport_props=None, **kwargs)</code>","text":"<p>Scrollable area with configurable scrollbars and behavior.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>offset_scrollbars</code> <code>Optional[Union[bool, Literal[\"x\", \"y\", \"present\"]]</code> <p>Offset scrollbars from content.</p> <code>None</code> <code>overscroll_behavior</code> <code>Optional[str]</code> <p>CSS overscroll behavior.</p> <code>None</code> <code>scroll_hide_delay</code> <code>Optional[int]</code> <p>Delay before hiding scrollbars.</p> <code>None</code> <code>scrollbar_size</code> <code>Optional[Union[str, int]]</code> <p>Scrollbar size.</p> <code>None</code> <code>scrollbars</code> <code>Optional[Union[bool, Literal[\"x\", \"y\", \"xy\"]]</code> <p>Which axes show scrollbars.</p> <code>None</code> <code>type</code> <code>Optional[Literal['auto', 'scroll', 'always', 'hover', 'never']]</code> <p>Scrollbar visibility policy.</p> <code>None</code> <code>viewport_props</code> <code>Optional[dict[str, Any]]</code> <p>Viewport element props.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the scroll area.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def scroll_area(\n    self,\n    *,\n    key: Optional[str] = None,\n    offset_scrollbars: Optional[Union[bool, Literal[\"x\", \"y\", \"present\"]]] = None,\n    overscroll_behavior: Optional[str] = None,\n    scroll_hide_delay: Optional[int] = None,\n    scrollbar_size: Optional[Union[str, int]] = None,\n    scrollbars: Optional[Union[bool, Literal[\"x\", \"y\", \"xy\"]]] = None,\n    type: Optional[Literal[\"auto\", \"scroll\", \"always\", \"hover\", \"never\"]] = None,  # noqa: A002\n    viewport_props: Optional[dict[str, Any]] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Scrollable area with configurable scrollbars and behavior.\n\n    Args:\n        key (Optional[str]): Explicit element key.\n        offset_scrollbars (Optional[Union[bool, Literal[\"x\", \"y\", \"present\"]]): Offset scrollbars from content.\n        overscroll_behavior (Optional[str]): CSS overscroll behavior.\n        scroll_hide_delay (Optional[int]): Delay before hiding scrollbars.\n        scrollbar_size (Optional[Union[str, int]]): Scrollbar size.\n        scrollbars (Optional[Union[bool, Literal[\"x\", \"y\", \"xy\"]]): Which axes show scrollbars.\n        type (Optional[Literal[\"auto\", \"scroll\", \"always\", \"hover\", \"never\"]]): Scrollbar visibility policy.\n        viewport_props (Optional[dict[str, Any]]): Viewport element props.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the scroll area.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"scrollarea\",\n        key=key or self._new_text_id(\"scrollarea\"),\n        props={\n            \"offsetScrollbars\": offset_scrollbars,\n            \"overscrollBehavior\": overscroll_behavior,\n            \"scrollHideDelay\": scroll_hide_delay,\n            \"scrollbarSize\": scrollbar_size,\n            \"scrollbars\": scrollbars,\n            \"type\": type,\n            \"viewportProps\": viewport_props,\n            **kwargs,\n        },\n        virtual=True,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.segmented_control","title":"<code>segmented_control(key, options, *, auto_contrast=None, color=None, disabled=None, format_func=None, full_width=None, on_change=None, orientation=None, radius=None, read_only=None, size=None, transition_duration=None, value=None, with_items_borders=None, **kwargs)</code>","text":"<p>Segmented control for single selection among options.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Explicit element key.</p> required <code>options</code> <code>list[Union[RLOption, str]]</code> <p>Available options.</p> required <code>auto_contrast</code> <code>Optional[bool]</code> <p>Improve contrast automatically.</p> <code>None</code> <code>color</code> <code>Optional[str]</code> <p>Accent color.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable interaction.</p> <code>None</code> <code>format_func</code> <code>Optional[Callable[[Any], str]]</code> <p>Map option value to label.</p> <code>None</code> <code>full_width</code> <code>Optional[bool]</code> <p>Make control take full width.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[str], None]]</code> <p>Change handler.</p> <code>None</code> <code>orientation</code> <code>Optional[Literal['horizontal', 'vertical']]</code> <p>Orientation.</p> <code>None</code> <code>radius</code> <code>Optional[str]</code> <p>Corner radius.</p> <code>None</code> <code>read_only</code> <code>Optional[bool]</code> <p>Read-only state.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>transition_duration</code> <code>Optional[int]</code> <p>Selection animation duration.</p> <code>None</code> <code>value</code> <code>Optional[str]</code> <p>Selected value.</p> <code>None</code> <code>with_items_borders</code> <code>Optional[bool]</code> <p>Show borders between items.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Selected value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def segmented_control(\n    self,\n    key: str,\n    options: list[Union[RLOption, str]],\n    *,\n    auto_contrast: Optional[bool] = None,\n    color: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    format_func: Optional[Callable[[Any], str]] = None,\n    full_width: Optional[bool] = None,\n    on_change: Optional[Callable[[str], None]] = None,\n    orientation: Optional[Literal[\"horizontal\", \"vertical\"]] = None,\n    radius: Optional[str] = None,\n    read_only: Optional[bool] = None,\n    size: Optional[str] = None,\n    transition_duration: Optional[int] = None,\n    value: Optional[str] = None,\n    with_items_borders: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; str:\n    \"\"\"\n    Segmented control for single selection among options.\n\n    Args:\n        key (str): Explicit element key.\n        options (list[Union[RLOption, str]]): Available options.\n        auto_contrast (Optional[bool]): Improve contrast automatically.\n        color (Optional[str]): Accent color.\n        disabled (Optional[bool]): Disable interaction.\n        format_func (Optional[Callable[[Any], str]]): Map option value to label.\n        full_width (Optional[bool]): Make control take full width.\n        on_change (Optional[Callable[[str], None]]): Change handler.\n        orientation (Optional[Literal[\"horizontal\", \"vertical\"]]): Orientation.\n        radius (Optional[str]): Corner radius.\n        read_only (Optional[bool]): Read-only state.\n        size (Optional[str]): Control size.\n        transition_duration (Optional[int]): Selection animation duration.\n        value (Optional[str]): Selected value.\n        with_items_borders (Optional[bool]): Show borders between items.\n        kwargs: Additional props to set.\n\n    Returns:\n        str: Selected value.\n    \"\"\"\n    value = self._x_radio_select(\n        \"segmentedcontrol\",\n        key,\n        autoContrast=auto_contrast,\n        color=color,\n        disabled=disabled,\n        format_func=format_func,\n        fullWidth=full_width,\n        on_change=on_change,\n        options=options,  # type: ignore[arg-type]\n        options_attr=\"data\",\n        orientation=orientation,\n        radius=radius,\n        readOnly=read_only,\n        size=size,\n        transitionDuration=transition_duration,\n        value=value,\n        withItemsBorders=with_items_borders,\n        **kwargs,\n    )\n    if value is None and options and len(options) &gt; 0:\n        return options[0][\"value\"] if isinstance(options[0], dict) else options[0]\n    return value\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.select","title":"<code>select(label, options, *, allow_deselect=None, auto_select_on_blur=None, check_icon_position=None, chevron_color=None, clearable=None, combobox_props=None, default_dropdown_opened=None, default_search_value=None, description=None, error=None, format_func=None, hidden_input_props=None, input_size=None, input_wrapper_order=None, key=None, label_props=None, left_section=None, left_section_props=None, left_section_width=None, limit=None, max_dropdown_height=None, nothing_found_message=None, on_change=None, pointer=None, radius=None, required=None, scroll_area_props=None, right_section=None, right_section_props=None, right_section_width=None, size=None, value=None, with_asterisk=None, with_error_styles=None, with_scroll_area=None, **kwargs)</code>","text":"<p>Single-select input with search and advanced features.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>options</code> <code>list[Union[RLOption, str]]</code> <p>Available options.</p> required <code>allow_deselect</code> <code>Optional[bool]</code> <p>Allow clearing the selection.</p> <code>None</code> <code>auto_select_on_blur</code> <code>Optional[bool]</code> <p>Auto select highlighted option on blur.</p> <code>None</code> <code>check_icon_position</code> <code>Optional[Literal['left', 'right']]</code> <p>Check icon position.</p> <code>None</code> <code>chevron_color</code> <code>Optional[str]</code> <p>Chevron color.</p> <code>None</code> <code>clearable</code> <code>Optional[bool]</code> <p>Enable clear button.</p> <code>None</code> <code>combobox_props</code> <code>Optional[dict[str, Any]]</code> <p>Combobox props.</p> <code>None</code> <code>default_dropdown_opened</code> <code>Optional[bool]</code> <p>Open dropdown by default.</p> <code>None</code> <code>default_search_value</code> <code>Optional[str]</code> <p>Initial search value.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>format_func</code> <code>Optional[Callable[[Any], str]]</code> <p>Map option value to label.</p> <code>None</code> <code>hidden_input_props</code> <code>Optional[dict[str, Any]]</code> <p>Hidden input props.</p> <code>None</code> <code>input_size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>input_wrapper_order</code> <code>Optional[list[str]]</code> <p>Order of input wrapper parts.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>label_props</code> <code>Optional[dict[str, Any]]</code> <p>Label props.</p> <code>None</code> <code>left_section</code> <code>Optional[RouteLitElement]</code> <p>Left adornment.</p> <code>None</code> <code>left_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Left adornment props.</p> <code>None</code> <code>left_section_width</code> <code>Optional[str]</code> <p>Left adornment width.</p> <code>None</code> <code>limit</code> <code>Optional[int]</code> <p>Max number of options shown.</p> <code>None</code> <code>max_dropdown_height</code> <code>Optional[Union[str, int]]</code> <p>Max dropdown height.</p> <code>None</code> <code>nothing_found_message</code> <code>Optional[str]</code> <p>Message when search returns no results.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[Any], None]]</code> <p>Change handler.</p> <code>None</code> <code>pointer</code> <code>Optional[bool]</code> <p>Use pointer cursor.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Corner radius.</p> <code>None</code> <code>required</code> <code>Optional[bool]</code> <p>Mark as required.</p> <code>None</code> <code>scroll_area_props</code> <code>Optional[dict[str, Any]]</code> <p>Scroll area props.</p> <code>None</code> <code>right_section</code> <code>Optional[RouteLitElement]</code> <p>Right adornment.</p> <code>None</code> <code>right_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Right adornment props.</p> <code>None</code> <code>right_section_width</code> <code>Optional[str]</code> <p>Right adornment width.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>value</code> <code>Optional[Any]</code> <p>Current value.</p> <code>None</code> <code>with_asterisk</code> <code>Optional[bool]</code> <p>Show required asterisk.</p> <code>None</code> <code>with_error_styles</code> <code>Optional[bool]</code> <p>Apply error styles.</p> <code>None</code> <code>with_scroll_area</code> <code>Optional[bool]</code> <p>Wrap dropdown with scroll area.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Selected value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def select(  # type: ignore[override]\n    self,\n    label: str,\n    options: list[Union[RLOption, str]],\n    *,\n    allow_deselect: Optional[bool] = None,\n    auto_select_on_blur: Optional[bool] = None,\n    check_icon_position: Optional[Literal[\"left\", \"right\"]] = None,\n    chevron_color: Optional[str] = None,\n    clearable: Optional[bool] = None,\n    combobox_props: Optional[dict[str, Any]] = None,\n    default_dropdown_opened: Optional[bool] = None,\n    default_search_value: Optional[str] = None,\n    description: Optional[str] = None,\n    error: Optional[str] = None,\n    format_func: Optional[Callable[[Any], str]] = None,\n    hidden_input_props: Optional[dict[str, Any]] = None,\n    input_size: Optional[str] = None,\n    input_wrapper_order: Optional[list[str]] = None,\n    key: Optional[str] = None,\n    label_props: Optional[dict[str, Any]] = None,\n    left_section: Optional[RouteLitElement] = None,\n    left_section_props: Optional[dict[str, Any]] = None,\n    left_section_width: Optional[str] = None,\n    limit: Optional[int] = None,\n    max_dropdown_height: Optional[Union[str, int]] = None,\n    nothing_found_message: Optional[str] = None,\n    on_change: Optional[Callable[[Any], None]] = None,\n    pointer: Optional[bool] = None,\n    radius: Optional[Union[str, int]] = None,\n    required: Optional[bool] = None,\n    scroll_area_props: Optional[dict[str, Any]] = None,\n    right_section: Optional[RouteLitElement] = None,\n    right_section_props: Optional[dict[str, Any]] = None,\n    right_section_width: Optional[str] = None,\n    size: Optional[str] = None,\n    value: Optional[Any] = None,\n    with_asterisk: Optional[bool] = None,\n    with_error_styles: Optional[bool] = None,\n    with_scroll_area: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; Any:\n    \"\"\"\n    Single-select input with search and advanced features.\n\n    Args:\n        label (str): Field label.\n        options (list[Union[RLOption, str]]): Available options.\n        allow_deselect (Optional[bool]): Allow clearing the selection.\n        auto_select_on_blur (Optional[bool]): Auto select highlighted option on blur.\n        check_icon_position (Optional[Literal[\"left\", \"right\"]]): Check icon position.\n        chevron_color (Optional[str]): Chevron color.\n        clearable (Optional[bool]): Enable clear button.\n        combobox_props (Optional[dict[str, Any]]): Combobox props.\n        default_dropdown_opened (Optional[bool]): Open dropdown by default.\n        default_search_value (Optional[str]): Initial search value.\n        description (Optional[str]): Helper text under the label.\n        error (Optional[str]): Error message.\n        format_func (Optional[Callable[[Any], str]]): Map option value to label.\n        hidden_input_props (Optional[dict[str, Any]]): Hidden input props.\n        input_size (Optional[str]): Control size.\n        input_wrapper_order (Optional[list[str]]): Order of input wrapper parts.\n        key (Optional[str]): Explicit element key.\n        label_props (Optional[dict[str, Any]]): Label props.\n        left_section (Optional[RouteLitElement]): Left adornment.\n        left_section_props (Optional[dict[str, Any]]): Left adornment props.\n        left_section_width (Optional[str]): Left adornment width.\n        limit (Optional[int]): Max number of options shown.\n        max_dropdown_height (Optional[Union[str, int]]): Max dropdown height.\n        nothing_found_message (Optional[str]): Message when search returns no results.\n        on_change (Optional[Callable[[Any], None]]): Change handler.\n        pointer (Optional[bool]): Use pointer cursor.\n        radius (Optional[Union[str, int]]): Corner radius.\n        required (Optional[bool]): Mark as required.\n        scroll_area_props (Optional[dict[str, Any]]): Scroll area props.\n        right_section (Optional[RouteLitElement]): Right adornment.\n        right_section_props (Optional[dict[str, Any]]): Right adornment props.\n        right_section_width (Optional[str]): Right adornment width.\n        size (Optional[str]): Control size.\n        value (Optional[Any]): Current value.\n        with_asterisk (Optional[bool]): Show required asterisk.\n        with_error_styles (Optional[bool]): Apply error styles.\n        with_scroll_area (Optional[bool]): Wrap dropdown with scroll area.\n        kwargs: Additional props to set.\n\n    Returns:\n        Any: Selected value.\n    \"\"\"\n    return self._x_radio_select(\n        \"select\",\n        key or self._new_widget_id(\"select\", label),\n        options=options,  # type: ignore[arg-type]\n        options_attr=\"data\",\n        value=value,\n        on_change=on_change,\n        format_func=format_func,\n        label=label,\n        allowDeselect=allow_deselect,\n        autoSelectOnBlur=auto_select_on_blur,\n        checkIconPosition=check_icon_position,\n        chevronColor=chevron_color,\n        clearable=clearable,\n        comboboxProps=combobox_props,\n        defaultDropdownOpened=default_dropdown_opened,\n        defaultSearchValue=default_search_value,\n        description=description,\n        error=error,\n        hiddenInputProps=hidden_input_props,\n        inputSize=input_size,\n        inputWrapperOrder=input_wrapper_order,\n        labelProps=label_props,\n        leftSection=left_section,\n        leftSectionProps=left_section_props,\n        leftSectionWidth=left_section_width,\n        limit=limit,\n        maxDropdownHeight=max_dropdown_height,\n        nothingFoundMessage=nothing_found_message,\n        pointer=pointer,\n        radius=radius,\n        rightSection=right_section,\n        rightSectionProps=right_section_props,\n        rightSectionWidth=right_section_width,\n        required=required,\n        scrollAreaProps=scroll_area_props,\n        size=size,\n        withAsterisk=with_asterisk,\n        withErrorStyles=with_error_styles,\n        withScrollArea=with_scroll_area,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.set_app_shell_props","title":"<code>set_app_shell_props(title=None, logo=None, navbar_props=None, **kwargs)</code>","text":"<p>Set the app shell props.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>Optional[str]</code> <p>The title of the app shell.</p> <code>None</code> <code>logo</code> <code>Optional[str]</code> <p>The logo of the app shell.</p> <code>None</code> <code>navbar_props</code> <code>Optional[dict[str, Any]]</code> <p>The props of the navbar.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def set_app_shell_props(\n    self,\n    title: Optional[str] = None,\n    logo: Optional[str] = None,\n    navbar_props: Optional[dict[str, Any]] = None,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"\n    Set the app shell props.\n\n    Args:\n        title (Optional[str]): The title of the app shell.\n        logo (Optional[str]): The logo of the app shell.\n        navbar_props (Optional[dict[str, Any]]): The props of the navbar.\n        kwargs: Additional props to set.\n    \"\"\"\n    self._app_shell.root_element.props.update(kwargs)\n    self._app_shell.root_element.props[\"title\"] = title\n    self._app_shell.root_element.props[\"logo\"] = logo\n    self._app_shell.root_element.props[\"navbarProps\"] = navbar_props\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.set_provider_props","title":"<code>set_provider_props(theme, **kwargs)</code>","text":"<p>Set the provider props.</p> <p>Parameters:</p> Name Type Description Default <code>theme</code> <code>dict[str, Any]</code> <p>The theme to set.</p> required <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def set_provider_props(self, theme: dict[str, Any], **kwargs: Any) -&gt; None:\n    \"\"\"\n    Set the provider props.\n\n    Args:\n        theme (dict[str, Any]): The theme to set.\n        kwargs: Additional props to set.\n    \"\"\"\n    self._root.root_element.props.update(kwargs)\n    self._root.root_element.props[\"theme\"] = theme\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.simple_grid","title":"<code>simple_grid(*, cols=None, key=None, query_type=None, spacing=None, vertical_spacing=None, **kwargs)</code>","text":"<p>Create a simplified responsive grid.</p> <p>Parameters:</p> Name Type Description Default <code>cols</code> <code>Optional[int]</code> <p>Number of columns.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>query_type</code> <code>Optional[Literal['media', 'container']]</code> <p>Responsive query type.</p> <code>None</code> <code>spacing</code> <code>Optional[str]</code> <p>Spacing between items.</p> <code>None</code> <code>vertical_spacing</code> <code>Optional[str]</code> <p>Vertical spacing between rows.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the simple grid element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def simple_grid(\n    self,\n    *,\n    cols: Optional[int] = None,\n    key: Optional[str] = None,\n    query_type: Optional[Literal[\"media\", \"container\"]] = None,\n    spacing: Optional[str] = None,\n    vertical_spacing: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Create a simplified responsive grid.\n\n    Args:\n        cols (Optional[int]): Number of columns.\n        key (Optional[str]): Explicit element key.\n        query_type (Optional[Literal[\"media\", \"container\"]]): Responsive query type.\n        spacing (Optional[str]): Spacing between items.\n        vertical_spacing (Optional[str]): Vertical spacing between rows.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the simple grid element.\n    \"\"\"\n    new_element = self._create_element(\n        key=key or self._new_text_id(\"simplegrid\"),\n        name=\"simplegrid\",\n        props={\n            \"cols\": cols,\n            \"spacing\": spacing,\n            \"type\": query_type,\n            \"verticalSpacing\": vertical_spacing,\n            **kwargs,\n        },\n    )\n    return cast(RLBuilder, self._build_nested_builder(new_element))\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.slider","title":"<code>slider(label, *, disabled=None, inverted=None, key=None, label_always_on=None, marks=None, max_value=None, min_value=None, on_change=None, precision=None, restrict_to_marks=None, show_label_on_hover=None, size=None, step=None, parser=float, thumb_label=None, thumb_size=None, value=None, **kwargs)</code>","text":"<p>Single-value slider input.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>disabled</code> <code>Optional[bool]</code> <p>Disable interaction.</p> <code>None</code> <code>inverted</code> <code>Optional[bool]</code> <p>Invert direction.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>label_always_on</code> <code>Optional[bool]</code> <p>Always show label above thumb.</p> <code>None</code> <code>marks</code> <code>Optional[list[RLOption]]</code> <p>Marks along the slider.</p> <code>None</code> <code>max_value</code> <code>Optional[float]</code> <p>Maximum value.</p> <code>None</code> <code>min_value</code> <code>Optional[float]</code> <p>Minimum value.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[float], None]]</code> <p>Change handler.</p> <code>None</code> <code>precision</code> <code>Optional[int]</code> <p>Decimal precision.</p> <code>None</code> <code>restrict_to_marks</code> <code>Optional[bool]</code> <p>Only allow values at marks.</p> <code>None</code> <code>show_label_on_hover</code> <code>Optional[bool]</code> <p>Show label when hovering.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>step</code> <code>Optional[float]</code> <p>Step size.</p> <code>None</code> <code>parser</code> <code>Callable[[Any], Union[float, int]]</code> <p>Parser for the returned value.</p> <code>float</code> <code>thumb_label</code> <code>Optional[str]</code> <p>Label template for thumb.</p> <code>None</code> <code>thumb_size</code> <code>Optional[str]</code> <p>Thumb size.</p> <code>None</code> <code>value</code> <code>Optional[float]</code> <p>Current value.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Union[float, int]</code> <p>Union[float, int]: Current value parsed by the provided parser.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def slider(\n    self,\n    label: str,\n    *,\n    disabled: Optional[bool] = None,\n    inverted: Optional[bool] = None,\n    key: Optional[str] = None,\n    label_always_on: Optional[bool] = None,\n    marks: Optional[list[RLOption]] = None,\n    max_value: Optional[float] = None,\n    min_value: Optional[float] = None,\n    on_change: Optional[Callable[[float], None]] = None,\n    precision: Optional[int] = None,\n    restrict_to_marks: Optional[bool] = None,\n    show_label_on_hover: Optional[bool] = None,\n    size: Optional[str] = None,\n    step: Optional[float] = None,\n    parser: Callable[[Any], Union[float, int]] = float,\n    thumb_label: Optional[str] = None,\n    thumb_size: Optional[str] = None,\n    value: Optional[float] = None,\n    **kwargs: Any,\n) -&gt; Union[float, int]:\n    \"\"\"\n    Single-value slider input.\n\n    Args:\n        label (str): Field label.\n        disabled (Optional[bool]): Disable interaction.\n        inverted (Optional[bool]): Invert direction.\n        key (Optional[str]): Explicit element key.\n        label_always_on (Optional[bool]): Always show label above thumb.\n        marks (Optional[list[RLOption]]): Marks along the slider.\n        max_value (Optional[float]): Maximum value.\n        min_value (Optional[float]): Minimum value.\n        on_change (Optional[Callable[[float], None]]): Change handler.\n        precision (Optional[int]): Decimal precision.\n        restrict_to_marks (Optional[bool]): Only allow values at marks.\n        show_label_on_hover (Optional[bool]): Show label when hovering.\n        size (Optional[str]): Control size.\n        step (Optional[float]): Step size.\n        parser (Callable[[Any], Union[float, int]]): Parser for the returned value.\n        thumb_label (Optional[str]): Label template for thumb.\n        thumb_size (Optional[str]): Thumb size.\n        value (Optional[float]): Current value.\n        kwargs: Additional props to set.\n\n    Returns:\n        Union[float, int]: Current value parsed by the provided parser.\n    \"\"\"\n    return parser(\n        self._x_input(\n            \"slider\",\n            key or self._new_widget_id(\"slider\", label),\n            disabled=disabled,\n            inverted=inverted,\n            label=label,\n            labelAlwaysOn=label_always_on,\n            marks=marks,\n            max=max_value,\n            min=min_value,\n            on_change=on_change,\n            precision=precision,\n            restrictToMarks=restrict_to_marks,\n            showLabelOnHover=show_label_on_hover,\n            size=size,\n            step=step,\n            thumbLabel=thumb_label,\n            thumbSize=thumb_size,\n            value=value,\n            **kwargs,\n        )\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.space","title":"<code>space(*, h=None, key=None, v=None, **kwargs)</code>","text":"<p>Insert vertical and/or horizontal space.</p> <p>Parameters:</p> Name Type Description Default <code>h</code> <code>Optional[str]</code> <p>Horizontal space size (e.g., CSS length).</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>v</code> <code>Optional[str]</code> <p>Vertical space size (e.g., CSS length).</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def space(\n    self,\n    *,\n    h: Optional[str] = None,\n    key: Optional[str] = None,\n    v: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"\n    Insert vertical and/or horizontal space.\n\n    Args:\n        h (Optional[str]): Horizontal space size (e.g., CSS length).\n        key (Optional[str]): Explicit element key.\n        v (Optional[str]): Vertical space size (e.g., CSS length).\n        kwargs: Additional props to set.\n    \"\"\"\n    self._create_element(\n        key=key or self._new_text_id(\"space\"),\n        name=\"space\",\n        props={\"h\": h, \"v\": v, **kwargs},\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.sparkline_chart","title":"<code>sparkline_chart(data, *, area_props=None, color=None, connect_nulls=None, curve_type=None, fill_opacity=None, key=None, stroke_width=None, trend_colors=None, with_gradient=None, **kwargs)</code>","text":"<p>Compact sparkline chart for trends.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list[Union[int, float, None]]</code> <p>Dataset.</p> required <code>area_props</code> <code>Optional[dict[str, Any]]</code> <p>Area props.</p> <code>None</code> <code>color</code> <code>Optional[str]</code> <p>Line/area color.</p> <code>None</code> <code>connect_nulls</code> <code>Optional[bool]</code> <p>Connect across null values.</p> <code>None</code> <code>curve_type</code> <code>Optional[str]</code> <p>Curve interpolation type.</p> <code>None</code> <code>fill_opacity</code> <code>Optional[float]</code> <p>Area fill opacity.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>stroke_width</code> <code>Optional[int]</code> <p>Line width.</p> <code>None</code> <code>trend_colors</code> <code>Optional[dict[str, Any]]</code> <p>Trend color overrides.</p> <code>None</code> <code>with_gradient</code> <code>Optional[bool]</code> <p>Fill with gradient.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the sparkline element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def sparkline_chart(\n    self,\n    data: list[Union[int, float, None]],\n    *,\n    area_props: Optional[dict[str, Any]] = None,\n    color: Optional[str] = None,\n    connect_nulls: Optional[bool] = None,\n    curve_type: Optional[str] = None,\n    fill_opacity: Optional[float] = None,\n    key: Optional[str] = None,\n    stroke_width: Optional[int] = None,\n    trend_colors: Optional[dict[str, Any]] = None,\n    with_gradient: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Compact sparkline chart for trends.\n\n    Args:\n        data (list[Union[int, float, None]]): Dataset.\n        area_props (Optional[dict[str, Any]]): Area props.\n        color (Optional[str]): Line/area color.\n        connect_nulls (Optional[bool]): Connect across null values.\n        curve_type (Optional[str]): Curve interpolation type.\n        fill_opacity (Optional[float]): Area fill opacity.\n        key (Optional[str]): Explicit element key.\n        stroke_width (Optional[int]): Line width.\n        trend_colors (Optional[dict[str, Any]]): Trend color overrides.\n        with_gradient (Optional[bool]): Fill with gradient.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the sparkline element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"sparkline\",\n        key=key or self._new_text_id(\"sparkline\"),\n        props={\n            \"data\": data,\n            \"areaProps\": area_props,\n            \"color\": color,\n            \"connectNulls\": connect_nulls,\n            \"curveType\": curve_type,\n            \"fillOpacity\": fill_opacity,\n            \"strokeWidth\": stroke_width,\n            \"trendColors\": trend_colors,\n            \"withGradient\": with_gradient,\n            **kwargs,\n        },\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.spoiler","title":"<code>spoiler(show_label='Show more', hide_label='Show less', *, key=None, initial_state=False, max_height=None, **kwargs)</code>","text":"<p>Collapsible content with show/hide controls.</p> <p>Parameters:</p> Name Type Description Default <code>show_label</code> <code>str</code> <p>Label when collapsed.</p> <code>'Show more'</code> <code>hide_label</code> <code>str</code> <p>Label when expanded.</p> <code>'Show less'</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>initial_state</code> <code>bool</code> <p>Initial expanded state.</p> <code>False</code> <code>max_height</code> <code>Optional[int]</code> <p>Max visible height when collapsed.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the spoiler element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def spoiler(\n    self,\n    show_label: str = \"Show more\",\n    hide_label: str = \"Show less\",\n    *,\n    key: Optional[str] = None,\n    initial_state: bool = False,\n    max_height: Optional[int] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Collapsible content with show/hide controls.\n\n    Args:\n        show_label (str): Label when collapsed.\n        hide_label (str): Label when expanded.\n        key (Optional[str]): Explicit element key.\n        initial_state (bool): Initial expanded state.\n        max_height (Optional[int]): Max visible height when collapsed.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the spoiler element.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"spoiler\",\n        key=key or self._new_text_id(\"spoiler\"),\n        props={\n            \"showLabel\": show_label,\n            \"hideLabel\": hide_label,\n            \"initialState\": initial_state,\n            \"maxHeight\": max_height,\n            **kwargs,\n        },\n        virtual=True,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.stack","title":"<code>stack(*, align=None, gap=None, justify=None, key=None, **kwargs)</code>","text":"<p>Stack children vertically with spacing and alignment.</p> <p>Parameters:</p> Name Type Description Default <code>align</code> <code>Optional[str]</code> <p>Horizontal alignment of items.</p> <code>None</code> <code>gap</code> <code>Optional[str]</code> <p>Spacing between items.</p> <code>None</code> <code>justify</code> <code>Optional[str]</code> <p>Vertical alignment of items.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the stack element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def stack(\n    self,\n    *,\n    align: Optional[str] = None,\n    gap: Optional[str] = None,\n    justify: Optional[str] = None,\n    key: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Stack children vertically with spacing and alignment.\n\n    Args:\n        align (Optional[str]): Horizontal alignment of items.\n        gap (Optional[str]): Spacing between items.\n        justify (Optional[str]): Vertical alignment of items.\n        key (Optional[str]): Explicit element key.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the stack element.\n    \"\"\"\n    new_element = self._create_element(\n        key=key or self._new_text_id(\"stack\"),\n        name=\"stack\",\n        props={\n            \"align\": align,\n            \"gap\": gap,\n            \"justify\": justify,\n            **kwargs,\n        },\n    )\n    return cast(RLBuilder, self._build_nested_builder(new_element))\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.switch","title":"<code>switch(label, *, checked=False, color=None, description=None, disabled=None, error=None, key=None, label_position=None, on_change=None, radius=None, size=None, thumb_icon=None, with_thumb_indicator=None, **kwargs)</code>","text":"<p>Boolean input rendered as a switch.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>checked</code> <code>bool</code> <p>Initial checked state.</p> <code>False</code> <code>color</code> <code>Optional[str]</code> <p>Accent color.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable interaction.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>label_position</code> <code>Optional[Literal['left', 'right']]</code> <p>Label position.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[bool], None]]</code> <p>Change handler.</p> <code>None</code> <code>radius</code> <code>Optional[str]</code> <p>Corner radius.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>thumb_icon</code> <code>Optional[RouteLitElement]</code> <p>Icon inside the thumb.</p> <code>None</code> <code>with_thumb_indicator</code> <code>Optional[bool]</code> <p>Show indicator inside the thumb.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Current value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def switch(\n    self,\n    label: str,\n    *,\n    checked: bool = False,\n    color: Optional[str] = None,\n    description: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    error: Optional[str] = None,\n    key: Optional[str] = None,\n    label_position: Optional[Literal[\"left\", \"right\"]] = None,\n    on_change: Optional[Callable[[bool], None]] = None,\n    radius: Optional[str] = None,\n    size: Optional[str] = None,\n    thumb_icon: Optional[RouteLitElement] = None,\n    with_thumb_indicator: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; bool:\n    \"\"\"\n    Boolean input rendered as a switch.\n\n    Args:\n        label (str): Field label.\n        checked (bool): Initial checked state.\n        color (Optional[str]): Accent color.\n        description (Optional[str]): Helper text under the label.\n        disabled (Optional[bool]): Disable interaction.\n        error (Optional[str]): Error message.\n        key (Optional[str]): Explicit element key.\n        label_position (Optional[Literal[\"left\", \"right\"]]): Label position.\n        on_change (Optional[Callable[[bool], None]]): Change handler.\n        radius (Optional[str]): Corner radius.\n        size (Optional[str]): Control size.\n        thumb_icon (Optional[RouteLitElement]): Icon inside the thumb.\n        with_thumb_indicator (Optional[bool]): Show indicator inside the thumb.\n        kwargs: Additional props to set.\n\n    Returns:\n        bool: Current value.\n    \"\"\"\n    return self._x_checkbox(\n        \"switch\",\n        key or self._new_widget_id(\"switch\", label),\n        checked=checked,\n        color=color,\n        description=description,\n        disabled=disabled,\n        error=error,\n        label=label,\n        labelPosition=label_position,\n        on_change=on_change,\n        radius=radius,\n        size=size,\n        thumbIcon=thumb_icon,\n        withThumbIndicator=with_thumb_indicator,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.switch_group","title":"<code>switch_group(label, options, *, description=None, error=None, format_func=None, group_props=None, key=None, on_change=None, read_only=None, required=None, size=None, value=None, with_asterisk=None, **kwargs)</code>","text":"<p>Multiple selection using a group of switches.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Group label.</p> required <code>options</code> <code>list[Union[RLOption, str]]</code> <p>Available options.</p> required <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>format_func</code> <code>Optional[Callable[[Any], str]]</code> <p>Map option value to label.</p> <code>None</code> <code>group_props</code> <code>Optional[dict[str, Any]]</code> <p>Extra props for the group container.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[list[str]], None]]</code> <p>Change handler.</p> <code>None</code> <code>read_only</code> <code>Optional[bool]</code> <p>Read-only state.</p> <code>None</code> <code>required</code> <code>Optional[bool]</code> <p>Mark as required.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>value</code> <code>Optional[list[str]]</code> <p>Selected values.</p> <code>None</code> <code>with_asterisk</code> <code>Optional[bool]</code> <p>Show required asterisk.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: Selected values.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def switch_group(\n    self,\n    label: str,\n    options: list[Union[RLOption, str]],\n    *,\n    description: Optional[str] = None,\n    error: Optional[str] = None,\n    format_func: Optional[Callable[[Any], str]] = None,\n    group_props: Optional[dict[str, Any]] = None,\n    key: Optional[str] = None,\n    on_change: Optional[Callable[[list[str]], None]] = None,\n    read_only: Optional[bool] = None,\n    required: Optional[bool] = None,\n    size: Optional[str] = None,\n    value: Optional[list[str]] = None,\n    with_asterisk: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; list[str]:\n    \"\"\"\n    Multiple selection using a group of switches.\n\n    Args:\n        label (str): Group label.\n        options (list[Union[RLOption, str]]): Available options.\n        description (Optional[str]): Helper text under the label.\n        error (Optional[str]): Error message.\n        format_func (Optional[Callable[[Any], str]]): Map option value to label.\n        group_props (Optional[dict[str, Any]]): Extra props for the group container.\n        key (Optional[str]): Explicit element key.\n        on_change (Optional[Callable[[list[str]], None]]): Change handler.\n        read_only (Optional[bool]): Read-only state.\n        required (Optional[bool]): Mark as required.\n        size (Optional[str]): Control size.\n        value (Optional[list[str]]): Selected values.\n        with_asterisk (Optional[bool]): Show required asterisk.\n        kwargs: Additional props to set.\n\n    Returns:\n        list[str]: Selected values.\n    \"\"\"\n    return self._x_checkbox_group(\n        \"switchgroup\",\n        key or self._new_widget_id(\"switch-group\", label),\n        description=description,\n        error=error,\n        format_func=format_func,\n        groupProps=group_props,\n        label=label,\n        on_change=on_change,\n        options=options,  # type: ignore[arg-type]\n        readOnly=read_only,\n        required=required,\n        size=size,\n        value=value,\n        withAsterisk=with_asterisk,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.tab","title":"<code>tab(value, label=None, color=None, left_section=None, right_section=None, size=None, keep_mounted=None, **kwargs)</code>  <code>staticmethod</code>","text":"<p>Helper to create an <code>MTTab</code> configuration object. Used to describe the props for each tab in the <code>tabs</code> function.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>Tab value.</p> required <code>label</code> <code>Optional[str]</code> <p>Tab label.</p> <code>None</code> <code>color</code> <code>Optional[str]</code> <p>Accent color.</p> <code>None</code> <code>left_section</code> <code>Optional[RouteLitElement]</code> <p>Left adornment for tab.</p> <code>None</code> <code>right_section</code> <code>Optional[RouteLitElement]</code> <p>Right adornment for tab.</p> <code>None</code> <code>size</code> <code>Optional[Union[str, int]]</code> <p>Size for the tab.</p> <code>None</code> <code>keep_mounted</code> <code>Optional[bool]</code> <p>Keep panel mounted when inactive.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>MTTab</code> <code>MTTab</code> <p>Tab configuration object.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>@staticmethod\ndef tab(\n    value: str,\n    label: Optional[str] = None,\n    color: Optional[str] = None,\n    left_section: Optional[RouteLitElement] = None,\n    right_section: Optional[RouteLitElement] = None,\n    size: Optional[Union[str, int]] = None,\n    keep_mounted: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; MTTab:\n    \"\"\"\n    Helper to create an `MTTab` configuration object.\n    Used to describe the props for each tab in the `tabs` function.\n\n    Args:\n        value (str): Tab value.\n        label (Optional[str]): Tab label.\n        color (Optional[str]): Accent color.\n        left_section (Optional[RouteLitElement]): Left adornment for tab.\n        right_section (Optional[RouteLitElement]): Right adornment for tab.\n        size (Optional[Union[str, int]]): Size for the tab.\n        keep_mounted (Optional[bool]): Keep panel mounted when inactive.\n        kwargs: Additional props to set.\n\n    Returns:\n        MTTab: Tab configuration object.\n    \"\"\"\n    return MTTab(  # type: ignore[no-any-return]\n        value=value,\n        label=label,\n        color=color,\n        left_section=left_section,\n        right_section=right_section,\n        size=size,\n        keep_mounted=keep_mounted,\n        **kwargs,  # type: ignore[typeddict-item]\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.table","title":"<code>table(key=None, *, body=None, caption=None, head=None, foot=None, sticky_header=None, **kwargs)</code>","text":"<p>Data table with optional head, body, foot and caption.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>body</code> <code>Optional[list[list[Any]]]</code> <p>Table body rows.</p> <code>None</code> <code>caption</code> <code>Optional[str]</code> <p>Table caption.</p> <code>None</code> <code>head</code> <code>Optional[list[str]]</code> <p>Header row cells.</p> <code>None</code> <code>foot</code> <code>Optional[list[str]]</code> <p>Footer row cells.</p> <code>None</code> <code>sticky_header</code> <code>Optional[bool]</code> <p>Make header sticky when scrolling.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the table element.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def table(\n    self,\n    key: Optional[str] = None,\n    *,\n    body: Optional[list[list[Any]]] = None,\n    caption: Optional[str] = None,\n    head: Optional[list[str]] = None,\n    foot: Optional[list[str]] = None,\n    sticky_header: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Data table with optional head, body, foot and caption.\n\n    Args:\n        key (Optional[str]): Explicit element key.\n        body (Optional[list[list[Any]]]): Table body rows.\n        caption (Optional[str]): Table caption.\n        head (Optional[list[str]]): Header row cells.\n        foot (Optional[list[str]]): Footer row cells.\n        sticky_header (Optional[bool]): Make header sticky when scrolling.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the table element.\n    \"\"\"\n    data = {\n        \"body\": body,\n        \"caption\": caption,\n        \"head\": head,\n        \"foot\": foot,\n    }\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"table\",\n        key=key or self._new_text_id(\"table\"),\n        props={\"data\": data, \"stickyHeader\": sticky_header, **kwargs},\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.table_body","title":"<code>table_body(key=None, **kwargs)</code>","text":"<p>Create a table body section.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the body section.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def table_body(\n    self,\n    key: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Create a table body section.\n\n    Args:\n        key (Optional[str]): Explicit element key.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the body section.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"tablebody\",\n        key=key or self._new_text_id(\"tablebody\"),\n        props=kwargs,\n        virtual=True,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.table_caption","title":"<code>table_caption(text, *, key=None, **kwargs)</code>","text":"<p>Add a caption to the current table.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Caption text.</p> required <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def table_caption(\n    self,\n    text: str,\n    *,\n    key: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"\n    Add a caption to the current table.\n\n    Args:\n        text (str): Caption text.\n        key (Optional[str]): Explicit element key.\n        kwargs: Additional props to set.\n    \"\"\"\n    self._create_element(\n        name=\"tablecaption\",\n        key=key or self._new_text_id(\"tablecaption\"),\n        props={\"children\": text, **kwargs},\n        virtual=True,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.table_cell","title":"<code>table_cell(text=None, *, key=None, **kwargs)</code>","text":"<p>Create a table cell.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>Optional[str]</code> <p>Cell text content.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the cell.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def table_cell(\n    self,\n    text: Optional[str] = None,\n    *,\n    key: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Create a table cell.\n\n    Args:\n        text (Optional[str]): Cell text content.\n        key (Optional[str]): Explicit element key.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the cell.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"tablecell\",\n        key=key or self._new_text_id(\"tablecell\"),\n        props={\"children\": text, **kwargs},\n        virtual=True,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.table_foot","title":"<code>table_foot(key=None, **kwargs)</code>","text":"<p>Create a table foot section.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the foot section.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def table_foot(\n    self,\n    key: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Create a table foot section.\n\n    Args:\n        key (Optional[str]): Explicit element key.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the foot section.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"tablefoot\",\n        key=key or self._new_text_id(\"tablefoot\"),\n        props=kwargs,\n        virtual=True,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.table_head","title":"<code>table_head(key=None, **kwargs)</code>","text":"<p>Create a table head section.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the head section.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def table_head(\n    self,\n    key: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Create a table head section.\n\n    Args:\n        key (Optional[str]): Explicit element key.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the head section.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"tablehead\",\n        key=key or self._new_text_id(\"tablehead\"),\n        props=kwargs,\n        virtual=True,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.table_header","title":"<code>table_header(text=None, *, key=None, **kwargs)</code>","text":"<p>Create a table header cell.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>Optional[str]</code> <p>Header text content.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the header cell.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def table_header(\n    self,\n    text: Optional[str] = None,\n    *,\n    key: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Create a table header cell.\n\n    Args:\n        text (Optional[str]): Header text content.\n        key (Optional[str]): Explicit element key.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the header cell.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"tableheader\",\n        key=key or self._new_text_id(\"tableheader\"),\n        props={\"children\": text, **kwargs},\n        virtual=True,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.table_row","title":"<code>table_row(key=None, **kwargs)</code>","text":"<p>Create a table row.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the row.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def table_row(\n    self,\n    key: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Create a table row.\n\n    Args:\n        key (Optional[str]): Explicit element key.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the row.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"tablerow\",\n        key=key or self._new_text_id(\"tablerow\"),\n        props=kwargs,\n        virtual=True,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.table_scroll_container","title":"<code>table_scroll_container(*, key=None, max_height=None, max_width=None, min_height=None, min_width=None, **kwargs)</code>","text":"<p>Scrollable container for large tables.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>max_height</code> <code>Optional[Union[str, int]]</code> <p>Maximum height.</p> <code>None</code> <code>max_width</code> <code>Optional[Union[str, int]]</code> <p>Maximum width.</p> <code>None</code> <code>min_height</code> <code>Optional[Union[str, int]]</code> <p>Minimum height.</p> <code>None</code> <code>min_width</code> <code>Optional[Union[str, int]]</code> <p>Minimum width.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RLBuilder</code> <code>RLBuilder</code> <p>A nested builder scoped to the scroll container.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def table_scroll_container(\n    self,\n    *,\n    key: Optional[str] = None,\n    max_height: Optional[Union[str, int]] = None,\n    max_width: Optional[Union[str, int]] = None,\n    min_height: Optional[Union[str, int]] = None,\n    min_width: Optional[Union[str, int]] = None,\n    **kwargs: Any,\n) -&gt; \"RLBuilder\":\n    \"\"\"\n    Scrollable container for large tables.\n\n    Args:\n        key (Optional[str]): Explicit element key.\n        max_height (Optional[Union[str, int]]): Maximum height.\n        max_width (Optional[Union[str, int]]): Maximum width.\n        min_height (Optional[Union[str, int]]): Minimum height.\n        min_width (Optional[Union[str, int]]): Minimum width.\n        kwargs: Additional props to set.\n\n    Returns:\n        RLBuilder: A nested builder scoped to the scroll container.\n    \"\"\"\n    return self._create_builder_element(  # type: ignore[return-value]\n        name=\"tablescrollcontainer\",\n        key=key or self._new_text_id(\"tablescrollcontainer\"),\n        props={\n            \"maxHeight\": max_height,\n            \"maxWidth\": max_width,\n            \"minHeight\": min_height,\n            \"minWidth\": min_width,\n            **kwargs,\n        },\n        virtual=True,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.tabs","title":"<code>tabs(tabs, *, activate_tab_with_keyboard=None, allow_tab_deactivation=None, auto_contrast=None, color=None, default_value=None, inverted=None, keep_mounted=None, key=None, loop=None, orientation=None, placement=None, radius=None, tablist_grow=None, tablist_justify=None, variant=None, **kwargs)</code>","text":"<p>Tabs component with a tablist and corresponding tab panels.</p> <p>Parameters:</p> Name Type Description Default <code>tabs</code> <code>list[Union[MTTab, str]]</code> <p>Tabs configuration or values.</p> required <code>activate_tab_with_keyboard</code> <code>Optional[bool]</code> <p>Enable keyboard navigation.</p> <code>None</code> <code>allow_tab_deactivation</code> <code>Optional[bool]</code> <p>Allow deactivating active tab.</p> <code>None</code> <code>auto_contrast</code> <code>Optional[bool]</code> <p>Improve contrast automatically.</p> <code>None</code> <code>color</code> <code>Optional[str]</code> <p>Accent color.</p> <code>None</code> <code>default_value</code> <code>Optional[str]</code> <p>Initially selected tab value.</p> <code>None</code> <code>inverted</code> <code>Optional[bool]</code> <p>Invert styles.</p> <code>None</code> <code>keep_mounted</code> <code>Optional[bool]</code> <p>Keep inactive panels mounted.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>loop</code> <code>Optional[bool]</code> <p>Loop focus within tabs.</p> <code>None</code> <code>orientation</code> <code>Optional[Literal['horizontal', 'vertical']]</code> <p>Orientation.</p> <code>None</code> <code>placement</code> <code>Optional[Literal['left', 'right']]</code> <p>Placement of tabs relative to panels.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Corner radius.</p> <code>None</code> <code>tablist_grow</code> <code>Optional[bool]</code> <p>Make tablist items grow.</p> <code>None</code> <code>tablist_justify</code> <code>Optional[str]</code> <p>Tablist justification.</p> <code>None</code> <code>variant</code> <code>Optional[Literal['default', 'outline', 'pills']]</code> <p>Visual variant.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>tuple[RLBuilder, ...]</code> <p>tuple[RLBuilder, ...]: Panel builders, one per tab value.</p> <p>Example:</p> <pre><code>tab1, tab2 = ui.tabs(\n    tabs=[\n        ui.tab(value=\"tab1\", label=\"Tab 1\"),\n        \"Tab 2\",\n    ],\n    default_value=\"tab1\",\n    variant=\"outline\",\n)\nwith tab1:\n    ui.text(\"Tab body 1\")\nwith tab2:\n    ui.text(\"Tab body 2\")\n</code></pre> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def tabs(\n    self,\n    tabs: list[Union[MTTab, str]],\n    *,\n    activate_tab_with_keyboard: Optional[bool] = None,\n    allow_tab_deactivation: Optional[bool] = None,\n    auto_contrast: Optional[bool] = None,\n    color: Optional[str] = None,\n    default_value: Optional[str] = None,\n    inverted: Optional[bool] = None,\n    keep_mounted: Optional[bool] = None,\n    key: Optional[str] = None,\n    loop: Optional[bool] = None,\n    orientation: Optional[Literal[\"horizontal\", \"vertical\"]] = None,\n    placement: Optional[Literal[\"left\", \"right\"]] = None,\n    radius: Optional[Union[str, int]] = None,\n    tablist_grow: Optional[bool] = None,\n    tablist_justify: Optional[str] = None,\n    variant: Optional[Literal[\"default\", \"outline\", \"pills\"]] = None,\n    **kwargs: Any,\n) -&gt; tuple[\"RLBuilder\", ...]:\n    \"\"\"\n    Tabs component with a tablist and corresponding tab panels.\n\n    Args:\n        tabs (list[Union[MTTab, str]]): Tabs configuration or values.\n        activate_tab_with_keyboard (Optional[bool]): Enable keyboard navigation.\n        allow_tab_deactivation (Optional[bool]): Allow deactivating active tab.\n        auto_contrast (Optional[bool]): Improve contrast automatically.\n        color (Optional[str]): Accent color.\n        default_value (Optional[str]): Initially selected tab value.\n        inverted (Optional[bool]): Invert styles.\n        keep_mounted (Optional[bool]): Keep inactive panels mounted.\n        key (Optional[str]): Explicit element key.\n        loop (Optional[bool]): Loop focus within tabs.\n        orientation (Optional[Literal[\"horizontal\", \"vertical\"]]): Orientation.\n        placement (Optional[Literal[\"left\", \"right\"]]): Placement of tabs relative to panels.\n        radius (Optional[Union[str, int]]): Corner radius.\n        tablist_grow (Optional[bool]): Make tablist items grow.\n        tablist_justify (Optional[str]): Tablist justification.\n        variant (Optional[Literal[\"default\", \"outline\", \"pills\"]]): Visual variant.\n        kwargs: Additional props to set.\n\n    Returns:\n        tuple[RLBuilder, ...]: Panel builders, one per tab value.\n\n    Example:\n    ```python\n    tab1, tab2 = ui.tabs(\n        tabs=[\n            ui.tab(value=\"tab1\", label=\"Tab 1\"),\n            \"Tab 2\",\n        ],\n        default_value=\"tab1\",\n        variant=\"outline\",\n    )\n    with tab1:\n        ui.text(\"Tab body 1\")\n    with tab2:\n        ui.text(\"Tab body 2\")\n    ```\n    \"\"\"\n    default_value = default_value or (\n        (tabs[0][\"value\"] if isinstance(tabs[0], dict) else tabs[0]) if tabs and len(tabs) &gt; 0 else None\n    )\n    tabs_root = self._build_nested_builder(\n        self._create_element(\n            key=key or self._new_text_id(\"tabs\"),\n            name=\"tabs\",\n            props={\n                \"activateTabWithKeyboard\": activate_tab_with_keyboard,\n                \"allowTabDeactivation\": allow_tab_deactivation,\n                \"autoContrast\": auto_contrast,\n                \"color\": color,\n                \"defaultValue\": default_value,\n                \"inverted\": inverted,\n                \"keepMounted\": keep_mounted,\n                \"loop\": loop,\n                \"orientation\": orientation,\n                \"placement\": placement,\n                \"radius\": radius,\n                \"variant\": variant,\n                **kwargs,\n            },\n            virtual=True,\n        )\n    )\n    tabs_panels = []\n    with tabs_root:\n        tab_list = self._build_nested_builder(\n            self._create_element(\n                key=self._new_text_id(\"tablist\"),\n                name=\"tablist\",\n                props={\n                    \"grow\": tablist_grow,\n                    \"justify\": tablist_justify,\n                },\n                virtual=True,\n            )\n        )\n        for tab in tabs:\n            tab_props = {\"value\": tab} if isinstance(tab, str) else tab\n            keep_mounted_val = tab_props.pop(\"keep_mounted\", None)\n            keep_mounted = keep_mounted_val if isinstance(keep_mounted_val, (bool, type(None))) else None\n            left_section = tab_props.pop(\"left_section\", None)\n            right_section = tab_props.pop(\"right_section\", None)\n            label = tab_props.pop(\"label\", None)\n            tab_props[\"children\"] = label or tab_props[\"value\"]\n            if left_section:\n                tab_props[\"leftSection\"] = left_section  # type: ignore[assignment, arg-type]\n            if right_section:\n                tab_props[\"rightSection\"] = right_section  # type: ignore[assignment, arg-type]\n            with tab_list:\n                self._create_element(\n                    key=self._new_text_id(\"tab\"),\n                    name=\"tab\",\n                    props=tab_props,  # type: ignore[arg-type]\n                    virtual=True,\n                )\n            tabs_panels.append(\n                self._build_nested_builder(\n                    self._create_element(\n                        key=self._new_text_id(\"tabpanel\"),\n                        name=\"tabpanel\",\n                        props={\n                            \"value\": tab_props[\"value\"],\n                            \"keepMounted\": keep_mounted,\n                        },\n                        virtual=True,\n                    )\n                )\n            )\n    return tuple(tabs_panels)  # type: ignore[arg-type]\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.tags_input","title":"<code>tags_input(label, data, *, accept_value_on_blur=None, allow_duplicates=None, clear_button_props=None, clearable=None, combobox_props=None, default_dropdown_opened=None, default_search_value=None, description=None, description_props=None, disabled=None, dropdown_opened=None, error=None, error_props=None, hidden_input_props=None, hidden_input_values_divider=None, input_size=None, input_wrapper_order=None, key=None, label_props=None, left_section=None, left_section_props=None, left_section_width=None, limit=None, max_dropdown_height=None, max_tags=None, on_change=None, pointer=None, radius=None, required=None, right_section=None, right_section_props=None, right_section_width=None, scroll_area_props=None, search_value=None, select_first_option_on_change=None, size=None, split_chars=None, value=None, with_asterisk=None, with_error_styles=None, with_scroll_area=None, **kwargs)</code>","text":"<p>Free-form tags input with autocomplete suggestions.</p> <p>Allows typing new tags and selecting from provided options. Supports grouping of options and various UI customizations.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>data</code> <code>list[Union[RLOption, GroupOption, str]]</code> <p>Available options and/or groups.</p> required <code>accept_value_on_blur</code> <code>Optional[bool]</code> <p>Add current value on blur.</p> <code>None</code> <code>allow_duplicates</code> <code>Optional[bool]</code> <p>Allow duplicate tags.</p> <code>None</code> <code>clear_button_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for the clear button.</p> <code>None</code> <code>clearable</code> <code>Optional[bool]</code> <p>Show clear button to remove all values.</p> <code>None</code> <code>combobox_props</code> <code>Optional[dict[str, Any]]</code> <p>Props passed to the underlying combobox.</p> <code>None</code> <code>default_dropdown_opened</code> <code>Optional[bool]</code> <p>Initial dropdown state.</p> <code>None</code> <code>default_search_value</code> <code>Optional[str]</code> <p>Initial search query.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>description_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for the description element.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable input interaction.</p> <code>None</code> <code>dropdown_opened</code> <code>Optional[bool]</code> <p>Controlled dropdown open state.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>error_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for the error element.</p> <code>None</code> <code>hidden_input_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for the hidden form input.</p> <code>None</code> <code>hidden_input_values_divider</code> <code>Optional[str]</code> <p>Divider for hidden input serialization.</p> <code>None</code> <code>input_size</code> <code>Optional[str]</code> <p>Input size variant.</p> <code>None</code> <code>input_wrapper_order</code> <code>Optional[list[str]]</code> <p>Order of input wrapper parts.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>label_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for the label element.</p> <code>None</code> <code>left_section</code> <code>Optional[RouteLitElement]</code> <p>Left section content.</p> <code>None</code> <code>left_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for the left section wrapper.</p> <code>None</code> <code>left_section_width</code> <code>Optional[str]</code> <p>Width of the left section.</p> <code>None</code> <code>limit</code> <code>Optional[int]</code> <p>Max number of items displayed in dropdown.</p> <code>None</code> <code>max_dropdown_height</code> <code>Optional[Union[str, int]]</code> <p>Max height of the dropdown.</p> <code>None</code> <code>max_tags</code> <code>Optional[int]</code> <p>Max number of tags that can be added.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[list[str]], None]]</code> <p>Change handler.</p> <code>None</code> <code>pointer</code> <code>Optional[bool]</code> <p>Show pointer cursor on hover.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Corner radius.</p> <code>None</code> <code>required</code> <code>Optional[bool]</code> <p>Mark field as required.</p> <code>None</code> <code>right_section</code> <code>Optional[str]</code> <p>Right section content.</p> <code>None</code> <code>right_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for the right section wrapper.</p> <code>None</code> <code>right_section_width</code> <code>Optional[str]</code> <p>Width of the right section.</p> <code>None</code> <code>scroll_area_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for dropdown scroll area.</p> <code>None</code> <code>search_value</code> <code>Optional[str]</code> <p>Controlled search query value.</p> <code>None</code> <code>select_first_option_on_change</code> <code>Optional[bool]</code> <p>Auto-select first option on change.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>split_chars</code> <code>Optional[list[str]]</code> <p>Characters that split input into tags.</p> <code>None</code> <code>value</code> <code>Optional[list[str]]</code> <p>Current value (list of tags).</p> <code>None</code> <code>with_asterisk</code> <code>Optional[bool]</code> <p>Show required asterisk.</p> <code>None</code> <code>with_error_styles</code> <code>Optional[bool]</code> <p>Apply error styles when error is set.</p> <code>None</code> <code>with_scroll_area</code> <code>Optional[bool]</code> <p>Wrap dropdown list in a scroll area.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: Current list of tags.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def tags_input(\n    self,\n    label: str,\n    data: list[Union[RLOption, GroupOption, str]],\n    *,\n    accept_value_on_blur: Optional[bool] = None,\n    allow_duplicates: Optional[bool] = None,\n    clear_button_props: Optional[dict[str, Any]] = None,\n    clearable: Optional[bool] = None,\n    combobox_props: Optional[dict[str, Any]] = None,\n    default_dropdown_opened: Optional[bool] = None,\n    default_search_value: Optional[str] = None,\n    description: Optional[str] = None,\n    description_props: Optional[dict[str, Any]] = None,\n    disabled: Optional[bool] = None,\n    dropdown_opened: Optional[bool] = None,\n    error: Optional[str] = None,\n    error_props: Optional[dict[str, Any]] = None,\n    hidden_input_props: Optional[dict[str, Any]] = None,\n    hidden_input_values_divider: Optional[str] = None,\n    input_size: Optional[str] = None,\n    input_wrapper_order: Optional[list[str]] = None,\n    key: Optional[str] = None,\n    label_props: Optional[dict[str, Any]] = None,\n    left_section: Optional[RouteLitElement] = None,\n    left_section_props: Optional[dict[str, Any]] = None,\n    left_section_width: Optional[str] = None,\n    limit: Optional[int] = None,\n    max_dropdown_height: Optional[Union[str, int]] = None,\n    max_tags: Optional[int] = None,\n    on_change: Optional[Callable[[list[str]], None]] = None,\n    pointer: Optional[bool] = None,\n    radius: Optional[Union[str, int]] = None,\n    required: Optional[bool] = None,\n    right_section: Optional[str] = None,\n    right_section_props: Optional[dict[str, Any]] = None,\n    right_section_width: Optional[str] = None,\n    scroll_area_props: Optional[dict[str, Any]] = None,\n    search_value: Optional[str] = None,\n    select_first_option_on_change: Optional[bool] = None,\n    size: Optional[str] = None,\n    split_chars: Optional[list[str]] = None,\n    value: Optional[list[str]] = None,\n    with_asterisk: Optional[bool] = None,\n    with_error_styles: Optional[bool] = None,\n    with_scroll_area: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; list[str]:\n    \"\"\"\n    Free-form tags input with autocomplete suggestions.\n\n    Allows typing new tags and selecting from provided options. Supports grouping\n    of options and various UI customizations.\n\n    Args:\n        label (str): Field label.\n        data (list[Union[RLOption, GroupOption, str]]): Available options and/or groups.\n        accept_value_on_blur (Optional[bool]): Add current value on blur.\n        allow_duplicates (Optional[bool]): Allow duplicate tags.\n        clear_button_props (Optional[dict[str, Any]]): Props for the clear button.\n        clearable (Optional[bool]): Show clear button to remove all values.\n        combobox_props (Optional[dict[str, Any]]): Props passed to the underlying combobox.\n        default_dropdown_opened (Optional[bool]): Initial dropdown state.\n        default_search_value (Optional[str]): Initial search query.\n        description (Optional[str]): Helper text under the label.\n        description_props (Optional[dict[str, Any]]): Props for the description element.\n        disabled (Optional[bool]): Disable input interaction.\n        dropdown_opened (Optional[bool]): Controlled dropdown open state.\n        error (Optional[str]): Error message.\n        error_props (Optional[dict[str, Any]]): Props for the error element.\n        hidden_input_props (Optional[dict[str, Any]]): Props for the hidden form input.\n        hidden_input_values_divider (Optional[str]): Divider for hidden input serialization.\n        input_size (Optional[str]): Input size variant.\n        input_wrapper_order (Optional[list[str]]): Order of input wrapper parts.\n        key (Optional[str]): Explicit element key.\n        label_props (Optional[dict[str, Any]]): Props for the label element.\n        left_section (Optional[RouteLitElement]): Left section content.\n        left_section_props (Optional[dict[str, Any]]): Props for the left section wrapper.\n        left_section_width (Optional[str]): Width of the left section.\n        limit (Optional[int]): Max number of items displayed in dropdown.\n        max_dropdown_height (Optional[Union[str, int]]): Max height of the dropdown.\n        max_tags (Optional[int]): Max number of tags that can be added.\n        on_change (Optional[Callable[[list[str]], None]]): Change handler.\n        pointer (Optional[bool]): Show pointer cursor on hover.\n        radius (Optional[Union[str, int]]): Corner radius.\n        required (Optional[bool]): Mark field as required.\n        right_section (Optional[str]): Right section content.\n        right_section_props (Optional[dict[str, Any]]): Props for the right section wrapper.\n        right_section_width (Optional[str]): Width of the right section.\n        scroll_area_props (Optional[dict[str, Any]]): Props for dropdown scroll area.\n        search_value (Optional[str]): Controlled search query value.\n        select_first_option_on_change (Optional[bool]): Auto-select first option on change.\n        size (Optional[str]): Control size.\n        split_chars (Optional[list[str]]): Characters that split input into tags.\n        value (Optional[list[str]]): Current value (list of tags).\n        with_asterisk (Optional[bool]): Show required asterisk.\n        with_error_styles (Optional[bool]): Apply error styles when error is set.\n        with_scroll_area (Optional[bool]): Wrap dropdown list in a scroll area.\n        kwargs: Additional props to set.\n\n    Returns:\n        list[str]: Current list of tags.\n    \"\"\"\n    return cast(\n        list[str],\n        self._x_checkbox_group(\n            \"tagsinput\",\n            key or self._new_widget_id(\"tagsinput\", label),\n            acceptValueOnBlur=accept_value_on_blur,\n            allowDuplicates=allow_duplicates,\n            clearButtonProps=clear_button_props,\n            clearable=clearable,\n            comboboxProps=combobox_props,\n            defaultDropdownOpened=default_dropdown_opened,\n            defaultSearchValue=default_search_value,\n            description=description,\n            descriptionProps=description_props,\n            disabled=disabled,\n            dropdownOpened=dropdown_opened,\n            error=error,\n            errorProps=error_props,\n            hiddenInputProps=hidden_input_props,\n            hiddenInputValuesDivider=hidden_input_values_divider,\n            inputSize=input_size,\n            inputWrapperOrder=input_wrapper_order,\n            label=label,\n            labelProps=label_props,\n            leftSection=left_section,\n            leftSectionProps=left_section_props,\n            leftSectionWidth=left_section_width,\n            limit=limit,\n            maxDropdownHeight=max_dropdown_height,\n            maxTags=max_tags,\n            on_change=on_change,\n            options=data,  # type: ignore[arg-type]\n            options_attr=\"data\",\n            pointer=pointer,\n            radius=radius,\n            required=required,\n            rightSection=right_section,\n            rightSectionProps=right_section_props,\n            rightSectionWidth=right_section_width,\n            scrollAreaProps=scroll_area_props,\n            searchValue=search_value,\n            selectFirstOptionOnChange=select_first_option_on_change,\n            size=size,\n            splitChars=split_chars,\n            value=value,\n            withAsterisk=with_asterisk,\n            withErrorStyles=with_error_styles,\n            withScrollArea=with_scroll_area,\n            **kwargs,\n        ),\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.text","title":"<code>text(text, *, key=None, **kwargs)</code>","text":"<p>Render plain text content.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text content.</p> required <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def text(  # type: ignore[override]\n    self,\n    text: str,\n    *,\n    key: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"\n    Render plain text content.\n\n    Args:\n        text (str): Text content.\n        key (Optional[str]): Explicit element key.\n        kwargs: Additional props to set.\n    \"\"\"\n    self._create_element(\n        name=\"text\",\n        key=key or self._new_text_id(\"text\"),\n        props={\"children\": text, **kwargs},\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.text_input","title":"<code>text_input(label, *, description=None, disabled=None, error=None, key=None, left_section=None, left_section_props=None, left_section_width=None, on_change=None, required=None, right_section=None, right_section_props=None, right_section_width=None, size=None, value=None, with_asterisk=None, **kwargs)</code>","text":"<p>Single-line text input.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable input interaction.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>left_section</code> <code>Optional[RouteLitElement]</code> <p>Left adornment.</p> <code>None</code> <code>left_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Left adornment props.</p> <code>None</code> <code>left_section_width</code> <code>Optional[str]</code> <p>Left adornment width.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[str], None]]</code> <p>Change handler.</p> <code>None</code> <code>required</code> <code>Optional[bool]</code> <p>Mark as required.</p> <code>None</code> <code>right_section</code> <code>Optional[RouteLitElement]</code> <p>Right adornment.</p> <code>None</code> <code>right_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Right adornment props.</p> <code>None</code> <code>right_section_width</code> <code>Optional[str]</code> <p>Right adornment width.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>value</code> <code>Optional[str]</code> <p>Current value.</p> <code>None</code> <code>with_asterisk</code> <code>Optional[bool]</code> <p>Show required asterisk.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Current value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def text_input(\n    self,\n    label: str,\n    *,\n    description: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    error: Optional[str] = None,\n    key: Optional[str] = None,\n    left_section: Optional[RouteLitElement] = None,\n    left_section_props: Optional[dict[str, Any]] = None,\n    left_section_width: Optional[str] = None,\n    on_change: Optional[Callable[[str], None]] = None,\n    required: Optional[bool] = None,\n    right_section: Optional[RouteLitElement] = None,\n    right_section_props: Optional[dict[str, Any]] = None,\n    right_section_width: Optional[str] = None,\n    size: Optional[str] = None,\n    value: Optional[str] = None,\n    with_asterisk: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; str:\n    \"\"\"\n    Single-line text input.\n\n    Args:\n        label (str): Field label.\n        description (Optional[str]): Helper text under the label.\n        disabled (Optional[bool]): Disable input interaction.\n        error (Optional[str]): Error message.\n        key (Optional[str]): Explicit element key.\n        left_section (Optional[RouteLitElement]): Left adornment.\n        left_section_props (Optional[dict[str, Any]]): Left adornment props.\n        left_section_width (Optional[str]): Left adornment width.\n        on_change (Optional[Callable[[str], None]]): Change handler.\n        required (Optional[bool]): Mark as required.\n        right_section (Optional[RouteLitElement]): Right adornment.\n        right_section_props (Optional[dict[str, Any]]): Right adornment props.\n        right_section_width (Optional[str]): Right adornment width.\n        size (Optional[str]): Control size.\n        value (Optional[str]): Current value.\n        with_asterisk (Optional[bool]): Show required asterisk.\n        kwargs: Additional props to set.\n\n    Returns:\n        str: Current value.\n    \"\"\"\n    return cast(\n        str,\n        self._x_input(\n            \"textinput\",\n            key or self._new_widget_id(\"textinput\", label),\n            description=description,\n            disabled=disabled,\n            error=error,\n            label=label,\n            leftSection=left_section,\n            leftSectionProps=left_section_props,\n            leftSectionWidth=left_section_width,\n            on_change=on_change,\n            required=required,\n            rightSection=right_section,\n            rightSectionProps=right_section_props,\n            rightSectionWidth=right_section_width,\n            size=size,\n            value=value,\n            withAsterisk=with_asterisk,\n            **kwargs,\n        ),\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.textarea","title":"<code>textarea(label, *, autosize=None, description=None, disabled=None, error=None, input_size=None, key=None, max_rows=None, min_rows=None, on_change=None, radius=None, required=None, resize=None, value=None, **kwargs)</code>","text":"<p>Multi-line text input.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>autosize</code> <code>Optional[bool]</code> <p>Grow/shrink to fit content.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>Helper text under the label.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disable interaction.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Error message.</p> <code>None</code> <code>input_size</code> <code>Optional[str]</code> <p>Control size.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>max_rows</code> <code>Optional[int]</code> <p>Maximum number of rows when autosizing.</p> <code>None</code> <code>min_rows</code> <code>Optional[int]</code> <p>Minimum number of rows when autosizing.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[str], None]]</code> <p>Change handler.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Corner radius.</p> <code>None</code> <code>required</code> <code>Optional[bool]</code> <p>Mark as required.</p> <code>None</code> <code>resize</code> <code>Optional[str]</code> <p>CSS resize behavior.</p> <code>None</code> <code>value</code> <code>Optional[str]</code> <p>Current value.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: Current value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def textarea(\n    self,\n    label: str,\n    *,\n    autosize: Optional[bool] = None,\n    description: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    error: Optional[str] = None,\n    input_size: Optional[str] = None,\n    key: Optional[str] = None,\n    max_rows: Optional[int] = None,\n    min_rows: Optional[int] = None,\n    on_change: Optional[Callable[[str], None]] = None,\n    radius: Optional[Union[str, int]] = None,\n    required: Optional[bool] = None,\n    resize: Optional[str] = None,\n    value: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; Optional[str]:\n    \"\"\"\n    Multi-line text input.\n\n    Args:\n        label (str): Field label.\n        autosize (Optional[bool]): Grow/shrink to fit content.\n        description (Optional[str]): Helper text under the label.\n        disabled (Optional[bool]): Disable interaction.\n        error (Optional[str]): Error message.\n        input_size (Optional[str]): Control size.\n        key (Optional[str]): Explicit element key.\n        max_rows (Optional[int]): Maximum number of rows when autosizing.\n        min_rows (Optional[int]): Minimum number of rows when autosizing.\n        on_change (Optional[Callable[[str], None]]): Change handler.\n        radius (Optional[Union[str, int]]): Corner radius.\n        required (Optional[bool]): Mark as required.\n        resize (Optional[str]): CSS resize behavior.\n        value (Optional[str]): Current value.\n        kwargs: Additional props to set.\n\n    Returns:\n        Optional[str]: Current value.\n    \"\"\"\n    return self._x_input(\n        \"textarea\",\n        key or self._new_widget_id(\"textarea\", label),\n        autosize=autosize,\n        description=description,\n        disabled=disabled,\n        error=error,\n        inputSize=input_size,\n        label=label,\n        maxRows=max_rows,\n        minRows=min_rows,\n        on_change=on_change,\n        radius=radius,\n        required=required,\n        resize=resize,\n        value=value,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.time_input","title":"<code>time_input(label, value=None, *, key=None, on_change=None, description=None, description_props=None, disabled=None, error=None, error_props=None, input_size=None, input_wrapper_order=None, label_props=None, left_section=None, left_section_pointer_events=None, left_section_props=None, left_section_width=None, max_time=None, min_time=None, pointer=None, radius=None, required=None, right_section=None, right_section_pointer_events=None, right_section_props=None, right_section_width=None, size=None, with_asterisk=None, with_error_styles=None, with_seconds=None, wrapper_props=None, **kwargs)</code>","text":"<p>Time input with support for parsing from string.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Field label.</p> required <code>value</code> <code>Optional[Union[time, str]]</code> <p>Current value.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[Any], None]]</code> <p>Change handler.</p> <code>None</code> <code>description</code> <code>Optional[Any]</code> <p>Contents of Input.Description component.</p> <code>None</code> <code>description_props</code> <code>Optional[dict[str, Any]]</code> <p>Props passed to Input.Description component.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Sets disabled attribute on input element.</p> <code>None</code> <code>error</code> <code>Optional[Any]</code> <p>Contents of Input.Error component.</p> <code>None</code> <code>error_props</code> <code>Optional[dict[str, Any]]</code> <p>Props passed to Input.Error component.</p> <code>None</code> <code>input_size</code> <code>Optional[str]</code> <p>Size attribute for input element.</p> <code>None</code> <code>input_wrapper_order</code> <code>Optional[list[str]]</code> <p>Controls order of elements.</p> <code>None</code> <code>label_props</code> <code>Optional[dict[str, Any]]</code> <p>Props passed to Input.Label component.</p> <code>None</code> <code>left_section</code> <code>Optional[Any]</code> <p>Content displayed on left side of input.</p> <code>None</code> <code>left_section_pointer_events</code> <code>Optional[str]</code> <p>Pointer events style for left section.</p> <code>None</code> <code>left_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for left section element.</p> <code>None</code> <code>left_section_width</code> <code>Optional[Union[str, int]]</code> <p>Width of left section.</p> <code>None</code> <code>max_time</code> <code>Optional[str]</code> <p>Maximum possible time value.</p> <code>None</code> <code>min_time</code> <code>Optional[str]</code> <p>Minimum possible time value.</p> <code>None</code> <code>pointer</code> <code>Optional[bool]</code> <p>Whether input should have pointer cursor.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Border radius value.</p> <code>None</code> <code>required</code> <code>Optional[bool]</code> <p>Whether input is required.</p> <code>None</code> <code>right_section</code> <code>Optional[Any]</code> <p>Content displayed on right side of input.</p> <code>None</code> <code>right_section_pointer_events</code> <code>Optional[str]</code> <p>Pointer events style for right section.</p> <code>None</code> <code>right_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for right section element.</p> <code>None</code> <code>right_section_width</code> <code>Optional[Union[str, int]]</code> <p>Width of right section.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Controls input height and padding.</p> <code>None</code> <code>with_asterisk</code> <code>Optional[bool]</code> <p>Whether to show required asterisk.</p> <code>None</code> <code>with_error_styles</code> <code>Optional[bool]</code> <p>Whether to show error styling.</p> <code>None</code> <code>with_seconds</code> <code>Optional[bool]</code> <p>Whether to show seconds input.</p> <code>None</code> <code>wrapper_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for root element.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Optional[time]</code> <p>Optional[datetime.time]: Current value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def time_input(\n    self,\n    label: str,\n    value: Optional[Union[datetime.time, str]] = None,\n    *,\n    key: Optional[str] = None,\n    on_change: Optional[Callable[[Any], None]] = None,\n    description: Optional[Any] = None,\n    description_props: Optional[dict[str, Any]] = None,\n    disabled: Optional[bool] = None,\n    error: Optional[Any] = None,\n    error_props: Optional[dict[str, Any]] = None,\n    input_size: Optional[str] = None,\n    input_wrapper_order: Optional[list[str]] = None,\n    label_props: Optional[dict[str, Any]] = None,\n    left_section: Optional[Any] = None,\n    left_section_pointer_events: Optional[str] = None,\n    left_section_props: Optional[dict[str, Any]] = None,\n    left_section_width: Optional[Union[str, int]] = None,\n    max_time: Optional[str] = None,\n    min_time: Optional[str] = None,\n    pointer: Optional[bool] = None,\n    radius: Optional[Union[str, int]] = None,\n    required: Optional[bool] = None,\n    right_section: Optional[Any] = None,\n    right_section_pointer_events: Optional[str] = None,\n    right_section_props: Optional[dict[str, Any]] = None,\n    right_section_width: Optional[Union[str, int]] = None,\n    size: Optional[str] = None,\n    with_asterisk: Optional[bool] = None,\n    with_error_styles: Optional[bool] = None,\n    with_seconds: Optional[bool] = None,\n    wrapper_props: Optional[dict[str, Any]] = None,\n    **kwargs: Any,\n) -&gt; Optional[datetime.time]:\n    \"\"\"\n    Time input with support for parsing from string.\n\n    Args:\n        label (str): Field label.\n        value (Optional[Union[datetime.time, str]]): Current value.\n        key (Optional[str]): Explicit element key.\n        on_change (Optional[Callable[[Any], None]]): Change handler.\n        description (Optional[Any]): Contents of Input.Description component.\n        description_props (Optional[dict[str, Any]]): Props passed to Input.Description component.\n        disabled (Optional[bool]): Sets disabled attribute on input element.\n        error (Optional[Any]): Contents of Input.Error component.\n        error_props (Optional[dict[str, Any]]): Props passed to Input.Error component.\n        input_size (Optional[str]): Size attribute for input element.\n        input_wrapper_order (Optional[list[str]]): Controls order of elements.\n        label_props (Optional[dict[str, Any]]): Props passed to Input.Label component.\n        left_section (Optional[Any]): Content displayed on left side of input.\n        left_section_pointer_events (Optional[str]): Pointer events style for left section.\n        left_section_props (Optional[dict[str, Any]]): Props for left section element.\n        left_section_width (Optional[Union[str, int]]): Width of left section.\n        max_time (Optional[str]): Maximum possible time value.\n        min_time (Optional[str]): Minimum possible time value.\n        pointer (Optional[bool]): Whether input should have pointer cursor.\n        radius (Optional[Union[str, int]]): Border radius value.\n        required (Optional[bool]): Whether input is required.\n        right_section (Optional[Any]): Content displayed on right side of input.\n        right_section_pointer_events (Optional[str]): Pointer events style for right section.\n        right_section_props (Optional[dict[str, Any]]): Props for right section element.\n        right_section_width (Optional[Union[str, int]]): Width of right section.\n        size (Optional[str]): Controls input height and padding.\n        with_asterisk (Optional[bool]): Whether to show required asterisk.\n        with_error_styles (Optional[bool]): Whether to show error styling.\n        with_seconds (Optional[bool]): Whether to show seconds input.\n        wrapper_props (Optional[dict[str, Any]]): Props for root element.\n        kwargs: Additional props to set.\n\n    Returns:\n        Optional[datetime.time]: Current value.\n    \"\"\"\n    return cast(\n        Optional[datetime.time],\n        self._x_input(\n            \"timeinput\",\n            key=key or self._new_widget_id(\"timeinput\", label),\n            label=label,\n            value=value,\n            description=description,\n            descriptionProps=description_props,\n            disabled=disabled,\n            error=error,\n            errorProps=error_props,\n            inputSize=input_size,\n            inputWrapperOrder=input_wrapper_order,\n            labelProps=label_props,\n            leftSection=left_section,\n            leftSectionPointerEvents=left_section_pointer_events,\n            leftSectionProps=left_section_props,\n            leftSectionWidth=left_section_width,\n            maxTime=max_time,\n            minTime=min_time,\n            pointer=pointer,\n            radius=radius,\n            required=required,\n            rightSection=right_section,\n            rightSectionPointerEvents=right_section_pointer_events,\n            rightSectionProps=right_section_props,\n            rightSectionWidth=right_section_width,\n            size=size,\n            withAsterisk=with_asterisk,\n            withErrorStyles=with_error_styles,\n            withSeconds=with_seconds,\n            wrapperProps=wrapper_props,\n            rl_format_func=self._format_time,\n            on_change=on_change,\n            **kwargs,\n        ),\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.time_picker","title":"<code>time_picker(label, value=None, *, key=None, on_change=None, am_pm_input_label=None, am_pm_labels=None, am_pm_select_props=None, clear_button_props=None, clearable=None, description=None, description_props=None, disabled=None, error=None, error_props=None, form=None, format=None, hidden_input_props=None, hours_input_label=None, hours_input_props=None, hours_step=None, input_size=None, input_wrapper_order=None, label_props=None, left_section=None, left_section_pointer_events=None, left_section_props=None, left_section_width=None, max=None, max_dropdown_content_height=None, min=None, minutes_input_label=None, minutes_input_props=None, minutes_step=None, name=None, pointer=None, popover_props=None, presets=None, radius=None, read_only=None, required=None, right_section=None, right_section_pointer_events=None, right_section_props=None, right_section_width=None, scroll_area_props=None, seconds_input_label=None, seconds_input_props=None, seconds_step=None, size=None, with_asterisk=None, with_dropdown=None, with_error_styles=None, with_seconds=None, wrapper_props=None, **kwargs)</code>","text":"<p>Time picker with support for parsing from string.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Label text.</p> required <code>value</code> <code>Optional[Union[time, str]]</code> <p>Current value.</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>Unique key for the widget.</p> <code>None</code> <code>on_change</code> <code>Optional[Callable[[Any], None]]</code> <p>Called when value changes.</p> <code>None</code> <code>am_pm_input_label</code> <code>Optional[str]</code> <p>aria-label of am/pm input.</p> <code>None</code> <code>am_pm_labels</code> <code>Optional[dict[str, str]]</code> <p>Labels used for am/pm values.</p> <code>None</code> <code>am_pm_select_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for am/pm select.</p> <code>None</code> <code>clear_button_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for clear button.</p> <code>None</code> <code>clearable</code> <code>Optional[bool]</code> <p>Whether clear button should be displayed.</p> <code>None</code> <code>description</code> <code>Optional[Any]</code> <p>Description content.</p> <code>None</code> <code>description_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for description.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Whether component is disabled.</p> <code>None</code> <code>error</code> <code>Optional[Any]</code> <p>Error content.</p> <code>None</code> <code>error_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for error.</p> <code>None</code> <code>form</code> <code>Optional[str]</code> <p>Form prop for hidden input.</p> <code>None</code> <code>format</code> <code>Optional[str]</code> <p>Time format ('12h' or '24h').</p> <code>None</code> <code>hidden_input_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for hidden input.</p> <code>None</code> <code>hours_input_label</code> <code>Optional[str]</code> <p>aria-label of hours input.</p> <code>None</code> <code>hours_input_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for hours input.</p> <code>None</code> <code>hours_step</code> <code>Optional[int]</code> <p>Hours increment/decrement step.</p> <code>None</code> <code>input_size</code> <code>Optional[str]</code> <p>Size attribute for input element.</p> <code>None</code> <code>input_wrapper_order</code> <code>Optional[list[str]]</code> <p>Order of elements.</p> <code>None</code> <code>label_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for label.</p> <code>None</code> <code>left_section</code> <code>Optional[Any]</code> <p>Left section content.</p> <code>None</code> <code>left_section_pointer_events</code> <code>Optional[str]</code> <p>Left section pointer events.</p> <code>None</code> <code>left_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for left section.</p> <code>None</code> <code>left_section_width</code> <code>Optional[Union[str, int]]</code> <p>Left section width.</p> <code>None</code> <code>max</code> <code>Optional[str]</code> <p>Max time value (hh:mm:ss).</p> <code>None</code> <code>max_dropdown_content_height</code> <code>Optional[int]</code> <p>Max dropdown height in px.</p> <code>None</code> <code>min</code> <code>Optional[str]</code> <p>Min time value (hh:mm:ss).</p> <code>None</code> <code>minutes_input_label</code> <code>Optional[str]</code> <p>aria-label of minutes input.</p> <code>None</code> <code>minutes_input_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for minutes input.</p> <code>None</code> <code>minutes_step</code> <code>Optional[int]</code> <p>Minutes increment/decrement step.</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>Name prop for hidden input.</p> <code>None</code> <code>pointer</code> <code>Optional[bool]</code> <p>Whether to show pointer cursor.</p> <code>None</code> <code>popover_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for popover.</p> <code>None</code> <code>presets</code> <code>Optional[Any]</code> <p>Time presets for dropdown.</p> <code>None</code> <code>radius</code> <code>Optional[Union[str, int]]</code> <p>Border radius.</p> <code>None</code> <code>read_only</code> <code>Optional[bool]</code> <p>Whether value is read-only.</p> <code>None</code> <code>required</code> <code>Optional[bool]</code> <p>Whether field is required.</p> <code>None</code> <code>right_section</code> <code>Optional[Any]</code> <p>Right section content.</p> <code>None</code> <code>right_section_pointer_events</code> <code>Optional[str]</code> <p>Right section pointer events.</p> <code>None</code> <code>right_section_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for right section.</p> <code>None</code> <code>right_section_width</code> <code>Optional[Union[str, int]]</code> <p>Right section width.</p> <code>None</code> <code>scroll_area_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for scroll areas.</p> <code>None</code> <code>seconds_input_label</code> <code>Optional[str]</code> <p>aria-label of seconds input.</p> <code>None</code> <code>seconds_input_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for seconds input.</p> <code>None</code> <code>seconds_step</code> <code>Optional[int]</code> <p>Seconds increment/decrement step.</p> <code>None</code> <code>size</code> <code>Optional[str]</code> <p>Controls input height and padding.</p> <code>None</code> <code>value</code> <code>Optional[Union[time, str]]</code> <p>Current value.</p> <code>None</code> <code>with_asterisk</code> <code>Optional[bool]</code> <p>Whether to show required asterisk.</p> <code>None</code> <code>with_dropdown</code> <code>Optional[bool]</code> <p>Whether to show dropdown.</p> <code>None</code> <code>with_error_styles</code> <code>Optional[bool]</code> <p>Whether to show error styling.</p> <code>None</code> <code>with_seconds</code> <code>Optional[bool]</code> <p>Whether to show seconds input.</p> <code>None</code> <code>wrapper_props</code> <code>Optional[dict[str, Any]]</code> <p>Props for root element.</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Optional[time]</code> <p>Optional[datetime.time]: Current value.</p> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def time_picker(\n    self,\n    label: str,\n    value: Optional[Union[datetime.time, str]] = None,\n    *,\n    key: Optional[str] = None,\n    on_change: Optional[Callable[[Any], None]] = None,\n    am_pm_input_label: Optional[str] = None,\n    am_pm_labels: Optional[dict[str, str]] = None,\n    am_pm_select_props: Optional[dict[str, Any]] = None,\n    clear_button_props: Optional[dict[str, Any]] = None,\n    clearable: Optional[bool] = None,\n    description: Optional[Any] = None,\n    description_props: Optional[dict[str, Any]] = None,\n    disabled: Optional[bool] = None,\n    error: Optional[Any] = None,\n    error_props: Optional[dict[str, Any]] = None,\n    form: Optional[str] = None,\n    format: Optional[str] = None,  # noqa: A002\n    hidden_input_props: Optional[dict[str, Any]] = None,\n    hours_input_label: Optional[str] = None,\n    hours_input_props: Optional[dict[str, Any]] = None,\n    hours_step: Optional[int] = None,\n    input_size: Optional[str] = None,\n    input_wrapper_order: Optional[list[str]] = None,\n    label_props: Optional[dict[str, Any]] = None,\n    left_section: Optional[Any] = None,\n    left_section_pointer_events: Optional[str] = None,\n    left_section_props: Optional[dict[str, Any]] = None,\n    left_section_width: Optional[Union[str, int]] = None,\n    max: Optional[str] = None,  # noqa: A002\n    max_dropdown_content_height: Optional[int] = None,\n    min: Optional[str] = None,  # noqa: A002\n    minutes_input_label: Optional[str] = None,\n    minutes_input_props: Optional[dict[str, Any]] = None,\n    minutes_step: Optional[int] = None,\n    name: Optional[str] = None,\n    pointer: Optional[bool] = None,\n    popover_props: Optional[dict[str, Any]] = None,\n    presets: Optional[Any] = None,\n    radius: Optional[Union[str, int]] = None,\n    read_only: Optional[bool] = None,\n    required: Optional[bool] = None,\n    right_section: Optional[Any] = None,\n    right_section_pointer_events: Optional[str] = None,\n    right_section_props: Optional[dict[str, Any]] = None,\n    right_section_width: Optional[Union[str, int]] = None,\n    scroll_area_props: Optional[dict[str, Any]] = None,\n    seconds_input_label: Optional[str] = None,\n    seconds_input_props: Optional[dict[str, Any]] = None,\n    seconds_step: Optional[int] = None,\n    size: Optional[str] = None,\n    with_asterisk: Optional[bool] = None,\n    with_dropdown: Optional[bool] = None,\n    with_error_styles: Optional[bool] = None,\n    with_seconds: Optional[bool] = None,\n    wrapper_props: Optional[dict[str, Any]] = None,\n    **kwargs: Any,\n) -&gt; Optional[datetime.time]:\n    \"\"\"\n    Time picker with support for parsing from string.\n\n    Args:\n        label (str): Label text.\n        value (Optional[Union[datetime.time, str]]): Current value.\n        key (Optional[str]): Unique key for the widget.\n        on_change (Optional[Callable[[Any], None]]): Called when value changes.\n        am_pm_input_label (Optional[str]): aria-label of am/pm input.\n        am_pm_labels (Optional[dict[str, str]]): Labels used for am/pm values.\n        am_pm_select_props (Optional[dict[str, Any]]): Props for am/pm select.\n        clear_button_props (Optional[dict[str, Any]]): Props for clear button.\n        clearable (Optional[bool]): Whether clear button should be displayed.\n        description (Optional[Any]): Description content.\n        description_props (Optional[dict[str, Any]]): Props for description.\n        disabled (Optional[bool]): Whether component is disabled.\n        error (Optional[Any]): Error content.\n        error_props (Optional[dict[str, Any]]): Props for error.\n        form (Optional[str]): Form prop for hidden input.\n        format (Optional[str]): Time format ('12h' or '24h').\n        hidden_input_props (Optional[dict[str, Any]]): Props for hidden input.\n        hours_input_label (Optional[str]): aria-label of hours input.\n        hours_input_props (Optional[dict[str, Any]]): Props for hours input.\n        hours_step (Optional[int]): Hours increment/decrement step.\n        input_size (Optional[str]): Size attribute for input element.\n        input_wrapper_order (Optional[list[str]]): Order of elements.\n        label_props (Optional[dict[str, Any]]): Props for label.\n        left_section (Optional[Any]): Left section content.\n        left_section_pointer_events (Optional[str]): Left section pointer events.\n        left_section_props (Optional[dict[str, Any]]): Props for left section.\n        left_section_width (Optional[Union[str, int]]): Left section width.\n        max (Optional[str]): Max time value (hh:mm:ss).\n        max_dropdown_content_height (Optional[int]): Max dropdown height in px.\n        min (Optional[str]): Min time value (hh:mm:ss).\n        minutes_input_label (Optional[str]): aria-label of minutes input.\n        minutes_input_props (Optional[dict[str, Any]]): Props for minutes input.\n        minutes_step (Optional[int]): Minutes increment/decrement step.\n        name (Optional[str]): Name prop for hidden input.\n        pointer (Optional[bool]): Whether to show pointer cursor.\n        popover_props (Optional[dict[str, Any]]): Props for popover.\n        presets (Optional[Any]): Time presets for dropdown.\n        radius (Optional[Union[str, int]]): Border radius.\n        read_only (Optional[bool]): Whether value is read-only.\n        required (Optional[bool]): Whether field is required.\n        right_section (Optional[Any]): Right section content.\n        right_section_pointer_events (Optional[str]): Right section pointer events.\n        right_section_props (Optional[dict[str, Any]]): Props for right section.\n        right_section_width (Optional[Union[str, int]]): Right section width.\n        scroll_area_props (Optional[dict[str, Any]]): Props for scroll areas.\n        seconds_input_label (Optional[str]): aria-label of seconds input.\n        seconds_input_props (Optional[dict[str, Any]]): Props for seconds input.\n        seconds_step (Optional[int]): Seconds increment/decrement step.\n        size (Optional[str]): Controls input height and padding.\n        value (Optional[Union[datetime.time, str]]): Current value.\n        with_asterisk (Optional[bool]): Whether to show required asterisk.\n        with_dropdown (Optional[bool]): Whether to show dropdown.\n        with_error_styles (Optional[bool]): Whether to show error styling.\n        with_seconds (Optional[bool]): Whether to show seconds input.\n        wrapper_props (Optional[dict[str, Any]]): Props for root element.\n        kwargs: Additional props to set.\n\n    Returns:\n        Optional[datetime.time]: Current value.\n    \"\"\"\n    return cast(\n        Optional[datetime.time],\n        self._x_input(\n            \"timepicker\",\n            key=key or self._new_widget_id(\"timepicker\", label),\n            label=label,\n            value=value,\n            amPmInputLabel=am_pm_input_label,\n            amPmLabels=am_pm_labels,\n            amPmSelectProps=am_pm_select_props,\n            clearButtonProps=clear_button_props,\n            clearable=clearable,\n            description=description,\n            descriptionProps=description_props,\n            disabled=disabled,\n            error=error,\n            errorProps=error_props,\n            form=form,\n            format=format,\n            hiddenInputProps=hidden_input_props,\n            hoursInputLabel=hours_input_label,\n            hoursInputProps=hours_input_props,\n            hoursStep=hours_step,\n            inputSize=input_size,\n            inputWrapperOrder=input_wrapper_order,\n            labelProps=label_props,\n            leftSection=left_section,\n            leftSectionPointerEvents=left_section_pointer_events,\n            leftSectionProps=left_section_props,\n            leftSectionWidth=left_section_width,\n            max=max,\n            maxDropdownContentHeight=max_dropdown_content_height,\n            min=min,\n            minutesInputLabel=minutes_input_label,\n            minutesInputProps=minutes_input_props,\n            minutesStep=minutes_step,\n            name=name,\n            pointer=pointer,\n            popoverProps=popover_props,\n            presets=presets,\n            radius=radius,\n            readOnly=read_only,\n            required=required,\n            rightSection=right_section,\n            rightSectionPointerEvents=right_section_pointer_events,\n            rightSectionProps=right_section_props,\n            rightSectionWidth=right_section_width,\n            scrollAreaProps=scroll_area_props,\n            secondsInputLabel=seconds_input_label,\n            secondsInputProps=seconds_input_props,\n            secondsStep=seconds_step,\n            size=size,\n            withAsterisk=with_asterisk,\n            withDropdown=with_dropdown,\n            withErrorStyles=with_error_styles,\n            withSeconds=with_seconds,\n            wrapperProps=wrapper_props,\n            rl_format_func=self._format_time,\n            on_change=on_change,\n            **kwargs,\n        ),\n    )\n</code></pre>"},{"location":"modules/#routelit_mantine.builder.RLBuilder.title","title":"<code>title(text, *, key=None, order=None, **kwargs)</code>","text":"<p>Title text with semantic order (h1-h6).</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Title content.</p> required <code>key</code> <code>Optional[str]</code> <p>Explicit element key.</p> <code>None</code> <code>order</code> <code>Optional[int]</code> <p>Heading level (1-6).</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Additional props to set.</p> <code>{}</code> Source code in <code>src/routelit_mantine/builder.py</code> <pre><code>def title(  # type: ignore[override]\n    self,\n    text: str,\n    *,\n    key: Optional[str] = None,\n    order: Optional[int] = None,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"\n    Title text with semantic order (h1-h6).\n\n    Args:\n        text (str): Title content.\n        key (Optional[str]): Explicit element key.\n        order (Optional[int]): Heading level (1-6).\n        kwargs: Additional props to set.\n    \"\"\"\n    self._create_element(\n        name=\"title\",\n        key=key or self._new_text_id(\"title\"),\n        props={\"children\": text, \"order\": order, **kwargs},\n    )\n</code></pre>"}]}